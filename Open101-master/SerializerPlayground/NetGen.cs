using System;
using System.Diagnostics;
using Open101.IO;
using Open101.Serializer;
using Open101.Serializer.DML;

namespace SerializerPlayground
{
	public class AISCLIENT_19_Protocol: INetworkService
    {
        public const byte c_serviceID = 19;
        public byte GetID() => c_serviceID;
        
        public class MSG_AISMESSAGE : INetworkMessage
        {
            public const byte c_messageID = 1;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("Message", DMLType.STR)] public ByteString m_message;
            [DMLField("Modal", DMLType.UBYT)] public byte m_modal;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_AISMESSAGE>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_AISMESSAGE>.Read(buf, this);
            }
        }
        
        public bool Dispatch(object handlerVoid, INetworkMessage message)
        {
            Debug.Assert(message.GetServiceID() == c_serviceID);
            var handler = (Handler)handlerVoid;
            
            switch (message.GetID())
            {
                case MSG_AISMESSAGE.c_messageID:
                    return handler.NetHandleAISMessage((MSG_AISMESSAGE)message);
            }
            return false;
        }
        
        public INetworkMessage AllocateMessage(byte id)
        {
            switch (id)
            {
                case MSG_AISMESSAGE.c_messageID: return new MSG_AISMESSAGE();
            }
            throw new ArgumentOutOfRangeException(nameof(id));
        }
        
        public interface Handler
        {
            bool NetHandleAISMessage(MSG_AISMESSAGE msg) => false;
        }
    }
    public class SYSTEM_1_Protocol: INetworkService
    {
        public const byte c_serviceID = 1;
        public byte GetID() => c_serviceID;
        
        public class MSG_PING : INetworkMessage
        {
            public const byte c_messageID = 1;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PING>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PING>.Read(buf, this);
            }
        }
        public class MSG_PING_RSP : INetworkMessage
        {
            public const byte c_messageID = 2;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PING_RSP>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PING_RSP>.Read(buf, this);
            }
        }
        
        public bool Dispatch(object handlerVoid, INetworkMessage message)
        {
            Debug.Assert(message.GetServiceID() == c_serviceID);
            var handler = (Handler)handlerVoid;
            
            switch (message.GetID())
            {
                case MSG_PING.c_messageID:
                    return handler.NetHandlePing((MSG_PING)message);
                case MSG_PING_RSP.c_messageID:
                    return handler.NetHandlePingRsp((MSG_PING_RSP)message);
            }
            return false;
        }
        
        public INetworkMessage AllocateMessage(byte id)
        {
            switch (id)
            {
                case MSG_PING.c_messageID: return new MSG_PING();
                case MSG_PING_RSP.c_messageID: return new MSG_PING_RSP();
            }
            throw new ArgumentOutOfRangeException(nameof(id));
        }
        
        public interface Handler
        {
            bool NetHandlePing(MSG_PING msg) => false;
            bool NetHandlePingRsp(MSG_PING_RSP msg) => false;
        }
    }
    public class EXTENDEDBASE_2_Protocol: INetworkService
    {
        public const byte c_serviceID = 2;
        public byte GetID() => c_serviceID;
        
        public class MSG_CUSTOMDICT : INetworkMessage
        {
            public const byte c_messageID = 1;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_CUSTOMDICT>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_CUSTOMDICT>.Read(buf, this);
            }
        }
        public class MSG_CUSTOMRECORD : INetworkMessage
        {
            public const byte c_messageID = 2;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_CUSTOMRECORD>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_CUSTOMRECORD>.Read(buf, this);
            }
        }
        public class MSG_FORCE_DISCONNECT : INetworkMessage
        {
            public const byte c_messageID = 3;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("Type", DMLType.UINT)] public uint m_type;
            [DMLField("TimeStamp", DMLType.STR)] public ByteString m_timeStamp;
            [DMLField("Message", DMLType.STR)] public ByteString m_message;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_FORCE_DISCONNECT>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_FORCE_DISCONNECT>.Read(buf, this);
            }
        }
        public class MSG_RAWRECORD : INetworkMessage
        {
            public const byte c_messageID = 4;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_RAWRECORD>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_RAWRECORD>.Read(buf, this);
            }
        }
        public class MSG_RAW_TEXT : INetworkMessage
        {
            public const byte c_messageID = 5;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("Message", DMLType.STR)] public ByteString m_message;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_RAW_TEXT>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_RAW_TEXT>.Read(buf, this);
            }
        }
        public class MSG_SERVERMESSAGE : INetworkMessage
        {
            public const byte c_messageID = 6;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("Modal", DMLType.UBYT)] public byte m_modal;
            [DMLField("Message", DMLType.WSTR)] public string m_message;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_SERVERMESSAGE>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_SERVERMESSAGE>.Read(buf, this);
            }
        }
        
        public bool Dispatch(object handlerVoid, INetworkMessage message)
        {
            Debug.Assert(message.GetServiceID() == c_serviceID);
            var handler = (Handler)handlerVoid;
            
            switch (message.GetID())
            {
                case MSG_CUSTOMDICT.c_messageID:
                    return handler.NetHandleCustomDict((MSG_CUSTOMDICT)message);
                case MSG_CUSTOMRECORD.c_messageID:
                    return handler.NetHandleCustomRecord((MSG_CUSTOMRECORD)message);
                case MSG_FORCE_DISCONNECT.c_messageID:
                    return handler.NetHandleForce_Disconnect((MSG_FORCE_DISCONNECT)message);
                case MSG_RAWRECORD.c_messageID:
                    return handler.NetHandleRawRecord((MSG_RAWRECORD)message);
                case MSG_RAW_TEXT.c_messageID:
                    return handler.NetHandleRawText((MSG_RAW_TEXT)message);
                case MSG_SERVERMESSAGE.c_messageID:
                    return handler.NetHandleServerMessage((MSG_SERVERMESSAGE)message);
            }
            return false;
        }
        
        public INetworkMessage AllocateMessage(byte id)
        {
            switch (id)
            {
                case MSG_CUSTOMDICT.c_messageID: return new MSG_CUSTOMDICT();
                case MSG_CUSTOMRECORD.c_messageID: return new MSG_CUSTOMRECORD();
                case MSG_FORCE_DISCONNECT.c_messageID: return new MSG_FORCE_DISCONNECT();
                case MSG_RAWRECORD.c_messageID: return new MSG_RAWRECORD();
                case MSG_RAW_TEXT.c_messageID: return new MSG_RAW_TEXT();
                case MSG_SERVERMESSAGE.c_messageID: return new MSG_SERVERMESSAGE();
            }
            throw new ArgumentOutOfRangeException(nameof(id));
        }
        
        public interface Handler
        {
            bool NetHandleCustomDict(MSG_CUSTOMDICT msg) => false;
            bool NetHandleCustomRecord(MSG_CUSTOMRECORD msg) => false;
            bool NetHandleForce_Disconnect(MSG_FORCE_DISCONNECT msg) => false;
            bool NetHandleRawRecord(MSG_RAWRECORD msg) => false;
            bool NetHandleRawText(MSG_RAW_TEXT msg) => false;
            bool NetHandleServerMessage(MSG_SERVERMESSAGE msg) => false;
        }
    }
    public class GAME_5_Protocol: INetworkService
    {
        public const byte c_serviceID = 5;
        public byte GetID() => c_serviceID;
        
        public class MSG_ADCLICKTHROUGH : INetworkMessage
        {
            public const byte c_messageID = 1;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("Partner", DMLType.STR)] public ByteString m_partner;
            [DMLField("URL", DMLType.STR)] public ByteString m_URL;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_ADCLICKTHROUGH>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_ADCLICKTHROUGH>.Read(buf, this);
            }
        }
        public class MSG_ADDEFFECT : INetworkMessage
        {
            public const byte c_messageID = 2;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("GameObjectID", DMLType.GID)] public GID m_gameObjectID;
            [DMLField("EffectData", DMLType.STR)] public ByteString m_effectData;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_ADDEFFECT>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_ADDEFFECT>.Read(buf, this);
            }
        }
        public class MSG_ADDITEMREQUEST : INetworkMessage
        {
            public const byte c_messageID = 3;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("GlobalID", DMLType.GID)] public GID m_globalID;
            [DMLField("ItemTemplateID", DMLType.GID)] public GID m_itemTemplateID;
            [DMLField("Quantity", DMLType.INT)] public int m_quantity;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_ADDITEMREQUEST>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_ADDITEMREQUEST>.Read(buf, this);
            }
        }
        public class MSG_ADDOBJECT : INetworkMessage
        {
            public const byte c_messageID = 4;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("GameObjectID", DMLType.GID)] public GID m_gameObjectID;
            [DMLField("LocationX", DMLType.FLT)] public float m_locationX;
            [DMLField("LocationY", DMLType.FLT)] public float m_locationY;
            [DMLField("LocationZ", DMLType.FLT)] public float m_locationZ;
            [DMLField("Direction", DMLType.FLT)] public float m_direction;
            [DMLField("Name", DMLType.STR)] public ByteString m_name;
            [DMLField("TemplateID", DMLType.GID)] public GID m_templateID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_ADDOBJECT>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_ADDOBJECT>.Read(buf, this);
            }
        }
        public class MSG_ADDPARTICLE : INetworkMessage
        {
            public const byte c_messageID = 5;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("asset", DMLType.STR)] public ByteString m_asset;
            [DMLField("newName", DMLType.STR)] public ByteString m_newName;
            [DMLField("attachTo", DMLType.STR)] public ByteString m_attachTo;
            [DMLField("loop", DMLType.UBYT)] public byte m_loop;
            [DMLField("floatText", DMLType.STR)] public ByteString m_floatText;
            [DMLField("chatText", DMLType.STR)] public ByteString m_chatText;
            [DMLField("chatArgs", DMLType.STR)] public ByteString m_chatArgs;
            [DMLField("sound", DMLType.STR)] public ByteString m_sound;
            [DMLField("parentID", DMLType.GID)] public GID m_parentID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_ADDPARTICLE>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_ADDPARTICLE>.Read(buf, this);
            }
        }
        public class MSG_ADDZONETIMER : INetworkMessage
        {
            public const byte c_messageID = 6;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("TimerID", DMLType.INT)] public int m_timerID;
            [DMLField("Title", DMLType.STR)] public ByteString m_title;
            [DMLField("TimerUI", DMLType.STR)] public ByteString m_timerUI;
            [DMLField("CountdownTime", DMLType.FLT)] public float m_countdownTime;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_ADDZONETIMER>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_ADDZONETIMER>.Read(buf, this);
            }
        }
        public class MSG_ATTACH : INetworkMessage
        {
            public const byte c_messageID = 7;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("GameObjectID", DMLType.GID)] public GID m_gameObjectID;
            [DMLField("LoginKey", DMLType.STR)] public ByteString m_loginKey;
            [DMLField("UserID", DMLType.GID)] public GID m_userID;
            [DMLField("CharID", DMLType.GID)] public GID m_charID;
            [DMLField("ZoneName", DMLType.STR)] public ByteString m_zoneName;
            [DMLField("Location", DMLType.STR)] public ByteString m_location;
            [DMLField("TargetPlayerID", DMLType.GID)] public GID m_targetPlayerID;
            [DMLField("ZoneID", DMLType.GID)] public GID m_zoneID;
            [DMLField("Slot", DMLType.INT)] public int m_slot;
            [DMLField("SessionID", DMLType.GID)] public GID m_sessionID;
            [DMLField("SessionSlot", DMLType.INT)] public int m_sessionSlot;
            [DMLField("PassKey", DMLType.STR)] public ByteString m_passKey;
            [DMLField("Reattach", DMLType.UBYT)] public byte m_reattach;
            [DMLField("Retry", DMLType.UBYT)] public byte m_retry;
            [DMLField("Locale", DMLType.STR)] public ByteString m_locale;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_ATTACH>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_ATTACH>.Read(buf, this);
            }
        }
        public class MSG_ATTACHFAILED : INetworkMessage
        {
            public const byte c_messageID = 8;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("Error", DMLType.UINT)] public uint m_error;
            [DMLField("Rejected", DMLType.UINT)] public uint m_rejected;
            [DMLField("NoDisconnect", DMLType.UINT)] public uint m_noDisconnect;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_ATTACHFAILED>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_ATTACHFAILED>.Read(buf, this);
            }
        }
        public class MSG_AUCTIONHOUSEUPDATE : INetworkMessage
        {
            public const byte c_messageID = 9;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("UpdateInfo", DMLType.STR)] public ByteString m_updateInfo;
            [DMLField("CharacterID", DMLType.GID)] public GID m_characterID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_AUCTIONHOUSEUPDATE>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_AUCTIONHOUSEUPDATE>.Read(buf, this);
            }
        }
        public class MSG_BADGES : INetworkMessage
        {
            public const byte c_messageID = 10;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("CurrentBadge", DMLType.UINT)] public uint m_currentBadge;
            [DMLField("UpdateAll", DMLType.BYT)] public sbyte m_updateAll;
            [DMLField("TotalBadges", DMLType.UINT)] public uint m_totalBadges;
            [DMLField("Add", DMLType.BYT)] public sbyte m_add;
            [DMLField("Remove", DMLType.BYT)] public sbyte m_remove;
            [DMLField("BadgeName", DMLType.STR)] public ByteString m_badgeName;
            [DMLField("BadgeInfo", DMLType.STR)] public ByteString m_badgeInfo;
            [DMLField("BadgeNameID", DMLType.UINT)] public uint m_badgeNameID;
            [DMLField("BadgeFilterInfo", DMLType.STR)] public ByteString m_badgeFilterInfo;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_BADGES>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_BADGES>.Read(buf, this);
            }
        }
        public class MSG_BAN_RSP : INetworkMessage
        {
            public const byte c_messageID = 11;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("BannedID", DMLType.STR)] public ByteString m_bannedID;
            [DMLField("BanTime", DMLType.STR)] public ByteString m_banTime;
            [DMLField("BanType", DMLType.STR)] public ByteString m_banType;
            [DMLField("Success", DMLType.UBYT)] public byte m_success;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_BAN_RSP>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_BAN_RSP>.Read(buf, this);
            }
        }
        public class MSG_BESTFRIEND : INetworkMessage
        {
            public const byte c_messageID = 12;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("ListOwnerGID", DMLType.GID)] public GID m_listOwnerGID;
            [DMLField("BuddyID", DMLType.GID)] public GID m_buddyID;
            [DMLField("Forwarded", DMLType.UBYT)] public byte m_forwarded;
            [DMLField("FriendSymbol", DMLType.UBYT)] public byte m_friendSymbol;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_BESTFRIEND>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_BESTFRIEND>.Read(buf, this);
            }
        }
        public class MSG_BLACKBALL : INetworkMessage
        {
            public const byte c_messageID = 13;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("TargetObjID", DMLType.GID)] public GID m_targetObjID;
            [DMLField("HarassmentType", DMLType.WSTR)] public string m_harassmentType;
            [DMLField("ChatLog", DMLType.WSTR)] public string m_chatLog;
            [DMLField("IsMute", DMLType.BYT)] public sbyte m_isMute;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_BLACKBALL>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_BLACKBALL>.Read(buf, this);
            }
        }
        public class MSG_BUDDYDROP : INetworkMessage
        {
            public const byte c_messageID = 14;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("ListOwnerGID", DMLType.GID)] public GID m_listOwnerGID;
            [DMLField("EntryGID", DMLType.GID)] public GID m_entryGID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_BUDDYDROP>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_BUDDYDROP>.Read(buf, this);
            }
        }
        public class MSG_BUDDYENTRY : INetworkMessage
        {
            public const byte c_messageID = 15;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("ListOwnerGID", DMLType.GID)] public GID m_listOwnerGID;
            [DMLField("EntryGID", DMLType.GID)] public GID m_entryGID;
            [DMLField("GameObjectID", DMLType.GID)] public GID m_gameObjectID;
            [DMLField("Name", DMLType.STR)] public ByteString m_name;
            [DMLField("Status", DMLType.UBYT)] public byte m_status;
            [DMLField("FriendInfo", DMLType.UINT)] public uint m_friendInfo;
            [DMLField("PasswordChat", DMLType.UBYT)] public byte m_passwordChat;
            [DMLField("Permissions", DMLType.UINT)] public uint m_permissions;
            [DMLField("ZoneName", DMLType.STR)] public ByteString m_zoneName;
            [DMLField("RealmName", DMLType.STR)] public ByteString m_realmName;
            [DMLField("Locale", DMLType.UINT)] public uint m_locale;
            [DMLField("FriendDate", DMLType.UINT)] public uint m_friendDate;
            [DMLField("FriendStatusDate", DMLType.UINT)] public uint m_friendStatusDate;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_BUDDYENTRY>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_BUDDYENTRY>.Read(buf, this);
            }
        }
        public class MSG_BUDDYLISTCOMPLETE : INetworkMessage
        {
            public const byte c_messageID = 16;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("ListOwnerGID", DMLType.GID)] public GID m_listOwnerGID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_BUDDYLISTCOMPLETE>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_BUDDYLISTCOMPLETE>.Read(buf, this);
            }
        }
        public class MSG_BUDDYREQUESTACCEPT : INetworkMessage
        {
            public const byte c_messageID = 17;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("ListOwnerGID", DMLType.GID)] public GID m_listOwnerGID;
            [DMLField("EntryGID", DMLType.GID)] public GID m_entryGID;
            [DMLField("OwnerName", DMLType.STR)] public ByteString m_ownerName;
            [DMLField("EntryName", DMLType.STR)] public ByteString m_entryName;
            [DMLField("SourceObjectID", DMLType.GID)] public GID m_sourceObjectID;
            [DMLField("DestObjectID", DMLType.GID)] public GID m_destObjectID;
            [DMLField("Error", DMLType.UINT)] public uint m_error;
            [DMLField("Permissions", DMLType.UINT)] public uint m_permissions;
            [DMLField("Forwarded", DMLType.UBYT)] public byte m_forwarded;
            [DMLField("EntryLocale", DMLType.UINT)] public uint m_entryLocale;
            [DMLField("FriendInfo", DMLType.UINT)] public uint m_friendInfo;
            [DMLField("FriendDate", DMLType.UINT)] public uint m_friendDate;
            [DMLField("FriendStatusDate", DMLType.UINT)] public uint m_friendStatusDate;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_BUDDYREQUESTACCEPT>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_BUDDYREQUESTACCEPT>.Read(buf, this);
            }
        }
        public class MSG_BUDDYREQUESTACCEPTFWD : INetworkMessage
        {
            public const byte c_messageID = 18;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("ListOwnerGID", DMLType.GID)] public GID m_listOwnerGID;
            [DMLField("EntryGID", DMLType.GID)] public GID m_entryGID;
            [DMLField("OwnerName", DMLType.STR)] public ByteString m_ownerName;
            [DMLField("EntryName", DMLType.STR)] public ByteString m_entryName;
            [DMLField("SourceObjectID", DMLType.GID)] public GID m_sourceObjectID;
            [DMLField("DestObjectID", DMLType.GID)] public GID m_destObjectID;
            [DMLField("Permissions", DMLType.UINT)] public uint m_permissions;
            [DMLField("EntryLocale", DMLType.UINT)] public uint m_entryLocale;
            [DMLField("FriendInfo", DMLType.UINT)] public uint m_friendInfo;
            [DMLField("FriendDate", DMLType.UINT)] public uint m_friendDate;
            [DMLField("FriendStatusDate", DMLType.UINT)] public uint m_friendStatusDate;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_BUDDYREQUESTACCEPTFWD>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_BUDDYREQUESTACCEPTFWD>.Read(buf, this);
            }
        }
        public class MSG_BUDDYREQUESTADD : INetworkMessage
        {
            public const byte c_messageID = 19;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("ListOwnerGID", DMLType.GID)] public GID m_listOwnerGID;
            [DMLField("EntryGID", DMLType.GID)] public GID m_entryGID;
            [DMLField("OwnerName", DMLType.STR)] public ByteString m_ownerName;
            [DMLField("OwnerLevel", DMLType.UBYT)] public byte m_ownerLevel;
            [DMLField("OwnerSchool", DMLType.STR)] public ByteString m_ownerSchool;
            [DMLField("Remove", DMLType.UBYT)] public byte m_remove;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_BUDDYREQUESTADD>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_BUDDYREQUESTADD>.Read(buf, this);
            }
        }
        public class MSG_BUDDYREQUESTADDFWD : INetworkMessage
        {
            public const byte c_messageID = 20;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("ListOwnerGID", DMLType.GID)] public GID m_listOwnerGID;
            [DMLField("EntryGID", DMLType.GID)] public GID m_entryGID;
            [DMLField("OwnerName", DMLType.STR)] public ByteString m_ownerName;
            [DMLField("OwnerLevel", DMLType.UBYT)] public byte m_ownerLevel;
            [DMLField("OwnerSchool", DMLType.STR)] public ByteString m_ownerSchool;
            [DMLField("Remove", DMLType.UBYT)] public byte m_remove;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_BUDDYREQUESTADDFWD>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_BUDDYREQUESTADDFWD>.Read(buf, this);
            }
        }
        public class MSG_BUDDYREQUESTDENY : INetworkMessage
        {
            public const byte c_messageID = 21;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("ListOwnerGID", DMLType.GID)] public GID m_listOwnerGID;
            [DMLField("EntryGID", DMLType.GID)] public GID m_entryGID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_BUDDYREQUESTDENY>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_BUDDYREQUESTDENY>.Read(buf, this);
            }
        }
        public class MSG_BUDDYREQUESTDENYFWD : INetworkMessage
        {
            public const byte c_messageID = 22;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("ListOwnerGID", DMLType.GID)] public GID m_listOwnerGID;
            [DMLField("EntryGID", DMLType.GID)] public GID m_entryGID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_BUDDYREQUESTDENYFWD>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_BUDDYREQUESTDENYFWD>.Read(buf, this);
            }
        }
        public class MSG_BUDDYREQUESTDROP : INetworkMessage
        {
            public const byte c_messageID = 23;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("ListOwnerGID", DMLType.GID)] public GID m_listOwnerGID;
            [DMLField("EntryGID", DMLType.GID)] public GID m_entryGID;
            [DMLField("Forwarded", DMLType.UBYT)] public byte m_forwarded;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_BUDDYREQUESTDROP>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_BUDDYREQUESTDROP>.Read(buf, this);
            }
        }
        public class MSG_BUDDYREQUESTERROR : INetworkMessage
        {
            public const byte c_messageID = 24;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("ListOwnerGID", DMLType.GID)] public GID m_listOwnerGID;
            [DMLField("EntryGID", DMLType.GID)] public GID m_entryGID;
            [DMLField("Error", DMLType.UBYT)] public byte m_error;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_BUDDYREQUESTERROR>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_BUDDYREQUESTERROR>.Read(buf, this);
            }
        }
        public class MSG_BUDDYREQUESTLIST : INetworkMessage
        {
            public const byte c_messageID = 25;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("ListOwnerGID", DMLType.GID)] public GID m_listOwnerGID;
            [DMLField("Forwarded", DMLType.UBYT)] public byte m_forwarded;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_BUDDYREQUESTLIST>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_BUDDYREQUESTLIST>.Read(buf, this);
            }
        }
        public class MSG_BUDDYSTATS : INetworkMessage
        {
            public const byte c_messageID = 26;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("BuddyID", DMLType.GID)] public GID m_buddyID;
            [DMLField("StatBlock", DMLType.STR)] public ByteString m_statBlock;
            [DMLField("PetStatBlock", DMLType.STR)] public ByteString m_petStatBlock;
            [DMLField("CharBlock", DMLType.STR)] public ByteString m_charBlock;
            [DMLField("EquipBlock", DMLType.STR)] public ByteString m_equipBlock;
            [DMLField("EffectBlock", DMLType.STR)] public ByteString m_effectBlock;
            [DMLField("Level", DMLType.UINT)] public uint m_level;
            [DMLField("School", DMLType.UINT)] public uint m_school;
            [DMLField("Gender", DMLType.BYT)] public sbyte m_gender;
            [DMLField("StatBlockCRC", DMLType.UINT)] public uint m_statBlockCRC;
            [DMLField("PetStatBlockCRC", DMLType.UINT)] public uint m_petStatBlockCRC;
            [DMLField("CharBlockCRC", DMLType.UINT)] public uint m_charBlockCRC;
            [DMLField("EquipBlockCRC", DMLType.UINT)] public uint m_equipBlockCRC;
            [DMLField("EffectBlockCRC", DMLType.UINT)] public uint m_effectBlockCRC;
            [DMLField("SourceCharacterGID", DMLType.GID)] public GID m_sourceCharacterGID;
            [DMLField("TargetCharacterGID", DMLType.GID)] public GID m_targetCharacterGID;
            [DMLField("PetJewelID", DMLType.UINT)] public uint m_petJewelID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_BUDDYSTATS>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_BUDDYSTATS>.Read(buf, this);
            }
        }
        public class MSG_BUDDYSTATUSUPDATE : INetworkMessage
        {
            public const byte c_messageID = 27;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("ListOwnerGID", DMLType.GID)] public GID m_listOwnerGID;
            [DMLField("EntryGID", DMLType.GID)] public GID m_entryGID;
            [DMLField("Status", DMLType.UBYT)] public byte m_status;
            [DMLField("Permissions", DMLType.UINT)] public uint m_permissions;
            [DMLField("ZoneName", DMLType.STR)] public ByteString m_zoneName;
            [DMLField("Locale", DMLType.UINT)] public uint m_locale;
            [DMLField("RealmName", DMLType.STR)] public ByteString m_realmName;
            [DMLField("FriendInfo", DMLType.UINT)] public uint m_friendInfo;
            [DMLField("FriendDate", DMLType.UINT)] public uint m_friendDate;
            [DMLField("FriendStatusDate", DMLType.UINT)] public uint m_friendStatusDate;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_BUDDYSTATUSUPDATE>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_BUDDYSTATUSUPDATE>.Read(buf, this);
            }
        }
        public class MSG_BUGREPORT : INetworkMessage
        {
            public const byte c_messageID = 28;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("Report", DMLType.STR)] public ByteString m_report;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_BUGREPORT>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_BUGREPORT>.Read(buf, this);
            }
        }
        public class MSG_BUGSUBMITRESPONSE : INetworkMessage
        {
            public const byte c_messageID = 29;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("Success", DMLType.BYT)] public sbyte m_success;
            [DMLField("Type", DMLType.BYT)] public sbyte m_type;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_BUGSUBMITRESPONSE>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_BUGSUBMITRESPONSE>.Read(buf, this);
            }
        }
        public class MSG_CHANNELCHAT : INetworkMessage
        {
            public const byte c_messageID = 30;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("SourceName", DMLType.STR)] public ByteString m_sourceName;
            [DMLField("SourceID", DMLType.GID)] public GID m_sourceID;
            [DMLField("Message", DMLType.WSTR)] public string m_message;
            [DMLField("TargetID", DMLType.GID)] public GID m_targetID;
            [DMLField("Filter", DMLType.UBYT)] public byte m_filter;
            [DMLField("Flags", DMLType.UINT)] public uint m_flags;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_CHANNELCHAT>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_CHANNELCHAT>.Read(buf, this);
            }
        }
        public class MSG_CHANNELSUBSCRIPTION : INetworkMessage
        {
            public const byte c_messageID = 31;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("RecipientID", DMLType.GID)] public GID m_recipientID;
            [DMLField("ChannelID", DMLType.GID)] public GID m_channelID;
            [DMLField("ParentID", DMLType.GID)] public GID m_parentID;
            [DMLField("ChannelName", DMLType.WSTR)] public string m_channelName;
            [DMLField("ChannelType", DMLType.UBYT)] public byte m_channelType;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_CHANNELSUBSCRIPTION>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_CHANNELSUBSCRIPTION>.Read(buf, this);
            }
        }
        public class MSG_CHATDIAGNOSTICS : INetworkMessage
        {
            public const byte c_messageID = 32;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("CharacterID", DMLType.GID)] public GID m_characterID;
            [DMLField("Data", DMLType.STR)] public ByteString m_data;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_CHATDIAGNOSTICS>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_CHATDIAGNOSTICS>.Read(buf, this);
            }
        }
        public class MSG_CHATERROR : INetworkMessage
        {
            public const byte c_messageID = 33;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("ListOwnerGID", DMLType.GID)] public GID m_listOwnerGID;
            [DMLField("CharacterID", DMLType.GID)] public GID m_characterID;
            [DMLField("Error", DMLType.UINT)] public uint m_error;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_CHATERROR>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_CHATERROR>.Read(buf, this);
            }
        }
        public class MSG_CHECKSUBSCRIPTION : INetworkMessage
        {
            public const byte c_messageID = 34;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("Success", DMLType.UBYT)] public byte m_success;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_CHECKSUBSCRIPTION>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_CHECKSUBSCRIPTION>.Read(buf, this);
            }
        }
        public class MSG_CHECK_MAIL : INetworkMessage
        {
            public const byte c_messageID = 35;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("CharacterID", DMLType.GID)] public GID m_characterID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_CHECK_MAIL>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_CHECK_MAIL>.Read(buf, this);
            }
        }
        public class MSG_CLIENTMOVE : INetworkMessage
        {
            public const byte c_messageID = 36;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("LocationX", DMLType.USHRT)] public ushort m_locationX;
            [DMLField("LocationY", DMLType.USHRT)] public ushort m_locationY;
            [DMLField("LocationZ", DMLType.USHRT)] public ushort m_locationZ;
            [DMLField("Direction", DMLType.UBYT)] public byte m_direction;
            [DMLField("ZoneCounter", DMLType.UBYT)] public byte m_zoneCounter;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_CLIENTMOVE>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_CLIENTMOVE>.Read(buf, this);
            }
        }
        public class MSG_CLIENTMOVESTATE : INetworkMessage
        {
            public const byte c_messageID = 37;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("NewState", DMLType.BYT)] public sbyte m_newState;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_CLIENTMOVESTATE>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_CLIENTMOVESTATE>.Read(buf, this);
            }
        }
        public class MSG_CLIENTNOTIFYTEXT : INetworkMessage
        {
            public const byte c_messageID = 38;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("NotifyText", DMLType.STR)] public ByteString m_notifyText;
            [DMLField("Type", DMLType.INT)] public int m_type;
            [DMLField("Madlibs", DMLType.STR)] public ByteString m_madlibs;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_CLIENTNOTIFYTEXT>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_CLIENTNOTIFYTEXT>.Read(buf, this);
            }
        }
        public class MSG_CLIENTTUTORIALEVENT : INetworkMessage
        {
            public const byte c_messageID = 39;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("Event", DMLType.STR)] public ByteString m_event;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_CLIENTTUTORIALEVENT>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_CLIENTTUTORIALEVENT>.Read(buf, this);
            }
        }
        public class MSG_CLIENT_DISCONNECT : INetworkMessage
        {
            public const byte c_messageID = 40;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_CLIENT_DISCONNECT>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_CLIENT_DISCONNECT>.Read(buf, this);
            }
        }
        public class MSG_CLIENT_ERROR : INetworkMessage
        {
            public const byte c_messageID = 41;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("Function", DMLType.STR)] public ByteString m_function;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_CLIENT_ERROR>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_CLIENT_ERROR>.Read(buf, this);
            }
        }
        public class MSG_CLIENT_PROCESS_TERMINATED : INetworkMessage
        {
            public const byte c_messageID = 42;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("JobID", DMLType.UINT)] public uint m_jobID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_CLIENT_PROCESS_TERMINATED>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_CLIENT_PROCESS_TERMINATED>.Read(buf, this);
            }
        }
        public class MSG_COMBINEINVENTORYITEMS : INetworkMessage
        {
            public const byte c_messageID = 43;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("GlobalID", DMLType.GID)] public GID m_globalID;
            [DMLField("ItemID1", DMLType.GID)] public GID m_itemID1;
            [DMLField("ItemID2", DMLType.GID)] public GID m_itemID2;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_COMBINEINVENTORYITEMS>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_COMBINEINVENTORYITEMS>.Read(buf, this);
            }
        }
        public class MSG_COMMAND : INetworkMessage
        {
            public const byte c_messageID = 44;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("Command", DMLType.WSTR)] public string m_command;
            [DMLField("ResultEvent", DMLType.STR)] public ByteString m_resultEvent;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_COMMAND>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_COMMAND>.Read(buf, this);
            }
        }
        public class MSG_COMMANDRESULT : INetworkMessage
        {
            public const byte c_messageID = 45;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("Command", DMLType.WSTR)] public string m_command;
            [DMLField("ResultEvent", DMLType.STR)] public ByteString m_resultEvent;
            [DMLField("Results", DMLType.WSTR)] public string m_results;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_COMMANDRESULT>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_COMMANDRESULT>.Read(buf, this);
            }
        }
        public class MSG_COMPANIONEFFECTS : INetworkMessage
        {
            public const byte c_messageID = 46;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("NPC", DMLType.UINT)] public uint m_nPC;
            [DMLField("EffectInfoList", DMLType.STR)] public ByteString m_effectInfoList;
            [DMLField("Add", DMLType.UBYT)] public byte m_add;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_COMPANIONEFFECTS>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_COMPANIONEFFECTS>.Read(buf, this);
            }
        }
        public class MSG_CORE_EMOTE : INetworkMessage
        {
            public const byte c_messageID = 47;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("Name", DMLType.STR)] public ByteString m_name;
            [DMLField("ExcludeOriginator", DMLType.UBYT)] public byte m_excludeOriginator;
            [DMLField("PhraseID", DMLType.UINT)] public uint m_phraseID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_CORE_EMOTE>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_CORE_EMOTE>.Read(buf, this);
            }
        }
        public class MSG_CREATECHANNELRESPONSE : INetworkMessage
        {
            public const byte c_messageID = 48;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("SourceID", DMLType.GID)] public GID m_sourceID;
            [DMLField("ChannelID", DMLType.GID)] public GID m_channelID;
            [DMLField("ChannelName", DMLType.STR)] public ByteString m_channelName;
            [DMLField("ErrorCode", DMLType.UBYT)] public byte m_errorCode;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_CREATECHANNELRESPONSE>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_CREATECHANNELRESPONSE>.Read(buf, this);
            }
        }
        public class MSG_CREATE_SESSION : INetworkMessage
        {
            public const byte c_messageID = 49;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_CREATE_SESSION>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_CREATE_SESSION>.Read(buf, this);
            }
        }
        public class MSG_CSRBANKITEMS : INetworkMessage
        {
            public const byte c_messageID = 50;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("GlobalID", DMLType.GID)] public GID m_globalID;
            [DMLField("SharedBank", DMLType.UBYT)] public byte m_sharedBank;
            [DMLField("SerializedItem", DMLType.STR)] public ByteString m_serializedItem;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_CSRBANKITEMS>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_CSRBANKITEMS>.Read(buf, this);
            }
        }
        public class MSG_CSRBANKITEMSDONE : INetworkMessage
        {
            public const byte c_messageID = 51;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("GlobalID", DMLType.GID)] public GID m_globalID;
            [DMLField("SharedBank", DMLType.UBYT)] public byte m_sharedBank;
            [DMLField("Limit", DMLType.INT)] public int m_limit;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_CSRBANKITEMSDONE>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_CSRBANKITEMSDONE>.Read(buf, this);
            }
        }
        public class MSG_CSREDITCHARACTER : INetworkMessage
        {
            public const byte c_messageID = 52;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("ChunkNum", DMLType.UINT)] public uint m_chunkNum;
            [DMLField("CharacterID", DMLType.GID)] public GID m_characterID;
            [DMLField("UserID", DMLType.GID)] public GID m_userID;
            [DMLField("UserName", DMLType.STR)] public ByteString m_userName;
            [DMLField("CurrentBan", DMLType.STR)] public ByteString m_currentBan;
            [DMLField("CurrentMute", DMLType.STR)] public ByteString m_currentMute;
            [DMLField("AcctAssoc", DMLType.UBYT)] public byte m_acctAssoc;
            [DMLField("Object", DMLType.STR)] public ByteString m_object;
            [DMLField("CurrentQuests", DMLType.STR)] public ByteString m_currentQuests;
            [DMLField("Registry", DMLType.STR)] public ByteString m_registry;
            [DMLField("AccessPasses", DMLType.STR)] public ByteString m_accessPasses;
            [DMLField("BadgeList", DMLType.STR)] public ByteString m_badgeList;
            [DMLField("Edit", DMLType.UBYT)] public byte m_edit;
            [DMLField("AllowedToReport", DMLType.UBYT)] public byte m_allowedToReport;
            [DMLField("DynaMods", DMLType.STR)] public ByteString m_dynaMods;
            [DMLField("CharacterSlots", DMLType.INT)] public int m_characterSlots;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_CSREDITCHARACTER>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_CSREDITCHARACTER>.Read(buf, this);
            }
        }
        public class MSG_CSREDITCHARACTERFAILED : INetworkMessage
        {
            public const byte c_messageID = 53;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("CharacterID", DMLType.GID)] public GID m_characterID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_CSREDITCHARACTERFAILED>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_CSREDITCHARACTERFAILED>.Read(buf, this);
            }
        }
        public class MSG_CSRFINISHEDHOUSE : INetworkMessage
        {
            public const byte c_messageID = 54;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("OldGid", DMLType.GID)] public GID m_oldGid;
            [DMLField("NewGid", DMLType.GID)] public GID m_newGid;
            [DMLField("Character", DMLType.GID)] public GID m_character;
            [DMLField("Error", DMLType.UBYT)] public byte m_error;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_CSRFINISHEDHOUSE>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_CSRFINISHEDHOUSE>.Read(buf, this);
            }
        }
        public class MSG_CSRSEARCHLIST : INetworkMessage
        {
            public const byte c_messageID = 55;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("StartEnd", DMLType.UBYT)] public byte m_startEnd;
            [DMLField("Data", DMLType.STR)] public ByteString m_data;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_CSRSEARCHLIST>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_CSRSEARCHLIST>.Read(buf, this);
            }
        }
        public class MSG_CSR_MAIL_DATA : INetworkMessage
        {
            public const byte c_messageID = 56;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("Data", DMLType.STR)] public ByteString m_data;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_CSR_MAIL_DATA>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_CSR_MAIL_DATA>.Read(buf, this);
            }
        }
        public class MSG_CSR_RECEIVE_GIFTS : INetworkMessage
        {
            public const byte c_messageID = 57;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("Success", DMLType.INT)] public int m_success;
            [DMLField("Data", DMLType.STR)] public ByteString m_data;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_CSR_RECEIVE_GIFTS>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_CSR_RECEIVE_GIFTS>.Read(buf, this);
            }
        }
        public class MSG_DEBUGDELETEALLOBJECTS : INetworkMessage
        {
            public const byte c_messageID = 58;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_DEBUGDELETEALLOBJECTS>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_DEBUGDELETEALLOBJECTS>.Read(buf, this);
            }
        }
        public class MSG_DELETEOBJECT : INetworkMessage
        {
            public const byte c_messageID = 59;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("GameObjectID", DMLType.GID)] public GID m_gameObjectID;
            [DMLField("Data", DMLType.STR)] public ByteString m_data;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_DELETEOBJECT>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_DELETEOBJECT>.Read(buf, this);
            }
        }
        public class MSG_DELETE_GIFT : INetworkMessage
        {
            public const byte c_messageID = 60;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("GiftID", DMLType.STR)] public ByteString m_giftID;
            [DMLField("Success", DMLType.INT)] public int m_success;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_DELETE_GIFT>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_DELETE_GIFT>.Read(buf, this);
            }
        }
        public class MSG_DIRECTEDCHAT : INetworkMessage
        {
            public const byte c_messageID = 61;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("SourceName", DMLType.STR)] public ByteString m_sourceName;
            [DMLField("SourceID", DMLType.GID)] public GID m_sourceID;
            [DMLField("Message", DMLType.WSTR)] public string m_message;
            [DMLField("TargetID", DMLType.GID)] public GID m_targetID;
            [DMLField("Filter", DMLType.UBYT)] public byte m_filter;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_DIRECTEDCHAT>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_DIRECTEDCHAT>.Read(buf, this);
            }
        }
        public class MSG_DIRECTEDCHATBYNAMERESPONSE : INetworkMessage
        {
            public const byte c_messageID = 62;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("TargetID", DMLType.GID)] public GID m_targetID;
            [DMLField("TargetName", DMLType.WSTR)] public string m_targetName;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_DIRECTEDCHATBYNAMERESPONSE>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_DIRECTEDCHATBYNAMERESPONSE>.Read(buf, this);
            }
        }
        public class MSG_DIRECTEDCHATFAIL : INetworkMessage
        {
            public const byte c_messageID = 63;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_DIRECTEDCHATFAIL>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_DIRECTEDCHATFAIL>.Read(buf, this);
            }
        }
        public class MSG_DIRECTEDQUICKCHAT : INetworkMessage
        {
            public const byte c_messageID = 64;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("SourceName", DMLType.STR)] public ByteString m_sourceName;
            [DMLField("SourceID", DMLType.GID)] public GID m_sourceID;
            [DMLField("MessageID", DMLType.UINT)] public uint m_messageID;
            [DMLField("Filter", DMLType.UBYT)] public byte m_filter;
            [DMLField("Flags", DMLType.UINT)] public uint m_flags;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_DIRECTEDQUICKCHAT>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_DIRECTEDQUICKCHAT>.Read(buf, this);
            }
        }
        public class MSG_DIRECTEDQUICKCHATEXT : INetworkMessage
        {
            public const byte c_messageID = 65;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("SourceName", DMLType.STR)] public ByteString m_sourceName;
            [DMLField("SourceID", DMLType.GID)] public GID m_sourceID;
            [DMLField("Message", DMLType.STR)] public ByteString m_message;
            [DMLField("Filter", DMLType.UBYT)] public byte m_filter;
            [DMLField("Flags", DMLType.UINT)] public uint m_flags;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_DIRECTEDQUICKCHATEXT>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_DIRECTEDQUICKCHATEXT>.Read(buf, this);
            }
        }
        public class MSG_DISCONNECT_AFK : INetworkMessage
        {
            public const byte c_messageID = 66;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("Warning", DMLType.BYT)] public sbyte m_warning;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_DISCONNECT_AFK>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_DISCONNECT_AFK>.Read(buf, this);
            }
        }
        public class MSG_DOWNLOADBROWSER : INetworkMessage
        {
            public const byte c_messageID = 67;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_DOWNLOADBROWSER>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_DOWNLOADBROWSER>.Read(buf, this);
            }
        }
        public class MSG_DOWNLOADPACKAGE : INetworkMessage
        {
            public const byte c_messageID = 68;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("Data", DMLType.STR)] public ByteString m_data;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_DOWNLOADPACKAGE>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_DOWNLOADPACKAGE>.Read(buf, this);
            }
        }
        public class MSG_DOWNLOADPACKAGEELEMENT : INetworkMessage
        {
            public const byte c_messageID = 69;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("Data", DMLType.STR)] public ByteString m_data;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_DOWNLOADPACKAGEELEMENT>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_DOWNLOADPACKAGEELEMENT>.Read(buf, this);
            }
        }
        public class MSG_DYNAMODBEHAVIOR_UPDATEMODS : INetworkMessage
        {
            public const byte c_messageID = 70;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("GlobalID", DMLType.GID)] public GID m_globalID;
            [DMLField("UpdateAll", DMLType.BYT)] public sbyte m_updateAll;
            [DMLField("Add", DMLType.BYT)] public sbyte m_add;
            [DMLField("Remove", DMLType.BYT)] public sbyte m_remove;
            [DMLField("AllMods", DMLType.STR)] public ByteString m_allMods;
            [DMLField("NewMod", DMLType.STR)] public ByteString m_newMod;
            [DMLField("Index", DMLType.INT)] public int m_index;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_DYNAMODBEHAVIOR_UPDATEMODS>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_DYNAMODBEHAVIOR_UPDATEMODS>.Read(buf, this);
            }
        }
        public class MSG_DYNAMODDUMP : INetworkMessage
        {
            public const byte c_messageID = 71;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("Data", DMLType.STR)] public ByteString m_data;
            [DMLField("Filename", DMLType.STR)] public ByteString m_filename;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_DYNAMODDUMP>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_DYNAMODDUMP>.Read(buf, this);
            }
        }
        public class MSG_ENTERSTATE : INetworkMessage
        {
            public const byte c_messageID = 72;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("GameObjectID", DMLType.GID)] public GID m_gameObjectID;
            [DMLField("State", DMLType.UINT)] public uint m_state;
            [DMLField("Data", DMLType.STR)] public ByteString m_data;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_ENTERSTATE>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_ENTERSTATE>.Read(buf, this);
            }
        }
        public class MSG_EQUIPITEM : INetworkMessage
        {
            public const byte c_messageID = 73;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("IsEquip", DMLType.INT)] public int m_isEquip;
            [DMLField("ItemID", DMLType.GID)] public GID m_itemID;
            [DMLField("SlotName", DMLType.STR)] public ByteString m_slotName;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_EQUIPITEM>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_EQUIPITEM>.Read(buf, this);
            }
        }
        public class MSG_EQUIPMENTBEHAVIOR_EQUIPITEM : INetworkMessage
        {
            public const byte c_messageID = 74;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("GlobalID", DMLType.GID)] public GID m_globalID;
            [DMLField("SlotName", DMLType.STR)] public ByteString m_slotName;
            [DMLField("IsValid", DMLType.INT)] public int m_isValid;
            [DMLField("SerializedItem", DMLType.STR)] public ByteString m_serializedItem;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_EQUIPMENTBEHAVIOR_EQUIPITEM>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_EQUIPMENTBEHAVIOR_EQUIPITEM>.Read(buf, this);
            }
        }
        public class MSG_EQUIPMENTBEHAVIOR_PUBLICEQUIPITEM : INetworkMessage
        {
            public const byte c_messageID = 75;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("GlobalID", DMLType.GID)] public GID m_globalID;
            [DMLField("SerializedInfo", DMLType.STR)] public ByteString m_serializedInfo;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_EQUIPMENTBEHAVIOR_PUBLICEQUIPITEM>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_EQUIPMENTBEHAVIOR_PUBLICEQUIPITEM>.Read(buf, this);
            }
        }
        public class MSG_EQUIPMENTBEHAVIOR_PUBLICUNEQUIPITEM : INetworkMessage
        {
            public const byte c_messageID = 76;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("GlobalID", DMLType.GID)] public GID m_globalID;
            [DMLField("IndexToRemove", DMLType.UBYT)] public byte m_indexToRemove;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_EQUIPMENTBEHAVIOR_PUBLICUNEQUIPITEM>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_EQUIPMENTBEHAVIOR_PUBLICUNEQUIPITEM>.Read(buf, this);
            }
        }
        public class MSG_EQUIPMENTBEHAVIOR_UNEQUIPITEM : INetworkMessage
        {
            public const byte c_messageID = 77;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("GlobalID", DMLType.GID)] public GID m_globalID;
            [DMLField("ItemID", DMLType.GID)] public GID m_itemID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_EQUIPMENTBEHAVIOR_UNEQUIPITEM>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_EQUIPMENTBEHAVIOR_UNEQUIPITEM>.Read(buf, this);
            }
        }
        public class MSG_FEEDINVENTORYITEM : INetworkMessage
        {
            public const byte c_messageID = 78;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("PetID", DMLType.GID)] public GID m_petID;
            [DMLField("FedObjectID", DMLType.GID)] public GID m_fedObjectID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_FEEDINVENTORYITEM>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_FEEDINVENTORYITEM>.Read(buf, this);
            }
        }
        public class MSG_FIND_SESSIONS : INetworkMessage
        {
            public const byte c_messageID = 79;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_FIND_SESSIONS>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_FIND_SESSIONS>.Read(buf, this);
            }
        }
        public class MSG_FIND_SESSION_PLAYERS : INetworkMessage
        {
            public const byte c_messageID = 80;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("ZoneID", DMLType.GID)] public GID m_zoneID;
            [DMLField("SessionID", DMLType.GID)] public GID m_sessionID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_FIND_SESSION_PLAYERS>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_FIND_SESSION_PLAYERS>.Read(buf, this);
            }
        }
        public class MSG_GENERICGAME : INetworkMessage
        {
            public const byte c_messageID = 81;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("A", DMLType.INT)] public int m_a;
            [DMLField("B", DMLType.INT)] public int m_b;
            [DMLField("X", DMLType.INT)] public int m_x;
            [DMLField("Y", DMLType.INT)] public int m_y;
            [DMLField("Z", DMLType.INT)] public int m_z;
            [DMLField("W", DMLType.INT)] public int m_w;
            [DMLField("Message", DMLType.STR)] public ByteString m_message;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_GENERICGAME>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_GENERICGAME>.Read(buf, this);
            }
        }
        public class MSG_GETLADDER : INetworkMessage
        {
            public const byte c_messageID = 82;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("NameBlob", DMLType.STR)] public ByteString m_nameBlob;
            [DMLField("CharacterID", DMLType.GID)] public GID m_characterID;
            [DMLField("TournamentNameID", DMLType.UINT)] public uint m_tournamentNameID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_GETLADDER>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_GETLADDER>.Read(buf, this);
            }
        }
        public class MSG_GET_RANKINGS : INetworkMessage
        {
            public const byte c_messageID = 83;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("Game", DMLType.STR)] public ByteString m_game;
            [DMLField("RankingCount", DMLType.INT)] public int m_rankingCount;
            [DMLField("Time", DMLType.UINT)] public uint m_time;
            [DMLField("GroupID", DMLType.GID)] public GID m_groupID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_GET_RANKINGS>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_GET_RANKINGS>.Read(buf, this);
            }
        }
        public class MSG_GIFT_REDEEMED : INetworkMessage
        {
            public const byte c_messageID = 84;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("Success", DMLType.INT)] public int m_success;
            [DMLField("GiftID", DMLType.STR)] public ByteString m_giftID;
            [DMLField("GID", DMLType.GID)] public GID m_gID;
            [DMLField("Data", DMLType.STR)] public ByteString m_data;
            [DMLField("TemplateID", DMLType.GID)] public GID m_templateID;
            [DMLField("ErrorCode", DMLType.INT)] public int m_errorCode;
            [DMLField("Quantity", DMLType.INT)] public int m_quantity;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_GIFT_REDEEMED>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_GIFT_REDEEMED>.Read(buf, this);
            }
        }
        public class MSG_GOTOPLAYER : INetworkMessage
        {
            public const byte c_messageID = 85;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("TargetCharacterID", DMLType.GID)] public GID m_targetCharacterID;
            [DMLField("OriginatorID", DMLType.GID)] public GID m_originatorID;
            [DMLField("MustBeFriend", DMLType.UBYT)] public byte m_mustBeFriend;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_GOTOPLAYER>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_GOTOPLAYER>.Read(buf, this);
            }
        }
        public class MSG_GOTOPLAYERRESP : INetworkMessage
        {
            public const byte c_messageID = 86;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("TargetCharacterID", DMLType.GID)] public GID m_targetCharacterID;
            [DMLField("ZoneName", DMLType.STR)] public ByteString m_zoneName;
            [DMLField("ZoneID", DMLType.GID)] public GID m_zoneID;
            [DMLField("OriginatorID", DMLType.GID)] public GID m_originatorID;
            [DMLField("Error", DMLType.UINT)] public uint m_error;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_GOTOPLAYERRESP>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_GOTOPLAYERRESP>.Read(buf, this);
            }
        }
        public class MSG_HARASSMENTREPORT : INetworkMessage
        {
            public const byte c_messageID = 87;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("Count", DMLType.INT)] public int m_count;
            [DMLField("CountToMute", DMLType.INT)] public int m_countToMute;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_HARASSMENTREPORT>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_HARASSMENTREPORT>.Read(buf, this);
            }
        }
        public class MSG_IGNOREADD : INetworkMessage
        {
            public const byte c_messageID = 88;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("ListOwnerGID", DMLType.GID)] public GID m_listOwnerGID;
            [DMLField("CharacterGID", DMLType.GID)] public GID m_characterGID;
            [DMLField("GameObjectGID", DMLType.GID)] public GID m_gameObjectGID;
            [DMLField("CharacterName", DMLType.STR)] public ByteString m_characterName;
            [DMLField("Forwarded", DMLType.UBYT)] public byte m_forwarded;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_IGNOREADD>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_IGNOREADD>.Read(buf, this);
            }
        }
        public class MSG_IGNOREDROP : INetworkMessage
        {
            public const byte c_messageID = 89;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("ListOwnerGID", DMLType.GID)] public GID m_listOwnerGID;
            [DMLField("CharacterGID", DMLType.GID)] public GID m_characterGID;
            [DMLField("GameObjectGID", DMLType.GID)] public GID m_gameObjectGID;
            [DMLField("Forwarded", DMLType.UBYT)] public byte m_forwarded;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_IGNOREDROP>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_IGNOREDROP>.Read(buf, this);
            }
        }
        public class MSG_IGNORELIST : INetworkMessage
        {
            public const byte c_messageID = 90;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("ListOwnerGID", DMLType.GID)] public GID m_listOwnerGID;
            [DMLField("ListData", DMLType.STR)] public ByteString m_listData;
            [DMLField("Add", DMLType.UBYT)] public byte m_add;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_IGNORELIST>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_IGNORELIST>.Read(buf, this);
            }
        }
        public class MSG_INTERACTOBJECT : INetworkMessage
        {
            public const byte c_messageID = 91;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("GlobalID", DMLType.GID)] public GID m_globalID;
            [DMLField("TemplateID", DMLType.GID)] public GID m_templateID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_INTERACTOBJECT>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_INTERACTOBJECT>.Read(buf, this);
            }
        }
        public class MSG_INTERACTOPTION : INetworkMessage
        {
            public const byte c_messageID = 92;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("ObjectID", DMLType.GID)] public GID m_objectID;
            [DMLField("OptionIndex", DMLType.INT)] public int m_optionIndex;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_INTERACTOPTION>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_INTERACTOPTION>.Read(buf, this);
            }
        }
        public class MSG_INVENTORYBEHAVIOR_ADDITEM : INetworkMessage
        {
            public const byte c_messageID = 93;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("GlobalID", DMLType.GID)] public GID m_globalID;
            [DMLField("SerializedItem", DMLType.STR)] public ByteString m_serializedItem;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_INVENTORYBEHAVIOR_ADDITEM>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_INVENTORYBEHAVIOR_ADDITEM>.Read(buf, this);
            }
        }
        public class MSG_INVENTORYBEHAVIOR_REMOVEITEM : INetworkMessage
        {
            public const byte c_messageID = 94;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("GlobalID", DMLType.GID)] public GID m_globalID;
            [DMLField("ItemID", DMLType.GID)] public GID m_itemID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_INVENTORYBEHAVIOR_REMOVEITEM>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_INVENTORYBEHAVIOR_REMOVEITEM>.Read(buf, this);
            }
        }
        public class MSG_INVENTORYBEHAVIOR_TRADEITEM : INetworkMessage
        {
            public const byte c_messageID = 95;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("GlobalID", DMLType.GID)] public GID m_globalID;
            [DMLField("ItemID", DMLType.GID)] public GID m_itemID;
            [DMLField("Trading", DMLType.INT)] public int m_trading;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_INVENTORYBEHAVIOR_TRADEITEM>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_INVENTORYBEHAVIOR_TRADEITEM>.Read(buf, this);
            }
        }
        public class MSG_INVITEFRIEND : INetworkMessage
        {
            public const byte c_messageID = 96;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("PromoID", DMLType.STR)] public ByteString m_promoID;
            [DMLField("YourName", DMLType.WSTR)] public string m_yourName;
            [DMLField("FriendName", DMLType.WSTR)] public string m_friendName;
            [DMLField("FriendEmail", DMLType.STR)] public ByteString m_friendEmail;
            [DMLField("Locale", DMLType.STR)] public ByteString m_locale;
            [DMLField("SendInEnglish", DMLType.UBYT)] public byte m_sendInEnglish;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_INVITEFRIEND>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_INVITEFRIEND>.Read(buf, this);
            }
        }
        public class MSG_INVITE_RESPONSE : INetworkMessage
        {
            public const byte c_messageID = 97;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("Success", DMLType.INT)] public int m_success;
            [DMLField("ErrorDesc", DMLType.STR)] public ByteString m_errorDesc;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_INVITE_RESPONSE>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_INVITE_RESPONSE>.Read(buf, this);
            }
        }
        public class MSG_JOINCHANNELRESPONSE : INetworkMessage
        {
            public const byte c_messageID = 98;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("SourceID", DMLType.GID)] public GID m_sourceID;
            [DMLField("ParentID", DMLType.GID)] public GID m_parentID;
            [DMLField("ChannelID", DMLType.GID)] public GID m_channelID;
            [DMLField("ChannelName", DMLType.WSTR)] public string m_channelName;
            [DMLField("ErrorCode", DMLType.UBYT)] public byte m_errorCode;
            [DMLField("ChannelType", DMLType.UBYT)] public byte m_channelType;
            [DMLField("RecipientID", DMLType.GID)] public GID m_recipientID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_JOINCHANNELRESPONSE>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_JOINCHANNELRESPONSE>.Read(buf, this);
            }
        }
        public class MSG_JOIN_SESSION : INetworkMessage
        {
            public const byte c_messageID = 99;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("ZoneID", DMLType.GID)] public GID m_zoneID;
            [DMLField("SessionID", DMLType.GID)] public GID m_sessionID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_JOIN_SESSION>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_JOIN_SESSION>.Read(buf, this);
            }
        }
        public class MSG_JUMP : INetworkMessage
        {
            public const byte c_messageID = 100;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("ExcludeOriginator", DMLType.UBYT)] public byte m_excludeOriginator;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_JUMP>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_JUMP>.Read(buf, this);
            }
        }
        public class MSG_KILL_CLIENT_PROCESS : INetworkMessage
        {
            public const byte c_messageID = 101;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("JobID", DMLType.UINT)] public uint m_jobID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_KILL_CLIENT_PROCESS>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_KILL_CLIENT_PROCESS>.Read(buf, this);
            }
        }
        public class MSG_LADDER : INetworkMessage
        {
            public const byte c_messageID = 102;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("CharacterID", DMLType.GID)] public GID m_characterID;
            [DMLField("LadderData", DMLType.STR)] public ByteString m_ladderData;
            [DMLField("TourneyCredits", DMLType.UINT)] public uint m_tourneyCredits;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_LADDER>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_LADDER>.Read(buf, this);
            }
        }
        public class MSG_LEAVECHANNELRESPONSE : INetworkMessage
        {
            public const byte c_messageID = 103;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("SourceID", DMLType.GID)] public GID m_sourceID;
            [DMLField("ParentID", DMLType.GID)] public GID m_parentID;
            [DMLField("ChannelID", DMLType.GID)] public GID m_channelID;
            [DMLField("ChannelName", DMLType.WSTR)] public string m_channelName;
            [DMLField("ChannelType", DMLType.UBYT)] public byte m_channelType;
            [DMLField("ErrorCode", DMLType.UBYT)] public byte m_errorCode;
            [DMLField("RecipientID", DMLType.GID)] public GID m_recipientID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_LEAVECHANNELRESPONSE>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_LEAVECHANNELRESPONSE>.Read(buf, this);
            }
        }
        public class MSG_LEAVEHOUSINGLOT : INetworkMessage
        {
            public const byte c_messageID = 104;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_LEAVEHOUSINGLOT>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_LEAVEHOUSINGLOT>.Read(buf, this);
            }
        }
        public class MSG_LEAVESERVICERANGE : INetworkMessage
        {
            public const byte c_messageID = 105;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("MobileID", DMLType.GID)] public GID m_mobileID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_LEAVESERVICERANGE>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_LEAVESERVICERANGE>.Read(buf, this);
            }
        }
        public class MSG_LEAVESTATE : INetworkMessage
        {
            public const byte c_messageID = 106;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("GameObjectID", DMLType.GID)] public GID m_gameObjectID;
            [DMLField("State", DMLType.UINT)] public uint m_state;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_LEAVESTATE>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_LEAVESTATE>.Read(buf, this);
            }
        }
        public class MSG_LOADSAVEOBJECTS : INetworkMessage
        {
            public const byte c_messageID = 107;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("Filename", DMLType.STR)] public ByteString m_filename;
            [DMLField("Save", DMLType.UBYT)] public byte m_save;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_LOADSAVEOBJECTS>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_LOADSAVEOBJECTS>.Read(buf, this);
            }
        }
        public class MSG_LOGINCOMPLETE : INetworkMessage
        {
            public const byte c_messageID = 108;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("ZoneName", DMLType.STR)] public ByteString m_zoneName;
            [DMLField("Data", DMLType.STR)] public ByteString m_data;
            [DMLField("ServerTime", DMLType.UINT)] public uint m_serverTime;
            [DMLField("ZoneID", DMLType.GID)] public GID m_zoneID;
            [DMLField("DynamicZoneID", DMLType.UINT)] public uint m_dynamicZoneID;
            [DMLField("DynamicServerProcID", DMLType.UINT)] public uint m_dynamicServerProcID;
            [DMLField("Permissions", DMLType.UINT)] public uint m_permissions;
            [DMLField("IsCSR", DMLType.INT)] public int m_isCSR;
            [DMLField("ZoneServer", DMLType.STR)] public ByteString m_zoneServer;
            [DMLField("TestServer", DMLType.UBYT)] public byte m_testServer;
            [DMLField("AltMusicFile", DMLType.UINT)] public uint m_altMusicFile;
            [DMLField("ShowSubscriberIcon", DMLType.UBYT)] public byte m_showSubscriberIcon;
            [DMLField("SubscriberCrownsPricePercent", DMLType.INT)] public int m_subscriberCrownsPricePercent;
            [DMLField("UseFriendFinder", DMLType.INT)] public int m_useFriendFinder;
            [DMLField("RealmName", DMLType.STR)] public ByteString m_realmName;
            [DMLField("IsBossMarkZone", DMLType.UBYT)] public byte m_isBossMarkZone;
            [DMLField("CriticalObjects", DMLType.STR)] public ByteString m_criticalObjects;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_LOGINCOMPLETE>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_LOGINCOMPLETE>.Read(buf, this);
            }
        }
        public class MSG_MAIL_DATA : INetworkMessage
        {
            public const byte c_messageID = 109;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("Data", DMLType.STR)] public ByteString m_data;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_MAIL_DATA>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_MAIL_DATA>.Read(buf, this);
            }
        }
        public class MSG_MARK_LOCATION : INetworkMessage
        {
            public const byte c_messageID = 110;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_MARK_LOCATION>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_MARK_LOCATION>.Read(buf, this);
            }
        }
        public class MSG_MARK_LOCATION_RESPONSE : INetworkMessage
        {
            public const byte c_messageID = 111;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("Result", DMLType.BYT)] public sbyte m_result;
            [DMLField("ZoneName", DMLType.STR)] public ByteString m_zoneName;
            [DMLField("ZoneDisplayNameId", DMLType.STR)] public ByteString m_zoneDisplayNameId;
            [DMLField("ZoneType", DMLType.BYT)] public sbyte m_zoneType;
            [DMLField("InstanceId", DMLType.GID)] public GID m_instanceId;
            [DMLField("LocationX", DMLType.FLT)] public float m_locationX;
            [DMLField("LocationY", DMLType.FLT)] public float m_locationY;
            [DMLField("LocationZ", DMLType.FLT)] public float m_locationZ;
            [DMLField("Direction", DMLType.FLT)] public float m_direction;
            [DMLField("CommonsZoneId", DMLType.STR)] public ByteString m_commonsZoneId;
            [DMLField("MarkType", DMLType.STR)] public ByteString m_markType;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_MARK_LOCATION_RESPONSE>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_MARK_LOCATION_RESPONSE>.Read(buf, this);
            }
        }
        public class MSG_MATCHAWARD : INetworkMessage
        {
            public const byte c_messageID = 112;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("CharacterID", DMLType.GID)] public GID m_characterID;
            [DMLField("AwardData", DMLType.STR)] public ByteString m_awardData;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_MATCHAWARD>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_MATCHAWARD>.Read(buf, this);
            }
        }
        public class MSG_MATCHINVITE : INetworkMessage
        {
            public const byte c_messageID = 113;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("CharacterID", DMLType.GID)] public GID m_characterID;
            [DMLField("TournamentNameID", DMLType.UINT)] public uint m_tournamentNameID;
            [DMLField("MatchActor", DMLType.STR)] public ByteString m_matchActor;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_MATCHINVITE>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_MATCHINVITE>.Read(buf, this);
            }
        }
        public class MSG_MATCHMAKERUPDATE : INetworkMessage
        {
            public const byte c_messageID = 114;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("CharacterID", DMLType.GID)] public GID m_characterID;
            [DMLField("MatchTeam", DMLType.STR)] public ByteString m_matchTeam;
            [DMLField("MatchActor", DMLType.STR)] public ByteString m_matchActor;
            [DMLField("BracketInfo", DMLType.STR)] public ByteString m_bracketInfo;
            [DMLField("RegistrationInfo", DMLType.STR)] public ByteString m_registrationInfo;
            [DMLField("UpdateMessage", DMLType.STR)] public ByteString m_updateMessage;
            [DMLField("Status", DMLType.UBYT)] public byte m_status;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_MATCHMAKERUPDATE>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_MATCHMAKERUPDATE>.Read(buf, this);
            }
        }
        public class MSG_MATCHREADY : INetworkMessage
        {
            public const byte c_messageID = 115;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("CharacterID", DMLType.GID)] public GID m_characterID;
            [DMLField("ZoneID", DMLType.GID)] public GID m_zoneID;
            [DMLField("ZoneName", DMLType.STR)] public ByteString m_zoneName;
            [DMLField("TournamentNameID", DMLType.UINT)] public uint m_tournamentNameID;
            [DMLField("MatchActor", DMLType.STR)] public ByteString m_matchActor;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_MATCHREADY>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_MATCHREADY>.Read(buf, this);
            }
        }
        public class MSG_MATCHRESULT : INetworkMessage
        {
            public const byte c_messageID = 116;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("CharacterID", DMLType.GID)] public GID m_characterID;
            [DMLField("ResultData", DMLType.STR)] public ByteString m_resultData;
            [DMLField("AwardData", DMLType.STR)] public ByteString m_awardData;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_MATCHRESULT>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_MATCHRESULT>.Read(buf, this);
            }
        }
        public class MSG_MESSAGE_PROCESS : INetworkMessage
        {
            public const byte c_messageID = 117;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("JobID", DMLType.UINT)] public uint m_jobID;
            [DMLField("Message", DMLType.STR)] public ByteString m_message;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_MESSAGE_PROCESS>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_MESSAGE_PROCESS>.Read(buf, this);
            }
        }
        public class MSG_MOVECORRECTION : INetworkMessage
        {
            public const byte c_messageID = 118;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("LocationX", DMLType.FLT)] public float m_locationX;
            [DMLField("LocationY", DMLType.FLT)] public float m_locationY;
            [DMLField("LocationZ", DMLType.FLT)] public float m_locationZ;
            [DMLField("Direction", DMLType.FLT)] public float m_direction;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_MOVECORRECTION>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_MOVECORRECTION>.Read(buf, this);
            }
        }
        public class MSG_MOVESTATE : INetworkMessage
        {
            public const byte c_messageID = 119;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("GlobalID", DMLType.GID)] public GID m_globalID;
            [DMLField("NewState", DMLType.BYT)] public sbyte m_newState;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_MOVESTATE>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_MOVESTATE>.Read(buf, this);
            }
        }
        public class MSG_MUTE : INetworkMessage
        {
            public const byte c_messageID = 120;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("MuteTime", DMLType.STR)] public ByteString m_muteTime;
            [DMLField("ForceMessage", DMLType.UBYT)] public byte m_forceMessage;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_MUTE>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_MUTE>.Read(buf, this);
            }
        }
        public class MSG_MUTE_RSP : INetworkMessage
        {
            public const byte c_messageID = 121;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("MutedID", DMLType.STR)] public ByteString m_mutedID;
            [DMLField("MuteTime", DMLType.STR)] public ByteString m_muteTime;
            [DMLField("MuteType", DMLType.STR)] public ByteString m_muteType;
            [DMLField("Success", DMLType.UBYT)] public byte m_success;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_MUTE_RSP>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_MUTE_RSP>.Read(buf, this);
            }
        }
        public class MSG_NEWOBJECT : INetworkMessage
        {
            public const byte c_messageID = 122;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("Data", DMLType.STR)] public ByteString m_data;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_NEWOBJECT>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_NEWOBJECT>.Read(buf, this);
            }
        }
        public class MSG_NEWSYSSTATS : INetworkMessage
        {
            public const byte c_messageID = 123;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("CpuUsage", DMLType.INT)] public int m_cpuUsage;
            [DMLField("VMemUsed", DMLType.INT)] public int m_vMemUsed;
            [DMLField("RMemUsed", DMLType.INT)] public int m_rMemUsed;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_NEWSYSSTATS>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_NEWSYSSTATS>.Read(buf, this);
            }
        }
        public class MSG_NEWTICKCNT : INetworkMessage
        {
            public const byte c_messageID = 124;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("TickCnt", DMLType.INT)] public int m_tickCnt;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_NEWTICKCNT>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_NEWTICKCNT>.Read(buf, this);
            }
        }
        public class MSG_NEWTOURNEYREWARDS : INetworkMessage
        {
            public const byte c_messageID = 125;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("Data", DMLType.STR)] public ByteString m_data;
            [DMLField("BracketID", DMLType.GID)] public GID m_bracketID;
            [DMLField("TourneyNameSTKey", DMLType.STR)] public ByteString m_tourneyNameSTKey;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_NEWTOURNEYREWARDS>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_NEWTOURNEYREWARDS>.Read(buf, this);
            }
        }
        public class MSG_NEW_MAIL : INetworkMessage
        {
            public const byte c_messageID = 126;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("CharacterID", DMLType.GID)] public GID m_characterID;
            [DMLField("MailType", DMLType.INT)] public int m_mailType;
            [DMLField("AccountMail", DMLType.UBYT)] public byte m_accountMail;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_NEW_MAIL>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_NEW_MAIL>.Read(buf, this);
            }
        }
        public class MSG_NOTIFYCHANNELINSTANCE : INetworkMessage
        {
            public const byte c_messageID = 127;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("RecipientID", DMLType.GID)] public GID m_recipientID;
            [DMLField("ParentID", DMLType.GID)] public GID m_parentID;
            [DMLField("ID", DMLType.GID)] public GID m_iD;
            [DMLField("Name", DMLType.WSTR)] public string m_name;
            [DMLField("Create", DMLType.UBYT)] public byte m_create;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_NOTIFYCHANNELINSTANCE>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_NOTIFYCHANNELINSTANCE>.Read(buf, this);
            }
        }
        public class MSG_NOTIFY_GIFT : INetworkMessage
        {
            public const byte c_messageID = 128;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("Gift", DMLType.INT)] public int m_gift;
            [DMLField("CrownsRewards", DMLType.INT)] public int m_crownsRewards;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_NOTIFY_GIFT>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_NOTIFY_GIFT>.Read(buf, this);
            }
        }
        public class MSG_NOTMUTED : INetworkMessage
        {
            public const byte c_messageID = 129;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_NOTMUTED>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_NOTMUTED>.Read(buf, this);
            }
        }
        public class MSG_NOT_AFK : INetworkMessage
        {
            public const byte c_messageID = 130;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_NOT_AFK>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_NOT_AFK>.Read(buf, this);
            }
        }
        public class MSG_NPCSPEECH : INetworkMessage
        {
            public const byte c_messageID = 131;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("SourceName", DMLType.STR)] public ByteString m_sourceName;
            [DMLField("SourceID", DMLType.GID)] public GID m_sourceID;
            [DMLField("TargetName", DMLType.STR)] public ByteString m_targetName;
            [DMLField("TargetID", DMLType.GID)] public GID m_targetID;
            [DMLField("Talk", DMLType.STR)] public ByteString m_talk;
            [DMLField("Sound", DMLType.STR)] public ByteString m_sound;
            [DMLField("WidthOverride", DMLType.INT)] public int m_widthOverride;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_NPCSPEECH>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_NPCSPEECH>.Read(buf, this);
            }
        }
        public class MSG_OBJECT_INFO_QUERY : INetworkMessage
        {
            public const byte c_messageID = 132;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("Info", DMLType.STR)] public ByteString m_info;
            [DMLField("Part", DMLType.INT)] public int m_part;
            [DMLField("Total", DMLType.INT)] public int m_total;
            [DMLField("Size", DMLType.INT)] public int m_size;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_OBJECT_INFO_QUERY>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_OBJECT_INFO_QUERY>.Read(buf, this);
            }
        }
        public class MSG_PARTYDISBAND : INetworkMessage
        {
            public const byte c_messageID = 133;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("DestinationCharacterID", DMLType.GID)] public GID m_destinationCharacterID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PARTYDISBAND>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PARTYDISBAND>.Read(buf, this);
            }
        }
        public class MSG_PARTYJOINFAILED : INetworkMessage
        {
            public const byte c_messageID = 134;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("DestinationCharacterID", DMLType.GID)] public GID m_destinationCharacterID;
            [DMLField("ErrorCode", DMLType.INT)] public int m_errorCode;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PARTYJOINFAILED>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PARTYJOINFAILED>.Read(buf, this);
            }
        }
        public class MSG_PARTYJOINNOTIFICATION : INetworkMessage
        {
            public const byte c_messageID = 135;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("DestinationCharacterID", DMLType.GID)] public GID m_destinationCharacterID;
            [DMLField("ChannelID", DMLType.GID)] public GID m_channelID;
            [DMLField("PartyID", DMLType.GID)] public GID m_partyID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PARTYJOINNOTIFICATION>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PARTYJOINNOTIFICATION>.Read(buf, this);
            }
        }
        public class MSG_PARTYLEAVE : INetworkMessage
        {
            public const byte c_messageID = 136;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("SourceCharacterID", DMLType.GID)] public GID m_sourceCharacterID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PARTYLEAVE>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PARTYLEAVE>.Read(buf, this);
            }
        }
        public class MSG_PARTYLEAVENOTIFICATION : INetworkMessage
        {
            public const byte c_messageID = 137;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("DestinationCharacterID", DMLType.GID)] public GID m_destinationCharacterID;
            [DMLField("CharacterID", DMLType.GID)] public GID m_characterID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PARTYLEAVENOTIFICATION>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PARTYLEAVENOTIFICATION>.Read(buf, this);
            }
        }
        public class MSG_PARTYLEVELUP : INetworkMessage
        {
            public const byte c_messageID = 138;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("CharacterID", DMLType.GID)] public GID m_characterID;
            [DMLField("NewLevel", DMLType.INT)] public int m_newLevel;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PARTYLEVELUP>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PARTYLEVELUP>.Read(buf, this);
            }
        }
        public class MSG_PARTYLEVELUPUPDATE : INetworkMessage
        {
            public const byte c_messageID = 139;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("DestinationCharacterID", DMLType.GID)] public GID m_destinationCharacterID;
            [DMLField("CharacterID", DMLType.GID)] public GID m_characterID;
            [DMLField("NewLevel", DMLType.INT)] public int m_newLevel;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PARTYLEVELUPUPDATE>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PARTYLEVELUPUPDATE>.Read(buf, this);
            }
        }
        public class MSG_PARTYMULTIPLAYERMOUNTEQUIP : INetworkMessage
        {
            public const byte c_messageID = 140;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("SourceCharacterID", DMLType.GID)] public GID m_sourceCharacterID;
            [DMLField("MountTemplateID", DMLType.GID)] public GID m_mountTemplateID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PARTYMULTIPLAYERMOUNTEQUIP>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PARTYMULTIPLAYERMOUNTEQUIP>.Read(buf, this);
            }
        }
        public class MSG_PARTYMULTIPLAYERMOUNTEQUIPUPDATE : INetworkMessage
        {
            public const byte c_messageID = 141;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("DestinationCharacterID", DMLType.GID)] public GID m_destinationCharacterID;
            [DMLField("SourceCharacterID", DMLType.GID)] public GID m_sourceCharacterID;
            [DMLField("MountTemplateID", DMLType.GID)] public GID m_mountTemplateID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PARTYMULTIPLAYERMOUNTEQUIPUPDATE>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PARTYMULTIPLAYERMOUNTEQUIPUPDATE>.Read(buf, this);
            }
        }
        public class MSG_PARTYMULTIPLAYERMOUNTJOIN : INetworkMessage
        {
            public const byte c_messageID = 142;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("SourceCharacterID", DMLType.GID)] public GID m_sourceCharacterID;
            [DMLField("MountOwnerCharacterID", DMLType.GID)] public GID m_mountOwnerCharacterID;
            [DMLField("MountTemplateID", DMLType.GID)] public GID m_mountTemplateID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PARTYMULTIPLAYERMOUNTJOIN>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PARTYMULTIPLAYERMOUNTJOIN>.Read(buf, this);
            }
        }
        public class MSG_PARTYMULTIPLAYERMOUNTJOINUPDATE : INetworkMessage
        {
            public const byte c_messageID = 143;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("DestinationCharacterID", DMLType.GID)] public GID m_destinationCharacterID;
            [DMLField("SourceCharacterID", DMLType.GID)] public GID m_sourceCharacterID;
            [DMLField("MountOwnerCharacterID", DMLType.GID)] public GID m_mountOwnerCharacterID;
            [DMLField("MountTemplateID", DMLType.GID)] public GID m_mountTemplateID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PARTYMULTIPLAYERMOUNTJOINUPDATE>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PARTYMULTIPLAYERMOUNTJOINUPDATE>.Read(buf, this);
            }
        }
        public class MSG_PARTYREQUESTACCEPT : INetworkMessage
        {
            public const byte c_messageID = 144;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("SourceCharacterID", DMLType.GID)] public GID m_sourceCharacterID;
            [DMLField("PartyID", DMLType.GID)] public GID m_partyID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PARTYREQUESTACCEPT>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PARTYREQUESTACCEPT>.Read(buf, this);
            }
        }
        public class MSG_PARTYREQUESTDECLINE : INetworkMessage
        {
            public const byte c_messageID = 145;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("SourceCharacterID", DMLType.GID)] public GID m_sourceCharacterID;
            [DMLField("PartyID", DMLType.GID)] public GID m_partyID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PARTYREQUESTDECLINE>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PARTYREQUESTDECLINE>.Read(buf, this);
            }
        }
        public class MSG_PARTYREQUESTINVITE : INetworkMessage
        {
            public const byte c_messageID = 146;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("SourceCharacterID", DMLType.GID)] public GID m_sourceCharacterID;
            [DMLField("SourceGlobalID", DMLType.GID)] public GID m_sourceGlobalID;
            [DMLField("TargetCharacterID", DMLType.GID)] public GID m_targetCharacterID;
            [DMLField("TargetGlobalID", DMLType.GID)] public GID m_targetGlobalID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PARTYREQUESTINVITE>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PARTYREQUESTINVITE>.Read(buf, this);
            }
        }
        public class MSG_PARTYREQUESTJOIN : INetworkMessage
        {
            public const byte c_messageID = 147;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("DestinationCharacterID", DMLType.GID)] public GID m_destinationCharacterID;
            [DMLField("CharacterID", DMLType.GID)] public GID m_characterID;
            [DMLField("GlobalID", DMLType.GID)] public GID m_globalID;
            [DMLField("PlayerNameBlob", DMLType.STR)] public ByteString m_playerNameBlob;
            [DMLField("PartyID", DMLType.GID)] public GID m_partyID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PARTYREQUESTJOIN>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PARTYREQUESTJOIN>.Read(buf, this);
            }
        }
        public class MSG_PARTYREQUESTMEMBERZONES : INetworkMessage
        {
            public const byte c_messageID = 148;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("PartyID", DMLType.GID)] public GID m_partyID;
            [DMLField("SourceCharacterID", DMLType.GID)] public GID m_sourceCharacterID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PARTYREQUESTMEMBERZONES>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PARTYREQUESTMEMBERZONES>.Read(buf, this);
            }
        }
        public class MSG_PARTYREQUESTRESPONSE : INetworkMessage
        {
            public const byte c_messageID = 149;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("DestinationCharacterID", DMLType.GID)] public GID m_destinationCharacterID;
            [DMLField("TargetCharacterID", DMLType.GID)] public GID m_targetCharacterID;
            [DMLField("TargetGlobalID", DMLType.GID)] public GID m_targetGlobalID;
            [DMLField("ErrorCode", DMLType.INT)] public int m_errorCode;
            [DMLField("PlayerNameBlob", DMLType.STR)] public ByteString m_playerNameBlob;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PARTYREQUESTRESPONSE>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PARTYREQUESTRESPONSE>.Read(buf, this);
            }
        }
        public class MSG_PARTYREQUESTTIMEOUT : INetworkMessage
        {
            public const byte c_messageID = 150;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("DestinationCharacterID", DMLType.GID)] public GID m_destinationCharacterID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PARTYREQUESTTIMEOUT>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PARTYREQUESTTIMEOUT>.Read(buf, this);
            }
        }
        public class MSG_PARTYSUBMITMEMBERZONES : INetworkMessage
        {
            public const byte c_messageID = 151;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("PartyMemberZones", DMLType.STR)] public ByteString m_partyMemberZones;
            [DMLField("DestinationCharacterID", DMLType.GID)] public GID m_destinationCharacterID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PARTYSUBMITMEMBERZONES>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PARTYSUBMITMEMBERZONES>.Read(buf, this);
            }
        }
        public class MSG_PARTYUPDATE : INetworkMessage
        {
            public const byte c_messageID = 152;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("DestinationCharacterID", DMLType.GID)] public GID m_destinationCharacterID;
            [DMLField("PlayerNameBlob", DMLType.STR)] public ByteString m_playerNameBlob;
            [DMLField("CharacterID", DMLType.GID)] public GID m_characterID;
            [DMLField("GlobalID", DMLType.GID)] public GID m_globalID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PARTYUPDATE>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PARTYUPDATE>.Read(buf, this);
            }
        }
        public class MSG_PARTYZONEREQUEST : INetworkMessage
        {
            public const byte c_messageID = 153;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("CharacterID", DMLType.GID)] public GID m_characterID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PARTYZONEREQUEST>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PARTYZONEREQUEST>.Read(buf, this);
            }
        }
        public class MSG_PARTYZONEREQUESTRESPONSE : INetworkMessage
        {
            public const byte c_messageID = 154;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("CharacterID", DMLType.GID)] public GID m_characterID;
            [DMLField("PartyID", DMLType.GID)] public GID m_partyID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PARTYZONEREQUESTRESPONSE>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PARTYZONEREQUESTRESPONSE>.Read(buf, this);
            }
        }
        public class MSG_PICKUPOBJECT : INetworkMessage
        {
            public const byte c_messageID = 155;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("GameObjectID", DMLType.GID)] public GID m_gameObjectID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PICKUPOBJECT>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PICKUPOBJECT>.Read(buf, this);
            }
        }
        public class MSG_PLACEOBJECT : INetworkMessage
        {
            public const byte c_messageID = 156;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("GlobalID", DMLType.GID)] public GID m_globalID;
            [DMLField("TemplateID", DMLType.GID)] public GID m_templateID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PLACEOBJECT>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PLACEOBJECT>.Read(buf, this);
            }
        }
        public class MSG_PLAYCINEMATIC : INetworkMessage
        {
            public const byte c_messageID = 157;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("CinematicID", DMLType.GID)] public GID m_cinematicID;
            [DMLField("TargetID", DMLType.GID)] public GID m_targetID;
            [DMLField("Start_X", DMLType.FLT)] public float m_start_X;
            [DMLField("Start_Y", DMLType.FLT)] public float m_start_Y;
            [DMLField("Start_Z", DMLType.FLT)] public float m_start_Z;
            [DMLField("End_X", DMLType.FLT)] public float m_end_X;
            [DMLField("End_Y", DMLType.FLT)] public float m_end_Y;
            [DMLField("End_Z", DMLType.FLT)] public float m_end_Z;
            [DMLField("Asset", DMLType.STR)] public ByteString m_asset;
            [DMLField("DisableInteraction", DMLType.UBYT)] public byte m_disableInteraction;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PLAYCINEMATIC>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PLAYCINEMATIC>.Read(buf, this);
            }
        }
        public class MSG_PLAYERBLACKBALLEDALERT : INetworkMessage
        {
            public const byte c_messageID = 158;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("CharacterID", DMLType.GID)] public GID m_characterID;
            [DMLField("Muted", DMLType.BYT)] public sbyte m_muted;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PLAYERBLACKBALLEDALERT>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PLAYERBLACKBALLEDALERT>.Read(buf, this);
            }
        }
        public class MSG_PLAYERREADYACK : INetworkMessage
        {
            public const byte c_messageID = 159;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("CharacterID", DMLType.GID)] public GID m_characterID;
            [DMLField("TournamentNameID", DMLType.UINT)] public uint m_tournamentNameID;
            [DMLField("MatchNameID", DMLType.UINT)] public uint m_matchNameID;
            [DMLField("BracketID", DMLType.GID)] public GID m_bracketID;
            [DMLField("Online", DMLType.UBYT)] public byte m_online;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PLAYERREADYACK>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PLAYERREADYACK>.Read(buf, this);
            }
        }
        public class MSG_PLAYSOUND : INetworkMessage
        {
            public const byte c_messageID = 160;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("SoundID", DMLType.GID)] public GID m_soundID;
            [DMLField("ReinteractTime", DMLType.FLT)] public float m_reinteractTime;
            [DMLField("SoundFilename", DMLType.STR)] public ByteString m_soundFilename;
            [DMLField("StartDelay", DMLType.FLT)] public float m_startDelay;
            [DMLField("PlayAtMusicVolume", DMLType.UBYT)] public byte m_playAtMusicVolume;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PLAYSOUND>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PLAYSOUND>.Read(buf, this);
            }
        }
        public class MSG_POSTZONEEVENTFROMCLIENT : INetworkMessage
        {
            public const byte c_messageID = 161;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("EventName", DMLType.STR)] public ByteString m_eventName;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_POSTZONEEVENTFROMCLIENT>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_POSTZONEEVENTFROMCLIENT>.Read(buf, this);
            }
        }
        public class MSG_PREVIEW_ISLAND : INetworkMessage
        {
            public const byte c_messageID = 162;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("PreviewWorldZone", DMLType.STR)] public ByteString m_previewWorldZone;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PREVIEW_ISLAND>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PREVIEW_ISLAND>.Read(buf, this);
            }
        }
        public class MSG_PVPUPDATEINFO : INetworkMessage
        {
            public const byte c_messageID = 163;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("TournamentInfo", DMLType.STR)] public ByteString m_tournamentInfo;
            [DMLField("CharacterID", DMLType.GID)] public GID m_characterID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PVPUPDATEINFO>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PVPUPDATEINFO>.Read(buf, this);
            }
        }
        public class MSG_QUERY_LOGOUT : INetworkMessage
        {
            public const byte c_messageID = 164;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("IsInstance", DMLType.UBYT)] public byte m_isInstance;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_QUERY_LOGOUT>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_QUERY_LOGOUT>.Read(buf, this);
            }
        }
        public class MSG_RADIALCHAT : INetworkMessage
        {
            public const byte c_messageID = 165;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("SourceName", DMLType.STR)] public ByteString m_sourceName;
            [DMLField("SourceID", DMLType.GID)] public GID m_sourceID;
            [DMLField("Message", DMLType.STR)] public ByteString m_message;
            [DMLField("Filter", DMLType.UBYT)] public byte m_filter;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_RADIALCHAT>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_RADIALCHAT>.Read(buf, this);
            }
        }
        public class MSG_RADIALQUICKCHAT : INetworkMessage
        {
            public const byte c_messageID = 166;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("SourceName", DMLType.STR)] public ByteString m_sourceName;
            [DMLField("SourceID", DMLType.GID)] public GID m_sourceID;
            [DMLField("MessageID", DMLType.UINT)] public uint m_messageID;
            [DMLField("Filter", DMLType.UBYT)] public byte m_filter;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_RADIALQUICKCHAT>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_RADIALQUICKCHAT>.Read(buf, this);
            }
        }
        public class MSG_RADIALQUICKCHATEXT : INetworkMessage
        {
            public const byte c_messageID = 167;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("SourceName", DMLType.STR)] public ByteString m_sourceName;
            [DMLField("SourceID", DMLType.GID)] public GID m_sourceID;
            [DMLField("Message", DMLType.STR)] public ByteString m_message;
            [DMLField("Filter", DMLType.UBYT)] public byte m_filter;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_RADIALQUICKCHATEXT>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_RADIALQUICKCHATEXT>.Read(buf, this);
            }
        }
        public class MSG_RADIALZONECLUSTERQUICKCHAT : INetworkMessage
        {
            public const byte c_messageID = 168;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("SourceName", DMLType.STR)] public ByteString m_sourceName;
            [DMLField("SourceID", DMLType.GID)] public GID m_sourceID;
            [DMLField("MessageID", DMLType.UINT)] public uint m_messageID;
            [DMLField("Filter", DMLType.UBYT)] public byte m_filter;
            [DMLField("IsOwner", DMLType.UBYT)] public byte m_isOwner;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_RADIALZONECLUSTERQUICKCHAT>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_RADIALZONECLUSTERQUICKCHAT>.Read(buf, this);
            }
        }
        public class MSG_RANKING : INetworkMessage
        {
            public const byte c_messageID = 169;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("GameID", DMLType.UINT)] public uint m_gameID;
            [DMLField("Name", DMLType.STR)] public ByteString m_name;
            [DMLField("CharacterID", DMLType.GID)] public GID m_characterID;
            [DMLField("Score", DMLType.INT)] public int m_score;
            [DMLField("Rank", DMLType.INT)] public int m_rank;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_RANKING>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_RANKING>.Read(buf, this);
            }
        }
        public class MSG_REALM_INFO_QUERY : INetworkMessage
        {
            public const byte c_messageID = 170;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("RealmInfoList", DMLType.STR)] public ByteString m_realmInfoList;
            [DMLField("CurrentRealm", DMLType.STR)] public ByteString m_currentRealm;
            [DMLField("InstanceInfoList", DMLType.STR)] public ByteString m_instanceInfoList;
            [DMLField("CurrentZone", DMLType.STR)] public ByteString m_currentZone;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_REALM_INFO_QUERY>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_REALM_INFO_QUERY>.Read(buf, this);
            }
        }
        public class MSG_RECALL_LOCATION : INetworkMessage
        {
            public const byte c_messageID = 171;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_RECALL_LOCATION>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_RECALL_LOCATION>.Read(buf, this);
            }
        }
        public class MSG_RECEIVE_GIFTS : INetworkMessage
        {
            public const byte c_messageID = 172;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("Success", DMLType.INT)] public int m_success;
            [DMLField("Data", DMLType.STR)] public ByteString m_data;
            [DMLField("CrownsRewards", DMLType.INT)] public int m_crownsRewards;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_RECEIVE_GIFTS>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_RECEIVE_GIFTS>.Read(buf, this);
            }
        }
        public class MSG_RECEIVE_PROMOTIONS : INetworkMessage
        {
            public const byte c_messageID = 173;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("Success", DMLType.INT)] public int m_success;
            [DMLField("Data", DMLType.STR)] public ByteString m_data;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_RECEIVE_PROMOTIONS>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_RECEIVE_PROMOTIONS>.Read(buf, this);
            }
        }
        public class MSG_REDEEM_GIFT : INetworkMessage
        {
            public const byte c_messageID = 174;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("GiftID", DMLType.STR)] public ByteString m_giftID;
            [DMLField("BundleChoiceID", DMLType.GID)] public GID m_bundleChoiceID;
            [DMLField("PrimaryColorIndex", DMLType.INT)] public int m_primaryColorIndex;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_REDEEM_GIFT>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_REDEEM_GIFT>.Read(buf, this);
            }
        }
        public class MSG_REDEEM_MAIL_GIFT : INetworkMessage
        {
            public const byte c_messageID = 175;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("MailId", DMLType.GID)] public GID m_mailId;
            [DMLField("PrimaryColorIndex", DMLType.INT)] public int m_primaryColorIndex;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_REDEEM_MAIL_GIFT>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_REDEEM_MAIL_GIFT>.Read(buf, this);
            }
        }
        public class MSG_REDEEM_MAIL_GIFT_RESPONSE : INetworkMessage
        {
            public const byte c_messageID = 176;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("MailId", DMLType.GID)] public GID m_mailId;
            [DMLField("ErrorCode", DMLType.INT)] public int m_errorCode;
            [DMLField("TemplateId", DMLType.GID)] public GID m_templateId;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_REDEEM_MAIL_GIFT_RESPONSE>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_REDEEM_MAIL_GIFT_RESPONSE>.Read(buf, this);
            }
        }
        public class MSG_RELEASEDELAY : INetworkMessage
        {
            public const byte c_messageID = 177;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_RELEASEDELAY>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_RELEASEDELAY>.Read(buf, this);
            }
        }
        public class MSG_RELOADTEMPLATEDIR : INetworkMessage
        {
            public const byte c_messageID = 178;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("Directory", DMLType.STR)] public ByteString m_directory;
            [DMLField("Recursive", DMLType.BYT)] public sbyte m_recursive;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_RELOADTEMPLATEDIR>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_RELOADTEMPLATEDIR>.Read(buf, this);
            }
        }
        public class MSG_REMOVEDSHOPPER : INetworkMessage
        {
            public const byte c_messageID = 179;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("StateName", DMLType.STR)] public ByteString m_stateName;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_REMOVEDSHOPPER>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_REMOVEDSHOPPER>.Read(buf, this);
            }
        }
        public class MSG_REMOVEEFFECT : INetworkMessage
        {
            public const byte c_messageID = 180;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("GameObjectID", DMLType.GID)] public GID m_gameObjectID;
            [DMLField("EffectNameID", DMLType.UINT)] public uint m_effectNameID;
            [DMLField("InternalID", DMLType.INT)] public int m_internalID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_REMOVEEFFECT>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_REMOVEEFFECT>.Read(buf, this);
            }
        }
        public class MSG_REMOVEITEMREQUEST : INetworkMessage
        {
            public const byte c_messageID = 181;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("GlobalID", DMLType.GID)] public GID m_globalID;
            [DMLField("ItemTemplateID", DMLType.GID)] public GID m_itemTemplateID;
            [DMLField("Quantity", DMLType.INT)] public int m_quantity;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_REMOVEITEMREQUEST>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_REMOVEITEMREQUEST>.Read(buf, this);
            }
        }
        public class MSG_REMOVEOBJECT : INetworkMessage
        {
            public const byte c_messageID = 182;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("GameObjectID", DMLType.GID)] public GID m_gameObjectID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_REMOVEOBJECT>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_REMOVEOBJECT>.Read(buf, this);
            }
        }
        public class MSG_REMOVEPARTICLE : INetworkMessage
        {
            public const byte c_messageID = 183;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("newName", DMLType.STR)] public ByteString m_newName;
            [DMLField("attachTo", DMLType.STR)] public ByteString m_attachTo;
            [DMLField("parentID", DMLType.GID)] public GID m_parentID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_REMOVEPARTICLE>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_REMOVEPARTICLE>.Read(buf, this);
            }
        }
        public class MSG_REMOVEZONETIMER : INetworkMessage
        {
            public const byte c_messageID = 184;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("TimerID", DMLType.INT)] public int m_timerID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_REMOVEZONETIMER>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_REMOVEZONETIMER>.Read(buf, this);
            }
        }
        public class MSG_REPORTADTAKEOVER : INetworkMessage
        {
            public const byte c_messageID = 185;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("PARTNER", DMLType.STR)] public ByteString m_pARTNER;
            [DMLField("URL", DMLType.STR)] public ByteString m_URL;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_REPORTADTAKEOVER>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_REPORTADTAKEOVER>.Read(buf, this);
            }
        }
        public class MSG_REQASKSERVER : INetworkMessage
        {
            public const byte c_messageID = 186;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("RequestID", DMLType.UINT)] public uint m_requestID;
            [DMLField("Requirement", DMLType.STR)] public ByteString m_requirement;
            [DMLField("Response", DMLType.UINT)] public uint m_response;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_REQASKSERVER>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_REQASKSERVER>.Read(buf, this);
            }
        }
        public class MSG_REQCHATDIAGNOSTICS : INetworkMessage
        {
            public const byte c_messageID = 187;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("CharacterID", DMLType.GID)] public GID m_characterID;
            [DMLField("Data", DMLType.STR)] public ByteString m_data;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_REQCHATDIAGNOSTICS>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_REQCHATDIAGNOSTICS>.Read(buf, this);
            }
        }
        public class MSG_REQUESTADVANCECHANNELINSTANCE : INetworkMessage
        {
            public const byte c_messageID = 188;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("SourceID", DMLType.GID)] public GID m_sourceID;
            [DMLField("ChannelID", DMLType.GID)] public GID m_channelID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_REQUESTADVANCECHANNELINSTANCE>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_REQUESTADVANCECHANNELINSTANCE>.Read(buf, this);
            }
        }
        public class MSG_REQUESTCHATCODE : INetworkMessage
        {
            public const byte c_messageID = 189;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("ListOwnerGID", DMLType.GID)] public GID m_listOwnerGID;
            [DMLField("Code", DMLType.STR)] public ByteString m_code;
            [DMLField("CodeTime", DMLType.INT)] public int m_codeTime;
            [DMLField("SpecialCode", DMLType.INT)] public int m_specialCode;
            [DMLField("Forwarded", DMLType.UBYT)] public byte m_forwarded;
            [DMLField("NameBlob", DMLType.STR)] public ByteString m_nameBlob;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_REQUESTCHATCODE>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_REQUESTCHATCODE>.Read(buf, this);
            }
        }
        public class MSG_REQUESTCREATECHANNEL : INetworkMessage
        {
            public const byte c_messageID = 190;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("SourceID", DMLType.GID)] public GID m_sourceID;
            [DMLField("Name", DMLType.STR)] public ByteString m_name;
            [DMLField("Password", DMLType.STR)] public ByteString m_password;
            [DMLField("Flags", DMLType.UINT)] public uint m_flags;
            [DMLField("ChatInfoFlags", DMLType.UINT)] public uint m_chatInfoFlags;
            [DMLField("UserLimit", DMLType.INT)] public int m_userLimit;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_REQUESTCREATECHANNEL>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_REQUESTCREATECHANNEL>.Read(buf, this);
            }
        }
        public class MSG_REQUESTDIRECTEDCHAT : INetworkMessage
        {
            public const byte c_messageID = 191;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("Message", DMLType.WSTR)] public string m_message;
            [DMLField("TargetID", DMLType.GID)] public GID m_targetID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_REQUESTDIRECTEDCHAT>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_REQUESTDIRECTEDCHAT>.Read(buf, this);
            }
        }
        public class MSG_REQUESTDIRECTEDCHATBYNAME : INetworkMessage
        {
            public const byte c_messageID = 192;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("Message", DMLType.WSTR)] public string m_message;
            [DMLField("TargetName", DMLType.WSTR)] public string m_targetName;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_REQUESTDIRECTEDCHATBYNAME>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_REQUESTDIRECTEDCHATBYNAME>.Read(buf, this);
            }
        }
        public class MSG_REQUESTDIRECTEDQUICKCHAT : INetworkMessage
        {
            public const byte c_messageID = 193;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("TargetID", DMLType.GID)] public GID m_targetID;
            [DMLField("MessageID", DMLType.UINT)] public uint m_messageID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_REQUESTDIRECTEDQUICKCHAT>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_REQUESTDIRECTEDQUICKCHAT>.Read(buf, this);
            }
        }
        public class MSG_REQUESTDIRECTEDQUICKCHATEXT : INetworkMessage
        {
            public const byte c_messageID = 194;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("TargetID", DMLType.GID)] public GID m_targetID;
            [DMLField("Message", DMLType.STR)] public ByteString m_message;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_REQUESTDIRECTEDQUICKCHATEXT>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_REQUESTDIRECTEDQUICKCHATEXT>.Read(buf, this);
            }
        }
        public class MSG_REQUESTJOINCHANNEL : INetworkMessage
        {
            public const byte c_messageID = 195;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("SourceID", DMLType.GID)] public GID m_sourceID;
            [DMLField("ChannelID", DMLType.GID)] public GID m_channelID;
            [DMLField("Password", DMLType.WSTR)] public string m_password;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_REQUESTJOINCHANNEL>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_REQUESTJOINCHANNEL>.Read(buf, this);
            }
        }
        public class MSG_REQUESTJOINCHANNELBYNAME : INetworkMessage
        {
            public const byte c_messageID = 196;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("SourceID", DMLType.GID)] public GID m_sourceID;
            [DMLField("ChannelName", DMLType.WSTR)] public string m_channelName;
            [DMLField("Password", DMLType.WSTR)] public string m_password;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_REQUESTJOINCHANNELBYNAME>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_REQUESTJOINCHANNELBYNAME>.Read(buf, this);
            }
        }
        public class MSG_REQUESTLEAVECHANNEL : INetworkMessage
        {
            public const byte c_messageID = 197;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("SourceID", DMLType.GID)] public GID m_sourceID;
            [DMLField("ChannelID", DMLType.GID)] public GID m_channelID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_REQUESTLEAVECHANNEL>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_REQUESTLEAVECHANNEL>.Read(buf, this);
            }
        }
        public class MSG_REQUESTLEAVECHANNELBYNAME : INetworkMessage
        {
            public const byte c_messageID = 198;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("SourceID", DMLType.GID)] public GID m_sourceID;
            [DMLField("ChannelName", DMLType.WSTR)] public string m_channelName;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_REQUESTLEAVECHANNELBYNAME>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_REQUESTLEAVECHANNELBYNAME>.Read(buf, this);
            }
        }
        public class MSG_REQUESTMAXFRIENDS : INetworkMessage
        {
            public const byte c_messageID = 199;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("RequestingPlayerGID", DMLType.GID)] public GID m_requestingPlayerGID;
            [DMLField("MaximumFriends", DMLType.INT)] public int m_maximumFriends;
            [DMLField("MaximumSubscriberFriends", DMLType.INT)] public int m_maximumSubscriberFriends;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_REQUESTMAXFRIENDS>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_REQUESTMAXFRIENDS>.Read(buf, this);
            }
        }
        public class MSG_REQUESTRADIALCHAT : INetworkMessage
        {
            public const byte c_messageID = 200;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("Message", DMLType.STR)] public ByteString m_message;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_REQUESTRADIALCHAT>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_REQUESTRADIALCHAT>.Read(buf, this);
            }
        }
        public class MSG_REQUESTRADIALFRIENDCHAT : INetworkMessage
        {
            public const byte c_messageID = 201;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("PlayerGID", DMLType.GID)] public GID m_playerGID;
            [DMLField("Message", DMLType.STR)] public ByteString m_message;
            [DMLField("SourceID", DMLType.GID)] public GID m_sourceID;
            [DMLField("Filter", DMLType.UBYT)] public byte m_filter;
            [DMLField("SourceName", DMLType.STR)] public ByteString m_sourceName;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_REQUESTRADIALFRIENDCHAT>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_REQUESTRADIALFRIENDCHAT>.Read(buf, this);
            }
        }
        public class MSG_REQUESTRADIALFRIENDQUICKCHAT : INetworkMessage
        {
            public const byte c_messageID = 202;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("PlayerGID", DMLType.GID)] public GID m_playerGID;
            [DMLField("MessageID", DMLType.UINT)] public uint m_messageID;
            [DMLField("SourceID", DMLType.GID)] public GID m_sourceID;
            [DMLField("Filter", DMLType.UBYT)] public byte m_filter;
            [DMLField("SourceName", DMLType.STR)] public ByteString m_sourceName;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_REQUESTRADIALFRIENDQUICKCHAT>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_REQUESTRADIALFRIENDQUICKCHAT>.Read(buf, this);
            }
        }
        public class MSG_REQUESTRADIALOWNERCHAT : INetworkMessage
        {
            public const byte c_messageID = 203;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("Message", DMLType.STR)] public ByteString m_message;
            [DMLField("SourceID", DMLType.GID)] public GID m_sourceID;
            [DMLField("Filter", DMLType.UBYT)] public byte m_filter;
            [DMLField("SourceName", DMLType.STR)] public ByteString m_sourceName;
            [DMLField("IsOwner", DMLType.UBYT)] public byte m_isOwner;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_REQUESTRADIALOWNERCHAT>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_REQUESTRADIALOWNERCHAT>.Read(buf, this);
            }
        }
        public class MSG_REQUESTRADIALQUICKCHAT : INetworkMessage
        {
            public const byte c_messageID = 204;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("MessageID", DMLType.UINT)] public uint m_messageID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_REQUESTRADIALQUICKCHAT>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_REQUESTRADIALQUICKCHAT>.Read(buf, this);
            }
        }
        public class MSG_REQUESTRADIALQUICKCHATEXT : INetworkMessage
        {
            public const byte c_messageID = 205;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("Message", DMLType.STR)] public ByteString m_message;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_REQUESTRADIALQUICKCHATEXT>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_REQUESTRADIALQUICKCHATEXT>.Read(buf, this);
            }
        }
        public class MSG_REQUESTSESSION : INetworkMessage
        {
            public const byte c_messageID = 206;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("Session", DMLType.STR)] public ByteString m_session;
            [DMLField("Valid", DMLType.UBYT)] public byte m_valid;
            [DMLField("ID", DMLType.INT)] public int m_iD;
            [DMLField("CRC", DMLType.UINT)] public uint m_cRC;
            [DMLField("STEAMID", DMLType.STR)] public ByteString m_sTEAMID;
            [DMLField("Whitelist", DMLType.STR)] public ByteString m_whitelist;
            [DMLField("Threshold", DMLType.UINT)] public uint m_threshold;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_REQUESTSESSION>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_REQUESTSESSION>.Read(buf, this);
            }
        }
        public class MSG_REQUESTZONECLUSTERQUICKCHAT : INetworkMessage
        {
            public const byte c_messageID = 207;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("MessageID", DMLType.UINT)] public uint m_messageID;
            [DMLField("IsOwner", DMLType.UBYT)] public byte m_isOwner;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_REQUESTZONECLUSTERQUICKCHAT>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_REQUESTZONECLUSTERQUICKCHAT>.Read(buf, this);
            }
        }
        public class MSG_REQUEST_GIFTS : INetworkMessage
        {
            public const byte c_messageID = 208;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("GiftType", DMLType.STR)] public ByteString m_giftType;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_REQUEST_GIFTS>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_REQUEST_GIFTS>.Read(buf, this);
            }
        }
        public class MSG_REQUEST_PROMOTIONS : INetworkMessage
        {
            public const byte c_messageID = 209;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("Locale", DMLType.STR)] public ByteString m_locale;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_REQUEST_PROMOTIONS>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_REQUEST_PROMOTIONS>.Read(buf, this);
            }
        }
        public class MSG_RESTORECHAR_RSP : INetworkMessage
        {
            public const byte c_messageID = 210;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("Success", DMLType.UBYT)] public byte m_success;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_RESTORECHAR_RSP>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_RESTORECHAR_RSP>.Read(buf, this);
            }
        }
        public class MSG_RETRIEVE_MAIL : INetworkMessage
        {
            public const byte c_messageID = 211;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_RETRIEVE_MAIL>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_RETRIEVE_MAIL>.Read(buf, this);
            }
        }
        public class MSG_RETRYTELEPORT : INetworkMessage
        {
            public const byte c_messageID = 212;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_RETRYTELEPORT>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_RETRYTELEPORT>.Read(buf, this);
            }
        }
        public class MSG_SCRIPT : INetworkMessage
        {
            public const byte c_messageID = 213;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("ProcessID", DMLType.INT)] public int m_processID;
            [DMLField("Message", DMLType.STR)] public ByteString m_message;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_SCRIPT>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_SCRIPT>.Read(buf, this);
            }
        }
        public class MSG_SELECT_BADGE : INetworkMessage
        {
            public const byte c_messageID = 214;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("BadgeNameID", DMLType.UINT)] public uint m_badgeNameID;
            [DMLField("Error", DMLType.UINT)] public uint m_error;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_SELECT_BADGE>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_SELECT_BADGE>.Read(buf, this);
            }
        }
        public class MSG_SENDCHATCODE : INetworkMessage
        {
            public const byte c_messageID = 215;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("ListOwnerGID", DMLType.GID)] public GID m_listOwnerGID;
            [DMLField("Code", DMLType.STR)] public ByteString m_code;
            [DMLField("Error", DMLType.UINT)] public uint m_error;
            [DMLField("UseSuccess", DMLType.GID)] public GID m_useSuccess;
            [DMLField("CreatorName", DMLType.STR)] public ByteString m_creatorName;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_SENDCHATCODE>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_SENDCHATCODE>.Read(buf, this);
            }
        }
        public class MSG_SENDINTERACTOPTIONS : INetworkMessage
        {
            public const byte c_messageID = 216;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("MobileID", DMLType.GID)] public GID m_mobileID;
            [DMLField("Options", DMLType.STR)] public ByteString m_options;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_SENDINTERACTOPTIONS>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_SENDINTERACTOPTIONS>.Read(buf, this);
            }
        }
        public class MSG_SENDTEXT : INetworkMessage
        {
            public const byte c_messageID = 217;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("CharacterID", DMLType.GID)] public GID m_characterID;
            [DMLField("Message", DMLType.STR)] public ByteString m_message;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_SENDTEXT>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_SENDTEXT>.Read(buf, this);
            }
        }
        public class MSG_SERVERMOVE : INetworkMessage
        {
            public const byte c_messageID = 218;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("LocationX", DMLType.USHRT)] public ushort m_locationX;
            [DMLField("LocationY", DMLType.USHRT)] public ushort m_locationY;
            [DMLField("LocationZ", DMLType.USHRT)] public ushort m_locationZ;
            [DMLField("Direction", DMLType.UBYT)] public byte m_direction;
            [DMLField("MobileID", DMLType.USHRT)] public ushort m_mobileID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_SERVERMOVE>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_SERVERMOVE>.Read(buf, this);
            }
        }
        public class MSG_SERVERSHUTDOWN : INetworkMessage
        {
            public const byte c_messageID = 219;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("Message", DMLType.UINT)] public uint m_message;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_SERVERSHUTDOWN>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_SERVERSHUTDOWN>.Read(buf, this);
            }
        }
        public class MSG_SERVERTELEPORT : INetworkMessage
        {
            public const byte c_messageID = 220;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("LocationX", DMLType.USHRT)] public ushort m_locationX;
            [DMLField("LocationY", DMLType.USHRT)] public ushort m_locationY;
            [DMLField("LocationZ", DMLType.USHRT)] public ushort m_locationZ;
            [DMLField("Direction", DMLType.UBYT)] public byte m_direction;
            [DMLField("MobileID", DMLType.USHRT)] public ushort m_mobileID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_SERVERTELEPORT>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_SERVERTELEPORT>.Read(buf, this);
            }
        }
        public class MSG_SERVERTRANSFER : INetworkMessage
        {
            public const byte c_messageID = 221;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("IP", DMLType.STR)] public ByteString m_IP;
            [DMLField("TCPPort", DMLType.INT)] public int m_TCPPort;
            [DMLField("UDPPort", DMLType.INT)] public int m_UDPPort;
            [DMLField("Key", DMLType.INT)] public int m_key;
            [DMLField("UserID", DMLType.GID)] public GID m_userID;
            [DMLField("CharID", DMLType.GID)] public GID m_charID;
            [DMLField("ZoneName", DMLType.STR)] public ByteString m_zoneName;
            [DMLField("ZoneID", DMLType.GID)] public GID m_zoneID;
            [DMLField("Location", DMLType.STR)] public ByteString m_location;
            [DMLField("Slot", DMLType.INT)] public int m_slot;
            [DMLField("SessionID", DMLType.GID)] public GID m_sessionID;
            [DMLField("SessionSlot", DMLType.INT)] public int m_sessionSlot;
            [DMLField("TargetPlayerID", DMLType.GID)] public GID m_targetPlayerID;
            [DMLField("FallbackIP", DMLType.STR)] public ByteString m_fallbackIP;
            [DMLField("FallbackTCPPort", DMLType.INT)] public int m_fallbackTCPPort;
            [DMLField("FallbackUDPPort", DMLType.INT)] public int m_fallbackUDPPort;
            [DMLField("FallbackKey", DMLType.INT)] public int m_fallbackKey;
            [DMLField("FallbackZone", DMLType.STR)] public ByteString m_fallbackZone;
            [DMLField("FallbackZoneID", DMLType.GID)] public GID m_fallbackZoneID;
            [DMLField("TransitionID", DMLType.UINT)] public uint m_transitionID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_SERVERTRANSFER>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_SERVERTRANSFER>.Read(buf, this);
            }
        }
        public class MSG_SERVERTUTORIALCOMMAND : INetworkMessage
        {
            public const byte c_messageID = 222;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("QuestToAdd", DMLType.STR)] public ByteString m_questToAdd;
            [DMLField("QuestToRemove", DMLType.STR)] public ByteString m_questToRemove;
            [DMLField("GoalToComplete", DMLType.STR)] public ByteString m_goalToComplete;
            [DMLField("EventToPost", DMLType.STR)] public ByteString m_eventToPost;
            [DMLField("Action", DMLType.STR)] public ByteString m_action;
            [DMLField("Value", DMLType.INT)] public int m_value;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_SERVERTUTORIALCOMMAND>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_SERVERTUTORIALCOMMAND>.Read(buf, this);
            }
        }
        public class MSG_SERVERERROR : INetworkMessage
        {
            public const byte c_messageID = 223;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("Error", DMLType.UINT)] public uint m_error;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_SERVERERROR>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_SERVERERROR>.Read(buf, this);
            }
        }
        public class MSG_SERVER_PROCESS_RUNNING : INetworkMessage
        {
            public const byte c_messageID = 224;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("PID", DMLType.UINT)] public uint m_pID;
            [DMLField("JobID", DMLType.UINT)] public uint m_jobID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_SERVER_PROCESS_RUNNING>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_SERVER_PROCESS_RUNNING>.Read(buf, this);
            }
        }
        public class MSG_SESSION : INetworkMessage
        {
            public const byte c_messageID = 225;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("ZoneID", DMLType.GID)] public GID m_zoneID;
            [DMLField("SessionID", DMLType.GID)] public GID m_sessionID;
            [DMLField("Name", DMLType.STR)] public ByteString m_name;
            [DMLField("Slots", DMLType.INT)] public int m_slots;
            [DMLField("ActiveSlots", DMLType.INT)] public int m_activeSlots;
            [DMLField("Zone", DMLType.STR)] public ByteString m_zone;
            [DMLField("Rules", DMLType.STR)] public ByteString m_rules;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_SESSION>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_SESSION>.Read(buf, this);
            }
        }
        public class MSG_SESSION_ERROR : INetworkMessage
        {
            public const byte c_messageID = 226;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("ErrorCode", DMLType.INT)] public int m_errorCode;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_SESSION_ERROR>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_SESSION_ERROR>.Read(buf, this);
            }
        }
        public class MSG_SESSION_PLAYER : INetworkMessage
        {
            public const byte c_messageID = 227;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("Slot", DMLType.INT)] public int m_slot;
            [DMLField("CharID", DMLType.GID)] public GID m_charID;
            [DMLField("Name", DMLType.STR)] public ByteString m_name;
            [DMLField("Ranking", DMLType.STR)] public ByteString m_ranking;
            [DMLField("IsFriend", DMLType.INT)] public int m_isFriend;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_SESSION_PLAYER>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_SESSION_PLAYER>.Read(buf, this);
            }
        }
        public class MSG_SETHOUSECUSTOMIZATION : INetworkMessage
        {
            public const byte c_messageID = 228;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("GameObjectID", DMLType.GID)] public GID m_gameObjectID;
            [DMLField("TagName", DMLType.STR)] public ByteString m_tagName;
            [DMLField("TextureFilename", DMLType.STR)] public ByteString m_textureFilename;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_SETHOUSECUSTOMIZATION>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_SETHOUSECUSTOMIZATION>.Read(buf, this);
            }
        }
        public class MSG_SPLITQUANTITY : INetworkMessage
        {
            public const byte c_messageID = 229;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("GlobalID", DMLType.GID)] public GID m_globalID;
            [DMLField("ItemID", DMLType.GID)] public GID m_itemID;
            [DMLField("Quantity", DMLType.INT)] public int m_quantity;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_SPLITQUANTITY>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_SPLITQUANTITY>.Read(buf, this);
            }
        }
        public class MSG_STARTSTAGEDCINEMATIC : INetworkMessage
        {
            public const byte c_messageID = 230;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("CinematicName", DMLType.STR)] public ByteString m_cinematicName;
            [DMLField("InitialStageName", DMLType.STR)] public ByteString m_initialStageName;
            [DMLField("Start_X", DMLType.FLT)] public float m_start_X;
            [DMLField("Start_Y", DMLType.FLT)] public float m_start_Y;
            [DMLField("Start_Z", DMLType.FLT)] public float m_start_Z;
            [DMLField("Yaw", DMLType.FLT)] public float m_yaw;
            [DMLField("DuelID", DMLType.GID)] public GID m_duelID;
            [DMLField("WinningTeamID", DMLType.BYT)] public sbyte m_winningTeamID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_STARTSTAGEDCINEMATIC>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_STARTSTAGEDCINEMATIC>.Read(buf, this);
            }
        }
        public class MSG_START_CLIENT_PROCESS : INetworkMessage
        {
            public const byte c_messageID = 231;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("JobID", DMLType.UINT)] public uint m_jobID;
            [DMLField("ScriptName", DMLType.STR)] public ByteString m_scriptName;
            [DMLField("OwnerGID", DMLType.GID)] public GID m_ownerGID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_START_CLIENT_PROCESS>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_START_CLIENT_PROCESS>.Read(buf, this);
            }
        }
        public class MSG_START_SERVER_PROCESS : INetworkMessage
        {
            public const byte c_messageID = 232;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("PID", DMLType.UINT)] public uint m_pID;
            [DMLField("ScriptName", DMLType.STR)] public ByteString m_scriptName;
            [DMLField("OwnerGID", DMLType.GID)] public GID m_ownerGID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_START_SERVER_PROCESS>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_START_SERVER_PROCESS>.Read(buf, this);
            }
        }
        public class MSG_SUBOPTIMAL_BRACKET_RESPONSE : INetworkMessage
        {
            public const byte c_messageID = 233;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("Choice", DMLType.UINT)] public uint m_choice;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_SUBOPTIMAL_BRACKET_RESPONSE>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_SUBOPTIMAL_BRACKET_RESPONSE>.Read(buf, this);
            }
        }
        public class MSG_TELEPORT_TO_GAME_ZONE : INetworkMessage
        {
            public const byte c_messageID = 234;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("CharacterID", DMLType.GID)] public GID m_characterID;
            [DMLField("Game", DMLType.STR)] public ByteString m_game;
            [DMLField("Track", DMLType.STR)] public ByteString m_track;
            [DMLField("ZoneInstanceID", DMLType.GID)] public GID m_zoneInstanceID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_TELEPORT_TO_GAME_ZONE>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_TELEPORT_TO_GAME_ZONE>.Read(buf, this);
            }
        }
        public class MSG_TOURNAMENTUPDATE : INetworkMessage
        {
            public const byte c_messageID = 235;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("Updates", DMLType.STR)] public ByteString m_updates;
            [DMLField("CharacterID", DMLType.GID)] public GID m_characterID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_TOURNAMENTUPDATE>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_TOURNAMENTUPDATE>.Read(buf, this);
            }
        }
        public class MSG_TRANSFERCHAR_RSP : INetworkMessage
        {
            public const byte c_messageID = 236;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("Success", DMLType.UBYT)] public byte m_success;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_TRANSFERCHAR_RSP>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_TRANSFERCHAR_RSP>.Read(buf, this);
            }
        }
        public class MSG_TRANSFER_INSTANCE : INetworkMessage
        {
            public const byte c_messageID = 237;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("ZoneID", DMLType.GID)] public GID m_zoneID;
            [DMLField("Error", DMLType.UINT)] public uint m_error;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_TRANSFER_INSTANCE>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_TRANSFER_INSTANCE>.Read(buf, this);
            }
        }
        public class MSG_TRANSFER_REALMS : INetworkMessage
        {
            public const byte c_messageID = 238;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("RealmName", DMLType.STR)] public ByteString m_realmName;
            [DMLField("Error", DMLType.UINT)] public uint m_error;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_TRANSFER_REALMS>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_TRANSFER_REALMS>.Read(buf, this);
            }
        }
        public class MSG_TRASHINVENTORYITEM : INetworkMessage
        {
            public const byte c_messageID = 239;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("GlobalID", DMLType.GID)] public GID m_globalID;
            [DMLField("TemplateID", DMLType.GID)] public GID m_templateID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_TRASHINVENTORYITEM>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_TRASHINVENTORYITEM>.Read(buf, this);
            }
        }
        public class MSG_TUTORIALS : INetworkMessage
        {
            public const byte c_messageID = 240;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("GlobalID", DMLType.GID)] public GID m_globalID;
            [DMLField("Remove", DMLType.INT)] public int m_remove;
            [DMLField("TutorialInfo", DMLType.STR)] public ByteString m_tutorialInfo;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_TUTORIALS>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_TUTORIALS>.Read(buf, this);
            }
        }
        public class MSG_UPDATEOBJECT : INetworkMessage
        {
            public const byte c_messageID = 241;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("GameObjectID", DMLType.GID)] public GID m_gameObjectID;
            [DMLField("LocationX", DMLType.FLT)] public float m_locationX;
            [DMLField("LocationY", DMLType.FLT)] public float m_locationY;
            [DMLField("LocationZ", DMLType.FLT)] public float m_locationZ;
            [DMLField("Direction", DMLType.FLT)] public float m_direction;
            [DMLField("Name", DMLType.STR)] public ByteString m_name;
            [DMLField("TemplateID", DMLType.GID)] public GID m_templateID;
            [DMLField("StartDragging", DMLType.INT)] public int m_startDragging;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_UPDATEOBJECT>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_UPDATEOBJECT>.Read(buf, this);
            }
        }
        public class MSG_UPDATEQUANTITY : INetworkMessage
        {
            public const byte c_messageID = 242;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("GlobalID", DMLType.GID)] public GID m_globalID;
            [DMLField("Quantity", DMLType.INT)] public int m_quantity;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_UPDATEQUANTITY>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_UPDATEQUANTITY>.Read(buf, this);
            }
        }
        public class MSG_UPDATEZONECOUNTER : INetworkMessage
        {
            public const byte c_messageID = 243;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("ZoneCounter", DMLType.UBYT)] public byte m_zoneCounter;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_UPDATEZONECOUNTER>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_UPDATEZONECOUNTER>.Read(buf, this);
            }
        }
        public class MSG_UPDATEZONETIMER : INetworkMessage
        {
            public const byte c_messageID = 244;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("TimerID", DMLType.INT)] public int m_timerID;
            [DMLField("Title", DMLType.STR)] public ByteString m_title;
            [DMLField("TimerUI", DMLType.STR)] public ByteString m_timerUI;
            [DMLField("CountdownTime", DMLType.FLT)] public float m_countdownTime;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_UPDATEZONETIMER>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_UPDATEZONETIMER>.Read(buf, this);
            }
        }
        public class MSG_USECHATCODE : INetworkMessage
        {
            public const byte c_messageID = 245;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("ListOwnerGID", DMLType.GID)] public GID m_listOwnerGID;
            [DMLField("BuddyID", DMLType.GID)] public GID m_buddyID;
            [DMLField("Code", DMLType.STR)] public ByteString m_code;
            [DMLField("Forwarded", DMLType.UBYT)] public byte m_forwarded;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_USECHATCODE>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_USECHATCODE>.Read(buf, this);
            }
        }
        public class MSG_CSRVIEWACCOUNT : INetworkMessage
        {
            public const byte c_messageID = 246;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("AccountName", DMLType.STR)] public ByteString m_accountName;
            [DMLField("AccountID", DMLType.GID)] public GID m_accountID;
            [DMLField("CharacterID", DMLType.GID)] public GID m_characterID;
            [DMLField("CanFilterChat", DMLType.UBYT)] public byte m_canFilterChat;
            [DMLField("CanOpenChat", DMLType.UBYT)] public byte m_canOpenChat;
            [DMLField("CanUseCodes", DMLType.UBYT)] public byte m_canUseCodes;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_CSRVIEWACCOUNT>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_CSRVIEWACCOUNT>.Read(buf, this);
            }
        }
        public class MSG_WIZBANG : INetworkMessage
        {
            public const byte c_messageID = 247;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("GameObjectID", DMLType.GID)] public GID m_gameObjectID;
            [DMLField("WizBangID", DMLType.UINT)] public uint m_wizBangID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_WIZBANG>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_WIZBANG>.Read(buf, this);
            }
        }
        public class MSG_ZOMBIE_PLAYER : INetworkMessage
        {
            public const byte c_messageID = 248;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("GlobalID", DMLType.GID)] public GID m_globalID;
            [DMLField("Remaining", DMLType.FLT)] public float m_remaining;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_ZOMBIE_PLAYER>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_ZOMBIE_PLAYER>.Read(buf, this);
            }
        }
        public class MSG_ZONEEVENTTIMEREXPIRED : INetworkMessage
        {
            public const byte c_messageID = 249;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("TimerName", DMLType.STR)] public ByteString m_timerName;
            [DMLField("EventName", DMLType.STR)] public ByteString m_eventName;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_ZONEEVENTTIMEREXPIRED>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_ZONEEVENTTIMEREXPIRED>.Read(buf, this);
            }
        }
        public class MSG_ZONETRANSFER : INetworkMessage
        {
            public const byte c_messageID = 250;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("ZoneName", DMLType.STR)] public ByteString m_zoneName;
            [DMLField("ZoneID", DMLType.GID)] public GID m_zoneID;
            [DMLField("Slot", DMLType.INT)] public int m_slot;
            [DMLField("DynamicZoneID", DMLType.UINT)] public uint m_dynamicZoneID;
            [DMLField("DynamicServerProcID", DMLType.UINT)] public uint m_dynamicServerProcID;
            [DMLField("ZoneCounter", DMLType.UBYT)] public byte m_zoneCounter;
            [DMLField("TransitionID", DMLType.UINT)] public uint m_transitionID;
            [DMLField("SessionID", DMLType.GID)] public GID m_sessionID;
            [DMLField("SessionSlot", DMLType.INT)] public int m_sessionSlot;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_ZONETRANSFER>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_ZONETRANSFER>.Read(buf, this);
            }
        }
        public class MSG_ZONETRANSFERACK : INetworkMessage
        {
            public const byte c_messageID = 251;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_ZONETRANSFERACK>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_ZONETRANSFERACK>.Read(buf, this);
            }
        }
        public class MSG_ZONETRANSFERNACK : INetworkMessage
        {
            public const byte c_messageID = 252;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_ZONETRANSFERNACK>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_ZONETRANSFERNACK>.Read(buf, this);
            }
        }
        public class MSG_ZONETRANSFERREQUEST : INetworkMessage
        {
            public const byte c_messageID = 253;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("ZoneName", DMLType.STR)] public ByteString m_zoneName;
            [DMLField("SendAck", DMLType.UBYT)] public byte m_sendAck;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_ZONETRANSFERREQUEST>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_ZONETRANSFERREQUEST>.Read(buf, this);
            }
        }
        
        public bool Dispatch(object handlerVoid, INetworkMessage message)
        {
            Debug.Assert(message.GetServiceID() == c_serviceID);
            var handler = (Handler)handlerVoid;
            
            switch (message.GetID())
            {
                case MSG_ADCLICKTHROUGH.c_messageID:
                    return handler.NetHandleADCLICKTHROUGH((MSG_ADCLICKTHROUGH)message);
                case MSG_ADDEFFECT.c_messageID:
                    return handler.NetHandleAddEffect((MSG_ADDEFFECT)message);
                case MSG_ADDITEMREQUEST.c_messageID:
                    return handler.NetHandleAddItemRequest((MSG_ADDITEMREQUEST)message);
                case MSG_ADDOBJECT.c_messageID:
                    return handler.NetHandleAddObject((MSG_ADDOBJECT)message);
                case MSG_ADDPARTICLE.c_messageID:
                    return handler.NetHandleAddParticle((MSG_ADDPARTICLE)message);
                case MSG_ADDZONETIMER.c_messageID:
                    return handler.NetHandleAddZoneTimer((MSG_ADDZONETIMER)message);
                case MSG_ATTACH.c_messageID:
                    return handler.NetHandleAttach((MSG_ATTACH)message);
                case MSG_ATTACHFAILED.c_messageID:
                    return handler.NetHandleAttachFailed((MSG_ATTACHFAILED)message);
                case MSG_AUCTIONHOUSEUPDATE.c_messageID:
                    return handler.NetHandleAuctionHouseUpdate((MSG_AUCTIONHOUSEUPDATE)message);
                case MSG_BADGES.c_messageID:
                    return handler.NetHandleBadges((MSG_BADGES)message);
                case MSG_BAN_RSP.c_messageID:
                    return handler.NetHandleBan_Rsp((MSG_BAN_RSP)message);
                case MSG_BESTFRIEND.c_messageID:
                    return handler.NetHandleBestFriend((MSG_BESTFRIEND)message);
                case MSG_BLACKBALL.c_messageID:
                    return handler.NetHandleBlackball((MSG_BLACKBALL)message);
                case MSG_BUDDYDROP.c_messageID:
                    return handler.NetHandleBuddyDrop((MSG_BUDDYDROP)message);
                case MSG_BUDDYENTRY.c_messageID:
                    return handler.NetHandleBuddyEntry((MSG_BUDDYENTRY)message);
                case MSG_BUDDYLISTCOMPLETE.c_messageID:
                    return handler.NetHandleBuddyListComplete((MSG_BUDDYLISTCOMPLETE)message);
                case MSG_BUDDYREQUESTACCEPT.c_messageID:
                    return handler.NetHandleBuddyRequestAccept((MSG_BUDDYREQUESTACCEPT)message);
                case MSG_BUDDYREQUESTACCEPTFWD.c_messageID:
                    return handler.NetHandleBuddyRequestAcceptFwd((MSG_BUDDYREQUESTACCEPTFWD)message);
                case MSG_BUDDYREQUESTADD.c_messageID:
                    return handler.NetHandleBuddyRequestAdd((MSG_BUDDYREQUESTADD)message);
                case MSG_BUDDYREQUESTADDFWD.c_messageID:
                    return handler.NetHandleBuddyRequestAddFwd((MSG_BUDDYREQUESTADDFWD)message);
                case MSG_BUDDYREQUESTDENY.c_messageID:
                    return handler.NetHandleBuddyRequestDeny((MSG_BUDDYREQUESTDENY)message);
                case MSG_BUDDYREQUESTDENYFWD.c_messageID:
                    return handler.NetHandleBuddyRequestDenyFwd((MSG_BUDDYREQUESTDENYFWD)message);
                case MSG_BUDDYREQUESTDROP.c_messageID:
                    return handler.NetHandleBuddyRequestDrop((MSG_BUDDYREQUESTDROP)message);
                case MSG_BUDDYREQUESTERROR.c_messageID:
                    return handler.NetHandleBuddyRequestError((MSG_BUDDYREQUESTERROR)message);
                case MSG_BUDDYREQUESTLIST.c_messageID:
                    return handler.NetHandleBuddyRequestList((MSG_BUDDYREQUESTLIST)message);
                case MSG_BUDDYSTATS.c_messageID:
                    return handler.NetHandleBuddyStats((MSG_BUDDYSTATS)message);
                case MSG_BUDDYSTATUSUPDATE.c_messageID:
                    return handler.NetHandleBuddyStatusUpdate((MSG_BUDDYSTATUSUPDATE)message);
                case MSG_BUGREPORT.c_messageID:
                    return handler.NetHandleBugReport((MSG_BUGREPORT)message);
                case MSG_BUGSUBMITRESPONSE.c_messageID:
                    return handler.NetHandleBugSubmitResponse((MSG_BUGSUBMITRESPONSE)message);
                case MSG_CHANNELCHAT.c_messageID:
                    return handler.NetHandleChannelChat((MSG_CHANNELCHAT)message);
                case MSG_CHANNELSUBSCRIPTION.c_messageID:
                    return handler.NetHandleChannelSubscription((MSG_CHANNELSUBSCRIPTION)message);
                case MSG_CHATDIAGNOSTICS.c_messageID:
                    return handler.NetHandleChatDiagnostics((MSG_CHATDIAGNOSTICS)message);
                case MSG_CHATERROR.c_messageID:
                    return handler.NetHandleChatError((MSG_CHATERROR)message);
                case MSG_CHECKSUBSCRIPTION.c_messageID:
                    return handler.NetHandleCheckSubscription((MSG_CHECKSUBSCRIPTION)message);
                case MSG_CHECK_MAIL.c_messageID:
                    return handler.NetHandleCheckMail((MSG_CHECK_MAIL)message);
                case MSG_CLIENTMOVE.c_messageID:
                    return handler.NetHandleClientMove((MSG_CLIENTMOVE)message);
                case MSG_CLIENTMOVESTATE.c_messageID:
                    return handler.NetHandleClientMoveState((MSG_CLIENTMOVESTATE)message);
                case MSG_CLIENTNOTIFYTEXT.c_messageID:
                    return handler.NetHandleClientNotifyText((MSG_CLIENTNOTIFYTEXT)message);
                case MSG_CLIENTTUTORIALEVENT.c_messageID:
                    return handler.NetHandleClientTutorialEvent((MSG_CLIENTTUTORIALEVENT)message);
                case MSG_CLIENT_DISCONNECT.c_messageID:
                    return handler.NetHandleClient_Disconnect((MSG_CLIENT_DISCONNECT)message);
                case MSG_CLIENT_ERROR.c_messageID:
                    return handler.NetHandleClient_Error((MSG_CLIENT_ERROR)message);
                case MSG_CLIENT_PROCESS_TERMINATED.c_messageID:
                    return handler.NetHandleCLIENT_PROCESS_TERMINATED((MSG_CLIENT_PROCESS_TERMINATED)message);
                case MSG_COMBINEINVENTORYITEMS.c_messageID:
                    return handler.NetHandleCombineInventoryItems((MSG_COMBINEINVENTORYITEMS)message);
                case MSG_COMMAND.c_messageID:
                    return handler.NetHandleCommand((MSG_COMMAND)message);
                case MSG_COMMANDRESULT.c_messageID:
                    return handler.NetHandleCommandResult((MSG_COMMANDRESULT)message);
                case MSG_COMPANIONEFFECTS.c_messageID:
                    return handler.NetHandleCompanionEffects((MSG_COMPANIONEFFECTS)message);
                case MSG_CORE_EMOTE.c_messageID:
                    return handler.NetHandleCoreEmote((MSG_CORE_EMOTE)message);
                case MSG_CREATECHANNELRESPONSE.c_messageID:
                    return handler.NetHandleCreateChannelResponse((MSG_CREATECHANNELRESPONSE)message);
                case MSG_CREATE_SESSION.c_messageID:
                    return handler.NetHandleCREATE_SESSION((MSG_CREATE_SESSION)message);
                case MSG_CSRBANKITEMS.c_messageID:
                    return handler.NetHandleCSRBankItems((MSG_CSRBANKITEMS)message);
                case MSG_CSRBANKITEMSDONE.c_messageID:
                    return handler.NetHandleCSRBankItemsDone((MSG_CSRBANKITEMSDONE)message);
                case MSG_CSREDITCHARACTER.c_messageID:
                    return handler.NetHandleCSREditCharacter((MSG_CSREDITCHARACTER)message);
                case MSG_CSREDITCHARACTERFAILED.c_messageID:
                    return handler.NetHandleCSREditCharacterFailed((MSG_CSREDITCHARACTERFAILED)message);
                case MSG_CSRFINISHEDHOUSE.c_messageID:
                    return handler.NetHandleCSRFinishedHouse((MSG_CSRFINISHEDHOUSE)message);
                case MSG_CSRSEARCHLIST.c_messageID:
                    return handler.NetHandleCSRSearchList((MSG_CSRSEARCHLIST)message);
                case MSG_CSR_MAIL_DATA.c_messageID:
                    return handler.NetHandleCSRMailData((MSG_CSR_MAIL_DATA)message);
                case MSG_CSR_RECEIVE_GIFTS.c_messageID:
                    return handler.NetHandleCSRReceiveGifts((MSG_CSR_RECEIVE_GIFTS)message);
                case MSG_DEBUGDELETEALLOBJECTS.c_messageID:
                    return handler.NetHandleDEBUGDELETEALLOBJECTS((MSG_DEBUGDELETEALLOBJECTS)message);
                case MSG_DELETEOBJECT.c_messageID:
                    return handler.NetHandleDeleteObject((MSG_DELETEOBJECT)message);
                case MSG_DELETE_GIFT.c_messageID:
                    return handler.NetHandleDeleteGift((MSG_DELETE_GIFT)message);
                case MSG_DIRECTEDCHAT.c_messageID:
                    return handler.NetHandleDirectedChat((MSG_DIRECTEDCHAT)message);
                case MSG_DIRECTEDCHATBYNAMERESPONSE.c_messageID:
                    return handler.NetHandleDirectedChatByNameResponse((MSG_DIRECTEDCHATBYNAMERESPONSE)message);
                case MSG_DIRECTEDCHATFAIL.c_messageID:
                    return handler.NetHandleDirectedChatFail((MSG_DIRECTEDCHATFAIL)message);
                case MSG_DIRECTEDQUICKCHAT.c_messageID:
                    return handler.NetHandleDirectedQuickChat((MSG_DIRECTEDQUICKCHAT)message);
                case MSG_DIRECTEDQUICKCHATEXT.c_messageID:
                    return handler.NetHandleDirectedQuickChatExt((MSG_DIRECTEDQUICKCHATEXT)message);
                case MSG_DISCONNECT_AFK.c_messageID:
                    return handler.NetHandleDisconnect_Afk((MSG_DISCONNECT_AFK)message);
                case MSG_DOWNLOADBROWSER.c_messageID:
                    return handler.NetHandleDownloadBrowser((MSG_DOWNLOADBROWSER)message);
                case MSG_DOWNLOADPACKAGE.c_messageID:
                    return handler.NetHandleDownloadPackage((MSG_DOWNLOADPACKAGE)message);
                case MSG_DOWNLOADPACKAGEELEMENT.c_messageID:
                    return handler.NetHandleDownloadPackageElement((MSG_DOWNLOADPACKAGEELEMENT)message);
                case MSG_DYNAMODBEHAVIOR_UPDATEMODS.c_messageID:
                    return handler.NetHandleDynaModBehavior_UpdateMods((MSG_DYNAMODBEHAVIOR_UPDATEMODS)message);
                case MSG_DYNAMODDUMP.c_messageID:
                    return handler.NetHandleDynaModDump((MSG_DYNAMODDUMP)message);
                case MSG_ENTERSTATE.c_messageID:
                    return handler.NetHandleEnterState((MSG_ENTERSTATE)message);
                case MSG_EQUIPITEM.c_messageID:
                    return handler.NetHandleEquipItem((MSG_EQUIPITEM)message);
                case MSG_EQUIPMENTBEHAVIOR_EQUIPITEM.c_messageID:
                    return handler.NetHandleEquipmentBehavior_EquipItem((MSG_EQUIPMENTBEHAVIOR_EQUIPITEM)message);
                case MSG_EQUIPMENTBEHAVIOR_PUBLICEQUIPITEM.c_messageID:
                    return handler.NetHandleEquipmentBehavior_PublicEquipItem((MSG_EQUIPMENTBEHAVIOR_PUBLICEQUIPITEM)message);
                case MSG_EQUIPMENTBEHAVIOR_PUBLICUNEQUIPITEM.c_messageID:
                    return handler.NetHandleEquipmentBehavior_PublicUnequipItem((MSG_EQUIPMENTBEHAVIOR_PUBLICUNEQUIPITEM)message);
                case MSG_EQUIPMENTBEHAVIOR_UNEQUIPITEM.c_messageID:
                    return handler.NetHandleEquipmentBehavior_UnequipItem((MSG_EQUIPMENTBEHAVIOR_UNEQUIPITEM)message);
                case MSG_FEEDINVENTORYITEM.c_messageID:
                    return handler.NetHandleFeedInventoryItem((MSG_FEEDINVENTORYITEM)message);
                case MSG_FIND_SESSIONS.c_messageID:
                    return handler.NetHandleFIND_SESSIONS((MSG_FIND_SESSIONS)message);
                case MSG_FIND_SESSION_PLAYERS.c_messageID:
                    return handler.NetHandleFIND_SESSION_PLAYERS((MSG_FIND_SESSION_PLAYERS)message);
                case MSG_GENERICGAME.c_messageID:
                    return handler.NetHandleGenericGame((MSG_GENERICGAME)message);
                case MSG_GETLADDER.c_messageID:
                    return handler.NetHandleGetLadder((MSG_GETLADDER)message);
                case MSG_GET_RANKINGS.c_messageID:
                    return handler.NetHandleGET_RANKINGS((MSG_GET_RANKINGS)message);
                case MSG_GIFT_REDEEMED.c_messageID:
                    return handler.NetHandleGiftRedeemed((MSG_GIFT_REDEEMED)message);
                case MSG_GOTOPLAYER.c_messageID:
                    return handler.NetHandleGotoPlayer((MSG_GOTOPLAYER)message);
                case MSG_GOTOPLAYERRESP.c_messageID:
                    return handler.NetHandleGotoPlayerResponse((MSG_GOTOPLAYERRESP)message);
                case MSG_HARASSMENTREPORT.c_messageID:
                    return handler.NetHandleHarassmentReport((MSG_HARASSMENTREPORT)message);
                case MSG_IGNOREADD.c_messageID:
                    return handler.NetHandleIgnoreAdd((MSG_IGNOREADD)message);
                case MSG_IGNOREDROP.c_messageID:
                    return handler.NetHandleIgnoreDrop((MSG_IGNOREDROP)message);
                case MSG_IGNORELIST.c_messageID:
                    return handler.NetHandleIgnoreList((MSG_IGNORELIST)message);
                case MSG_INTERACTOBJECT.c_messageID:
                    return handler.NetHandleInteractObject((MSG_INTERACTOBJECT)message);
                case MSG_INTERACTOPTION.c_messageID:
                    return handler.NetHandleInteractOption((MSG_INTERACTOPTION)message);
                case MSG_INVENTORYBEHAVIOR_ADDITEM.c_messageID:
                    return handler.NetHandleINVENTORYBEHAVIOR_ADDITEM((MSG_INVENTORYBEHAVIOR_ADDITEM)message);
                case MSG_INVENTORYBEHAVIOR_REMOVEITEM.c_messageID:
                    return handler.NetHandleINVENTORYBEHAVIOR_REMOVEITEM((MSG_INVENTORYBEHAVIOR_REMOVEITEM)message);
                case MSG_INVENTORYBEHAVIOR_TRADEITEM.c_messageID:
                    return handler.NetHandleINVENTORYBEHAVIOR_TRADEITEM((MSG_INVENTORYBEHAVIOR_TRADEITEM)message);
                case MSG_INVITEFRIEND.c_messageID:
                    return handler.NetHandleInviteFriend((MSG_INVITEFRIEND)message);
                case MSG_INVITE_RESPONSE.c_messageID:
                    return handler.NetHandleInviteResponse((MSG_INVITE_RESPONSE)message);
                case MSG_JOINCHANNELRESPONSE.c_messageID:
                    return handler.NetHandleJoinChannelResponse((MSG_JOINCHANNELRESPONSE)message);
                case MSG_JOIN_SESSION.c_messageID:
                    return handler.NetHandleJOIN_SESSION((MSG_JOIN_SESSION)message);
                case MSG_JUMP.c_messageID:
                    return handler.NetHandleJump((MSG_JUMP)message);
                case MSG_KILL_CLIENT_PROCESS.c_messageID:
                    return handler.NetHandleKILL_CLIENT_PROCESS((MSG_KILL_CLIENT_PROCESS)message);
                case MSG_LADDER.c_messageID:
                    return handler.NetHandleLADDER((MSG_LADDER)message);
                case MSG_LEAVECHANNELRESPONSE.c_messageID:
                    return handler.NetHandleLeaveChannelResponse((MSG_LEAVECHANNELRESPONSE)message);
                case MSG_LEAVEHOUSINGLOT.c_messageID:
                    return handler.NetHandleLeaveHousingLot((MSG_LEAVEHOUSINGLOT)message);
                case MSG_LEAVESERVICERANGE.c_messageID:
                    return handler.NetHandleLeaveServiceRange((MSG_LEAVESERVICERANGE)message);
                case MSG_LEAVESTATE.c_messageID:
                    return handler.NetHandleLeaveState((MSG_LEAVESTATE)message);
                case MSG_LOADSAVEOBJECTS.c_messageID:
                    return handler.NetHandleLOADSAVEOBJECTS((MSG_LOADSAVEOBJECTS)message);
                case MSG_LOGINCOMPLETE.c_messageID:
                    return handler.NetHandleLoginComplete((MSG_LOGINCOMPLETE)message);
                case MSG_MAIL_DATA.c_messageID:
                    return handler.NetHandleMailData((MSG_MAIL_DATA)message);
                case MSG_MARK_LOCATION.c_messageID:
                    return handler.NetHandleMarkLocation((MSG_MARK_LOCATION)message);
                case MSG_MARK_LOCATION_RESPONSE.c_messageID:
                    return handler.NetHandleMarkLocationResponse((MSG_MARK_LOCATION_RESPONSE)message);
                case MSG_MATCHAWARD.c_messageID:
                    return handler.NetHandleMatchAward((MSG_MATCHAWARD)message);
                case MSG_MATCHINVITE.c_messageID:
                    return handler.NetHandleMatchInvite((MSG_MATCHINVITE)message);
                case MSG_MATCHMAKERUPDATE.c_messageID:
                    return handler.NetHandleMatchMakerUpdate((MSG_MATCHMAKERUPDATE)message);
                case MSG_MATCHREADY.c_messageID:
                    return handler.NetHandleMatchReady((MSG_MATCHREADY)message);
                case MSG_MATCHRESULT.c_messageID:
                    return handler.NetHandleMatchResult((MSG_MATCHRESULT)message);
                case MSG_MESSAGE_PROCESS.c_messageID:
                    return handler.NetHandleMESSAGE_PROCESS((MSG_MESSAGE_PROCESS)message);
                case MSG_MOVECORRECTION.c_messageID:
                    return handler.NetHandleMoveCorrection((MSG_MOVECORRECTION)message);
                case MSG_MOVESTATE.c_messageID:
                    return handler.NetHandleMoveState((MSG_MOVESTATE)message);
                case MSG_MUTE.c_messageID:
                    return handler.NetHandleMute((MSG_MUTE)message);
                case MSG_MUTE_RSP.c_messageID:
                    return handler.NetHandleMute_Rsp((MSG_MUTE_RSP)message);
                case MSG_NEWOBJECT.c_messageID:
                    return handler.NetHandleNewObject((MSG_NEWOBJECT)message);
                case MSG_NEWSYSSTATS.c_messageID:
                    return handler.NetHandleNewSysStats((MSG_NEWSYSSTATS)message);
                case MSG_NEWTICKCNT.c_messageID:
                    return handler.NetHandleNewTickCnt((MSG_NEWTICKCNT)message);
                case MSG_NEWTOURNEYREWARDS.c_messageID:
                    return handler.NetHandleNewTourneyRewards((MSG_NEWTOURNEYREWARDS)message);
                case MSG_NEW_MAIL.c_messageID:
                    return handler.NetHandleNewMail((MSG_NEW_MAIL)message);
                case MSG_NOTIFYCHANNELINSTANCE.c_messageID:
                    return handler.NetHandleNotifyChannelInstance((MSG_NOTIFYCHANNELINSTANCE)message);
                case MSG_NOTIFY_GIFT.c_messageID:
                    return handler.NetHandleNotifyGift((MSG_NOTIFY_GIFT)message);
                case MSG_NOTMUTED.c_messageID:
                    return handler.NetHandleNotMuted((MSG_NOTMUTED)message);
                case MSG_NOT_AFK.c_messageID:
                    return handler.NetHandleNot_Afk((MSG_NOT_AFK)message);
                case MSG_NPCSPEECH.c_messageID:
                    return handler.NetHandleNPCSpeech((MSG_NPCSPEECH)message);
                case MSG_OBJECT_INFO_QUERY.c_messageID:
                    return handler.NetHandleObjectInfoQuery((MSG_OBJECT_INFO_QUERY)message);
                case MSG_PARTYDISBAND.c_messageID:
                    return handler.NetHandlePartyDisband((MSG_PARTYDISBAND)message);
                case MSG_PARTYJOINFAILED.c_messageID:
                    return handler.NetHandlePartyJoinFailed((MSG_PARTYJOINFAILED)message);
                case MSG_PARTYJOINNOTIFICATION.c_messageID:
                    return handler.NetHandlePartyJoinNotification((MSG_PARTYJOINNOTIFICATION)message);
                case MSG_PARTYLEAVE.c_messageID:
                    return handler.NetHandlePartyLeave((MSG_PARTYLEAVE)message);
                case MSG_PARTYLEAVENOTIFICATION.c_messageID:
                    return handler.NetHandlePartyLeaveNotification((MSG_PARTYLEAVENOTIFICATION)message);
                case MSG_PARTYLEVELUP.c_messageID:
                    return handler.NetHandlePartyLevelUp((MSG_PARTYLEVELUP)message);
                case MSG_PARTYLEVELUPUPDATE.c_messageID:
                    return handler.NetHandlePartyLevelUpUpdate((MSG_PARTYLEVELUPUPDATE)message);
                case MSG_PARTYMULTIPLAYERMOUNTEQUIP.c_messageID:
                    return handler.NetHandlePartyMultiPlayerMountEquip((MSG_PARTYMULTIPLAYERMOUNTEQUIP)message);
                case MSG_PARTYMULTIPLAYERMOUNTEQUIPUPDATE.c_messageID:
                    return handler.NetHandlePartyMultiPlayerMountEquipUpdate((MSG_PARTYMULTIPLAYERMOUNTEQUIPUPDATE)message);
                case MSG_PARTYMULTIPLAYERMOUNTJOIN.c_messageID:
                    return handler.NetHandlePartyMultiPlayerMountJoin((MSG_PARTYMULTIPLAYERMOUNTJOIN)message);
                case MSG_PARTYMULTIPLAYERMOUNTJOINUPDATE.c_messageID:
                    return handler.NetHandlePartyMultiPlayerMountJoinUpdate((MSG_PARTYMULTIPLAYERMOUNTJOINUPDATE)message);
                case MSG_PARTYREQUESTACCEPT.c_messageID:
                    return handler.NetHandlePartyRequestAccept((MSG_PARTYREQUESTACCEPT)message);
                case MSG_PARTYREQUESTDECLINE.c_messageID:
                    return handler.NetHandlePartyRequestDecline((MSG_PARTYREQUESTDECLINE)message);
                case MSG_PARTYREQUESTINVITE.c_messageID:
                    return handler.NetHandlePartyRequestInvite((MSG_PARTYREQUESTINVITE)message);
                case MSG_PARTYREQUESTJOIN.c_messageID:
                    return handler.NetHandlePartyRequestJoin((MSG_PARTYREQUESTJOIN)message);
                case MSG_PARTYREQUESTMEMBERZONES.c_messageID:
                    return handler.NetHandlePartyRequestMemberZones((MSG_PARTYREQUESTMEMBERZONES)message);
                case MSG_PARTYREQUESTRESPONSE.c_messageID:
                    return handler.NetHandlePartyRequestResponse((MSG_PARTYREQUESTRESPONSE)message);
                case MSG_PARTYREQUESTTIMEOUT.c_messageID:
                    return handler.NetHandlePartyRequestTimeout((MSG_PARTYREQUESTTIMEOUT)message);
                case MSG_PARTYSUBMITMEMBERZONES.c_messageID:
                    return handler.NetHandlePartySubmitMemberZones((MSG_PARTYSUBMITMEMBERZONES)message);
                case MSG_PARTYUPDATE.c_messageID:
                    return handler.NetHandlePartyUpdate((MSG_PARTYUPDATE)message);
                case MSG_PARTYZONEREQUEST.c_messageID:
                    return handler.NetHandlePartyZoneRequest((MSG_PARTYZONEREQUEST)message);
                case MSG_PARTYZONEREQUESTRESPONSE.c_messageID:
                    return handler.NetHandlePartyZoneRequestResponse((MSG_PARTYZONEREQUESTRESPONSE)message);
                case MSG_PICKUPOBJECT.c_messageID:
                    return handler.NetHandlePickUpObject((MSG_PICKUPOBJECT)message);
                case MSG_PLACEOBJECT.c_messageID:
                    return handler.NetHandlePlaceObject((MSG_PLACEOBJECT)message);
                case MSG_PLAYCINEMATIC.c_messageID:
                    return handler.NetHandlePlayCinematic((MSG_PLAYCINEMATIC)message);
                case MSG_PLAYERBLACKBALLEDALERT.c_messageID:
                    return handler.NetHandlePlayerBlackballedAlert((MSG_PLAYERBLACKBALLEDALERT)message);
                case MSG_PLAYERREADYACK.c_messageID:
                    return handler.NetHandlePlayerReadyAck((MSG_PLAYERREADYACK)message);
                case MSG_PLAYSOUND.c_messageID:
                    return handler.NetHandlePlaySound((MSG_PLAYSOUND)message);
                case MSG_POSTZONEEVENTFROMCLIENT.c_messageID:
                    return handler.NetHandlePostZoneEventFromClient((MSG_POSTZONEEVENTFROMCLIENT)message);
                case MSG_PREVIEW_ISLAND.c_messageID:
                    return handler.NetHandlePreviewIsland((MSG_PREVIEW_ISLAND)message);
                case MSG_PVPUPDATEINFO.c_messageID:
                    return handler.NetHandlePvPUpdateInfo((MSG_PVPUPDATEINFO)message);
                case MSG_QUERY_LOGOUT.c_messageID:
                    return handler.NetHandleQuery_Logout((MSG_QUERY_LOGOUT)message);
                case MSG_RADIALCHAT.c_messageID:
                    return handler.NetHandleRadialChat((MSG_RADIALCHAT)message);
                case MSG_RADIALQUICKCHAT.c_messageID:
                    return handler.NetHandleRadialQuickChat((MSG_RADIALQUICKCHAT)message);
                case MSG_RADIALQUICKCHATEXT.c_messageID:
                    return handler.NetHandleRadialQuickChatExt((MSG_RADIALQUICKCHATEXT)message);
                case MSG_RADIALZONECLUSTERQUICKCHAT.c_messageID:
                    return handler.NetHandleRadialZoneClusterQuickChat((MSG_RADIALZONECLUSTERQUICKCHAT)message);
                case MSG_RANKING.c_messageID:
                    return handler.NetHandleRANKING((MSG_RANKING)message);
                case MSG_REALM_INFO_QUERY.c_messageID:
                    return handler.NetHandleRealmInfoQuery((MSG_REALM_INFO_QUERY)message);
                case MSG_RECALL_LOCATION.c_messageID:
                    return handler.NetHandleRecallLocation((MSG_RECALL_LOCATION)message);
                case MSG_RECEIVE_GIFTS.c_messageID:
                    return handler.NetHandleReceiveGifts((MSG_RECEIVE_GIFTS)message);
                case MSG_RECEIVE_PROMOTIONS.c_messageID:
                    return handler.NetHandleReceivePromotions((MSG_RECEIVE_PROMOTIONS)message);
                case MSG_REDEEM_GIFT.c_messageID:
                    return handler.NetHandleRedeemGift((MSG_REDEEM_GIFT)message);
                case MSG_REDEEM_MAIL_GIFT.c_messageID:
                    return handler.NetHandleRedeemMailGift((MSG_REDEEM_MAIL_GIFT)message);
                case MSG_REDEEM_MAIL_GIFT_RESPONSE.c_messageID:
                    return handler.NetHandleRedeemMailGiftResponse((MSG_REDEEM_MAIL_GIFT_RESPONSE)message);
                case MSG_RELEASEDELAY.c_messageID:
                    return handler.NetHandleReleaseDelay((MSG_RELEASEDELAY)message);
                case MSG_RELOADTEMPLATEDIR.c_messageID:
                    return handler.NetHandleReloadTemplateDir((MSG_RELOADTEMPLATEDIR)message);
                case MSG_REMOVEDSHOPPER.c_messageID:
                    return handler.NetHandleRemovedShopper((MSG_REMOVEDSHOPPER)message);
                case MSG_REMOVEEFFECT.c_messageID:
                    return handler.NetHandleRemoveEffect((MSG_REMOVEEFFECT)message);
                case MSG_REMOVEITEMREQUEST.c_messageID:
                    return handler.NetHandleRemoveItemRequest((MSG_REMOVEITEMREQUEST)message);
                case MSG_REMOVEOBJECT.c_messageID:
                    return handler.NetHandleRemoveObject((MSG_REMOVEOBJECT)message);
                case MSG_REMOVEPARTICLE.c_messageID:
                    return handler.NetHandleRemoveParticle((MSG_REMOVEPARTICLE)message);
                case MSG_REMOVEZONETIMER.c_messageID:
                    return handler.NetHandleRemoveZoneTimer((MSG_REMOVEZONETIMER)message);
                case MSG_REPORTADTAKEOVER.c_messageID:
                    return handler.NetHandleReportAdTakeover((MSG_REPORTADTAKEOVER)message);
                case MSG_REQASKSERVER.c_messageID:
                    return handler.NetHandleReqAskServer((MSG_REQASKSERVER)message);
                case MSG_REQCHATDIAGNOSTICS.c_messageID:
                    return handler.NetHandleReqChatDiagnostics((MSG_REQCHATDIAGNOSTICS)message);
                case MSG_REQUESTADVANCECHANNELINSTANCE.c_messageID:
                    return handler.NetHandleRequestAdvanceChannelInstance((MSG_REQUESTADVANCECHANNELINSTANCE)message);
                case MSG_REQUESTCHATCODE.c_messageID:
                    return handler.NetHandleRequestChatCode((MSG_REQUESTCHATCODE)message);
                case MSG_REQUESTCREATECHANNEL.c_messageID:
                    return handler.NetHandleRequestCreateChannel((MSG_REQUESTCREATECHANNEL)message);
                case MSG_REQUESTDIRECTEDCHAT.c_messageID:
                    return handler.NetHandleRequestDirectedChat((MSG_REQUESTDIRECTEDCHAT)message);
                case MSG_REQUESTDIRECTEDCHATBYNAME.c_messageID:
                    return handler.NetHandleRequestDirectedChatByName((MSG_REQUESTDIRECTEDCHATBYNAME)message);
                case MSG_REQUESTDIRECTEDQUICKCHAT.c_messageID:
                    return handler.NetHandleRequestDirectedQuickChat((MSG_REQUESTDIRECTEDQUICKCHAT)message);
                case MSG_REQUESTDIRECTEDQUICKCHATEXT.c_messageID:
                    return handler.NetHandleRequestDirectedQuickChatExt((MSG_REQUESTDIRECTEDQUICKCHATEXT)message);
                case MSG_REQUESTJOINCHANNEL.c_messageID:
                    return handler.NetHandleRequestJoinChannel((MSG_REQUESTJOINCHANNEL)message);
                case MSG_REQUESTJOINCHANNELBYNAME.c_messageID:
                    return handler.NetHandleRequestJoinChannelByName((MSG_REQUESTJOINCHANNELBYNAME)message);
                case MSG_REQUESTLEAVECHANNEL.c_messageID:
                    return handler.NetHandleRequestLeaveChannel((MSG_REQUESTLEAVECHANNEL)message);
                case MSG_REQUESTLEAVECHANNELBYNAME.c_messageID:
                    return handler.NetHandleRequestLeaveChannelByName((MSG_REQUESTLEAVECHANNELBYNAME)message);
                case MSG_REQUESTMAXFRIENDS.c_messageID:
                    return handler.NetHandleRequestMaxFriends((MSG_REQUESTMAXFRIENDS)message);
                case MSG_REQUESTRADIALCHAT.c_messageID:
                    return handler.NetHandleRequestRadialChat((MSG_REQUESTRADIALCHAT)message);
                case MSG_REQUESTRADIALFRIENDCHAT.c_messageID:
                    return handler.NetHandleRequestRadialFriendChat((MSG_REQUESTRADIALFRIENDCHAT)message);
                case MSG_REQUESTRADIALFRIENDQUICKCHAT.c_messageID:
                    return handler.NetHandleRequestRadialFriendQuickChat((MSG_REQUESTRADIALFRIENDQUICKCHAT)message);
                case MSG_REQUESTRADIALOWNERCHAT.c_messageID:
                    return handler.NetHandleRequestRadialOwnerChat((MSG_REQUESTRADIALOWNERCHAT)message);
                case MSG_REQUESTRADIALQUICKCHAT.c_messageID:
                    return handler.NetHandleRequestRadialQuickChat((MSG_REQUESTRADIALQUICKCHAT)message);
                case MSG_REQUESTRADIALQUICKCHATEXT.c_messageID:
                    return handler.NetHandleRequestRadialQuickChatExt((MSG_REQUESTRADIALQUICKCHATEXT)message);
                case MSG_REQUESTSESSION.c_messageID:
                    return handler.NetHandleRequestSession((MSG_REQUESTSESSION)message);
                case MSG_REQUESTZONECLUSTERQUICKCHAT.c_messageID:
                    return handler.NetHandleRequestZoneClusterQuickChat((MSG_REQUESTZONECLUSTERQUICKCHAT)message);
                case MSG_REQUEST_GIFTS.c_messageID:
                    return handler.NetHandleRequestGifts((MSG_REQUEST_GIFTS)message);
                case MSG_REQUEST_PROMOTIONS.c_messageID:
                    return handler.NetHandleRequestPromotions((MSG_REQUEST_PROMOTIONS)message);
                case MSG_RESTORECHAR_RSP.c_messageID:
                    return handler.NetHandleRestoreChar_Rsp((MSG_RESTORECHAR_RSP)message);
                case MSG_RETRIEVE_MAIL.c_messageID:
                    return handler.NetHandleRetrieveMail((MSG_RETRIEVE_MAIL)message);
                case MSG_RETRYTELEPORT.c_messageID:
                    return handler.NetHandleRetryTeleport((MSG_RETRYTELEPORT)message);
                case MSG_SCRIPT.c_messageID:
                    return handler.NetHandleScript((MSG_SCRIPT)message);
                case MSG_SELECT_BADGE.c_messageID:
                    return handler.NetHandleSelect_Badge((MSG_SELECT_BADGE)message);
                case MSG_SENDCHATCODE.c_messageID:
                    return handler.NetHandleSendChatCode((MSG_SENDCHATCODE)message);
                case MSG_SENDINTERACTOPTIONS.c_messageID:
                    return handler.NetHandleSendInteractOptions((MSG_SENDINTERACTOPTIONS)message);
                case MSG_SENDTEXT.c_messageID:
                    return handler.NetHandleSendText((MSG_SENDTEXT)message);
                case MSG_SERVERMOVE.c_messageID:
                    return handler.NetHandleServerMove((MSG_SERVERMOVE)message);
                case MSG_SERVERSHUTDOWN.c_messageID:
                    return handler.NetHandleServerShutdown((MSG_SERVERSHUTDOWN)message);
                case MSG_SERVERTELEPORT.c_messageID:
                    return handler.NetHandleServerTeleport((MSG_SERVERTELEPORT)message);
                case MSG_SERVERTRANSFER.c_messageID:
                    return handler.NetHandleServerTransfer((MSG_SERVERTRANSFER)message);
                case MSG_SERVERTUTORIALCOMMAND.c_messageID:
                    return handler.NetHandleServerTutorialCommand((MSG_SERVERTUTORIALCOMMAND)message);
                case MSG_SERVERERROR.c_messageID:
                    return handler.NetHandleServerError((MSG_SERVERERROR)message);
                case MSG_SERVER_PROCESS_RUNNING.c_messageID:
                    return handler.NetHandleSERVER_PROCESS_RUNNING((MSG_SERVER_PROCESS_RUNNING)message);
                case MSG_SESSION.c_messageID:
                    return handler.NetHandleSESSION((MSG_SESSION)message);
                case MSG_SESSION_ERROR.c_messageID:
                    return handler.NetHandleSESSION_ERROR((MSG_SESSION_ERROR)message);
                case MSG_SESSION_PLAYER.c_messageID:
                    return handler.NetHandleSESSION_PLAYER((MSG_SESSION_PLAYER)message);
                case MSG_SETHOUSECUSTOMIZATION.c_messageID:
                    return handler.NetHandleSETHOUSECUSTOMIZATION((MSG_SETHOUSECUSTOMIZATION)message);
                case MSG_SPLITQUANTITY.c_messageID:
                    return handler.NetHandleSplitQuantity((MSG_SPLITQUANTITY)message);
                case MSG_STARTSTAGEDCINEMATIC.c_messageID:
                    return handler.NetHandleStartStagedCinematic((MSG_STARTSTAGEDCINEMATIC)message);
                case MSG_START_CLIENT_PROCESS.c_messageID:
                    return handler.NetHandleSTART_CLIENT_PROCESS((MSG_START_CLIENT_PROCESS)message);
                case MSG_START_SERVER_PROCESS.c_messageID:
                    return handler.NetHandleSTART_SERVER_PROCESS((MSG_START_SERVER_PROCESS)message);
                case MSG_SUBOPTIMAL_BRACKET_RESPONSE.c_messageID:
                    return handler.NetHandleSuboptimal_Bracket_Response((MSG_SUBOPTIMAL_BRACKET_RESPONSE)message);
                case MSG_TELEPORT_TO_GAME_ZONE.c_messageID:
                    return handler.NetHandleTeleportToGameZone((MSG_TELEPORT_TO_GAME_ZONE)message);
                case MSG_TOURNAMENTUPDATE.c_messageID:
                    return handler.NetHandleTournamentUpdate((MSG_TOURNAMENTUPDATE)message);
                case MSG_TRANSFERCHAR_RSP.c_messageID:
                    return handler.NetHandleTransferChar_Rsp((MSG_TRANSFERCHAR_RSP)message);
                case MSG_TRANSFER_INSTANCE.c_messageID:
                    return handler.NetHandleTransfer_Instance((MSG_TRANSFER_INSTANCE)message);
                case MSG_TRANSFER_REALMS.c_messageID:
                    return handler.NetHandleTransfer_Realms((MSG_TRANSFER_REALMS)message);
                case MSG_TRASHINVENTORYITEM.c_messageID:
                    return handler.NetHandleTrashInventoryItem((MSG_TRASHINVENTORYITEM)message);
                case MSG_TUTORIALS.c_messageID:
                    return handler.NetHandleTutorials((MSG_TUTORIALS)message);
                case MSG_UPDATEOBJECT.c_messageID:
                    return handler.NetHandleUpdateObject((MSG_UPDATEOBJECT)message);
                case MSG_UPDATEQUANTITY.c_messageID:
                    return handler.NetHandleUpdateQuantity((MSG_UPDATEQUANTITY)message);
                case MSG_UPDATEZONECOUNTER.c_messageID:
                    return handler.NetHandleUpdateZoneCounter((MSG_UPDATEZONECOUNTER)message);
                case MSG_UPDATEZONETIMER.c_messageID:
                    return handler.NetHandleUpdateZoneTimer((MSG_UPDATEZONETIMER)message);
                case MSG_USECHATCODE.c_messageID:
                    return handler.NetHandleUseChatCode((MSG_USECHATCODE)message);
                case MSG_CSRVIEWACCOUNT.c_messageID:
                    return handler.NetHandleCSRViewAccount((MSG_CSRVIEWACCOUNT)message);
                case MSG_WIZBANG.c_messageID:
                    return handler.NetHandleWizBang((MSG_WIZBANG)message);
                case MSG_ZOMBIE_PLAYER.c_messageID:
                    return handler.NetHandleZombie_Player((MSG_ZOMBIE_PLAYER)message);
                case MSG_ZONEEVENTTIMEREXPIRED.c_messageID:
                    return handler.NetHandleZONEEVENTTIMEREXPIRED((MSG_ZONEEVENTTIMEREXPIRED)message);
                case MSG_ZONETRANSFER.c_messageID:
                    return handler.NetHandleZoneTransfer((MSG_ZONETRANSFER)message);
                case MSG_ZONETRANSFERACK.c_messageID:
                    return handler.NetHandleZoneTransferAck((MSG_ZONETRANSFERACK)message);
                case MSG_ZONETRANSFERNACK.c_messageID:
                    return handler.NetHandleZoneTransferNack((MSG_ZONETRANSFERNACK)message);
                case MSG_ZONETRANSFERREQUEST.c_messageID:
                    return handler.NetHandleZoneTransferRequest((MSG_ZONETRANSFERREQUEST)message);
            }
            return false;
        }
        
        public INetworkMessage AllocateMessage(byte id)
        {
            switch (id)
            {
                case MSG_ADCLICKTHROUGH.c_messageID: return new MSG_ADCLICKTHROUGH();
                case MSG_ADDEFFECT.c_messageID: return new MSG_ADDEFFECT();
                case MSG_ADDITEMREQUEST.c_messageID: return new MSG_ADDITEMREQUEST();
                case MSG_ADDOBJECT.c_messageID: return new MSG_ADDOBJECT();
                case MSG_ADDPARTICLE.c_messageID: return new MSG_ADDPARTICLE();
                case MSG_ADDZONETIMER.c_messageID: return new MSG_ADDZONETIMER();
                case MSG_ATTACH.c_messageID: return new MSG_ATTACH();
                case MSG_ATTACHFAILED.c_messageID: return new MSG_ATTACHFAILED();
                case MSG_AUCTIONHOUSEUPDATE.c_messageID: return new MSG_AUCTIONHOUSEUPDATE();
                case MSG_BADGES.c_messageID: return new MSG_BADGES();
                case MSG_BAN_RSP.c_messageID: return new MSG_BAN_RSP();
                case MSG_BESTFRIEND.c_messageID: return new MSG_BESTFRIEND();
                case MSG_BLACKBALL.c_messageID: return new MSG_BLACKBALL();
                case MSG_BUDDYDROP.c_messageID: return new MSG_BUDDYDROP();
                case MSG_BUDDYENTRY.c_messageID: return new MSG_BUDDYENTRY();
                case MSG_BUDDYLISTCOMPLETE.c_messageID: return new MSG_BUDDYLISTCOMPLETE();
                case MSG_BUDDYREQUESTACCEPT.c_messageID: return new MSG_BUDDYREQUESTACCEPT();
                case MSG_BUDDYREQUESTACCEPTFWD.c_messageID: return new MSG_BUDDYREQUESTACCEPTFWD();
                case MSG_BUDDYREQUESTADD.c_messageID: return new MSG_BUDDYREQUESTADD();
                case MSG_BUDDYREQUESTADDFWD.c_messageID: return new MSG_BUDDYREQUESTADDFWD();
                case MSG_BUDDYREQUESTDENY.c_messageID: return new MSG_BUDDYREQUESTDENY();
                case MSG_BUDDYREQUESTDENYFWD.c_messageID: return new MSG_BUDDYREQUESTDENYFWD();
                case MSG_BUDDYREQUESTDROP.c_messageID: return new MSG_BUDDYREQUESTDROP();
                case MSG_BUDDYREQUESTERROR.c_messageID: return new MSG_BUDDYREQUESTERROR();
                case MSG_BUDDYREQUESTLIST.c_messageID: return new MSG_BUDDYREQUESTLIST();
                case MSG_BUDDYSTATS.c_messageID: return new MSG_BUDDYSTATS();
                case MSG_BUDDYSTATUSUPDATE.c_messageID: return new MSG_BUDDYSTATUSUPDATE();
                case MSG_BUGREPORT.c_messageID: return new MSG_BUGREPORT();
                case MSG_BUGSUBMITRESPONSE.c_messageID: return new MSG_BUGSUBMITRESPONSE();
                case MSG_CHANNELCHAT.c_messageID: return new MSG_CHANNELCHAT();
                case MSG_CHANNELSUBSCRIPTION.c_messageID: return new MSG_CHANNELSUBSCRIPTION();
                case MSG_CHATDIAGNOSTICS.c_messageID: return new MSG_CHATDIAGNOSTICS();
                case MSG_CHATERROR.c_messageID: return new MSG_CHATERROR();
                case MSG_CHECKSUBSCRIPTION.c_messageID: return new MSG_CHECKSUBSCRIPTION();
                case MSG_CHECK_MAIL.c_messageID: return new MSG_CHECK_MAIL();
                case MSG_CLIENTMOVE.c_messageID: return new MSG_CLIENTMOVE();
                case MSG_CLIENTMOVESTATE.c_messageID: return new MSG_CLIENTMOVESTATE();
                case MSG_CLIENTNOTIFYTEXT.c_messageID: return new MSG_CLIENTNOTIFYTEXT();
                case MSG_CLIENTTUTORIALEVENT.c_messageID: return new MSG_CLIENTTUTORIALEVENT();
                case MSG_CLIENT_DISCONNECT.c_messageID: return new MSG_CLIENT_DISCONNECT();
                case MSG_CLIENT_ERROR.c_messageID: return new MSG_CLIENT_ERROR();
                case MSG_CLIENT_PROCESS_TERMINATED.c_messageID: return new MSG_CLIENT_PROCESS_TERMINATED();
                case MSG_COMBINEINVENTORYITEMS.c_messageID: return new MSG_COMBINEINVENTORYITEMS();
                case MSG_COMMAND.c_messageID: return new MSG_COMMAND();
                case MSG_COMMANDRESULT.c_messageID: return new MSG_COMMANDRESULT();
                case MSG_COMPANIONEFFECTS.c_messageID: return new MSG_COMPANIONEFFECTS();
                case MSG_CORE_EMOTE.c_messageID: return new MSG_CORE_EMOTE();
                case MSG_CREATECHANNELRESPONSE.c_messageID: return new MSG_CREATECHANNELRESPONSE();
                case MSG_CREATE_SESSION.c_messageID: return new MSG_CREATE_SESSION();
                case MSG_CSRBANKITEMS.c_messageID: return new MSG_CSRBANKITEMS();
                case MSG_CSRBANKITEMSDONE.c_messageID: return new MSG_CSRBANKITEMSDONE();
                case MSG_CSREDITCHARACTER.c_messageID: return new MSG_CSREDITCHARACTER();
                case MSG_CSREDITCHARACTERFAILED.c_messageID: return new MSG_CSREDITCHARACTERFAILED();
                case MSG_CSRFINISHEDHOUSE.c_messageID: return new MSG_CSRFINISHEDHOUSE();
                case MSG_CSRSEARCHLIST.c_messageID: return new MSG_CSRSEARCHLIST();
                case MSG_CSR_MAIL_DATA.c_messageID: return new MSG_CSR_MAIL_DATA();
                case MSG_CSR_RECEIVE_GIFTS.c_messageID: return new MSG_CSR_RECEIVE_GIFTS();
                case MSG_DEBUGDELETEALLOBJECTS.c_messageID: return new MSG_DEBUGDELETEALLOBJECTS();
                case MSG_DELETEOBJECT.c_messageID: return new MSG_DELETEOBJECT();
                case MSG_DELETE_GIFT.c_messageID: return new MSG_DELETE_GIFT();
                case MSG_DIRECTEDCHAT.c_messageID: return new MSG_DIRECTEDCHAT();
                case MSG_DIRECTEDCHATBYNAMERESPONSE.c_messageID: return new MSG_DIRECTEDCHATBYNAMERESPONSE();
                case MSG_DIRECTEDCHATFAIL.c_messageID: return new MSG_DIRECTEDCHATFAIL();
                case MSG_DIRECTEDQUICKCHAT.c_messageID: return new MSG_DIRECTEDQUICKCHAT();
                case MSG_DIRECTEDQUICKCHATEXT.c_messageID: return new MSG_DIRECTEDQUICKCHATEXT();
                case MSG_DISCONNECT_AFK.c_messageID: return new MSG_DISCONNECT_AFK();
                case MSG_DOWNLOADBROWSER.c_messageID: return new MSG_DOWNLOADBROWSER();
                case MSG_DOWNLOADPACKAGE.c_messageID: return new MSG_DOWNLOADPACKAGE();
                case MSG_DOWNLOADPACKAGEELEMENT.c_messageID: return new MSG_DOWNLOADPACKAGEELEMENT();
                case MSG_DYNAMODBEHAVIOR_UPDATEMODS.c_messageID: return new MSG_DYNAMODBEHAVIOR_UPDATEMODS();
                case MSG_DYNAMODDUMP.c_messageID: return new MSG_DYNAMODDUMP();
                case MSG_ENTERSTATE.c_messageID: return new MSG_ENTERSTATE();
                case MSG_EQUIPITEM.c_messageID: return new MSG_EQUIPITEM();
                case MSG_EQUIPMENTBEHAVIOR_EQUIPITEM.c_messageID: return new MSG_EQUIPMENTBEHAVIOR_EQUIPITEM();
                case MSG_EQUIPMENTBEHAVIOR_PUBLICEQUIPITEM.c_messageID: return new MSG_EQUIPMENTBEHAVIOR_PUBLICEQUIPITEM();
                case MSG_EQUIPMENTBEHAVIOR_PUBLICUNEQUIPITEM.c_messageID: return new MSG_EQUIPMENTBEHAVIOR_PUBLICUNEQUIPITEM();
                case MSG_EQUIPMENTBEHAVIOR_UNEQUIPITEM.c_messageID: return new MSG_EQUIPMENTBEHAVIOR_UNEQUIPITEM();
                case MSG_FEEDINVENTORYITEM.c_messageID: return new MSG_FEEDINVENTORYITEM();
                case MSG_FIND_SESSIONS.c_messageID: return new MSG_FIND_SESSIONS();
                case MSG_FIND_SESSION_PLAYERS.c_messageID: return new MSG_FIND_SESSION_PLAYERS();
                case MSG_GENERICGAME.c_messageID: return new MSG_GENERICGAME();
                case MSG_GETLADDER.c_messageID: return new MSG_GETLADDER();
                case MSG_GET_RANKINGS.c_messageID: return new MSG_GET_RANKINGS();
                case MSG_GIFT_REDEEMED.c_messageID: return new MSG_GIFT_REDEEMED();
                case MSG_GOTOPLAYER.c_messageID: return new MSG_GOTOPLAYER();
                case MSG_GOTOPLAYERRESP.c_messageID: return new MSG_GOTOPLAYERRESP();
                case MSG_HARASSMENTREPORT.c_messageID: return new MSG_HARASSMENTREPORT();
                case MSG_IGNOREADD.c_messageID: return new MSG_IGNOREADD();
                case MSG_IGNOREDROP.c_messageID: return new MSG_IGNOREDROP();
                case MSG_IGNORELIST.c_messageID: return new MSG_IGNORELIST();
                case MSG_INTERACTOBJECT.c_messageID: return new MSG_INTERACTOBJECT();
                case MSG_INTERACTOPTION.c_messageID: return new MSG_INTERACTOPTION();
                case MSG_INVENTORYBEHAVIOR_ADDITEM.c_messageID: return new MSG_INVENTORYBEHAVIOR_ADDITEM();
                case MSG_INVENTORYBEHAVIOR_REMOVEITEM.c_messageID: return new MSG_INVENTORYBEHAVIOR_REMOVEITEM();
                case MSG_INVENTORYBEHAVIOR_TRADEITEM.c_messageID: return new MSG_INVENTORYBEHAVIOR_TRADEITEM();
                case MSG_INVITEFRIEND.c_messageID: return new MSG_INVITEFRIEND();
                case MSG_INVITE_RESPONSE.c_messageID: return new MSG_INVITE_RESPONSE();
                case MSG_JOINCHANNELRESPONSE.c_messageID: return new MSG_JOINCHANNELRESPONSE();
                case MSG_JOIN_SESSION.c_messageID: return new MSG_JOIN_SESSION();
                case MSG_JUMP.c_messageID: return new MSG_JUMP();
                case MSG_KILL_CLIENT_PROCESS.c_messageID: return new MSG_KILL_CLIENT_PROCESS();
                case MSG_LADDER.c_messageID: return new MSG_LADDER();
                case MSG_LEAVECHANNELRESPONSE.c_messageID: return new MSG_LEAVECHANNELRESPONSE();
                case MSG_LEAVEHOUSINGLOT.c_messageID: return new MSG_LEAVEHOUSINGLOT();
                case MSG_LEAVESERVICERANGE.c_messageID: return new MSG_LEAVESERVICERANGE();
                case MSG_LEAVESTATE.c_messageID: return new MSG_LEAVESTATE();
                case MSG_LOADSAVEOBJECTS.c_messageID: return new MSG_LOADSAVEOBJECTS();
                case MSG_LOGINCOMPLETE.c_messageID: return new MSG_LOGINCOMPLETE();
                case MSG_MAIL_DATA.c_messageID: return new MSG_MAIL_DATA();
                case MSG_MARK_LOCATION.c_messageID: return new MSG_MARK_LOCATION();
                case MSG_MARK_LOCATION_RESPONSE.c_messageID: return new MSG_MARK_LOCATION_RESPONSE();
                case MSG_MATCHAWARD.c_messageID: return new MSG_MATCHAWARD();
                case MSG_MATCHINVITE.c_messageID: return new MSG_MATCHINVITE();
                case MSG_MATCHMAKERUPDATE.c_messageID: return new MSG_MATCHMAKERUPDATE();
                case MSG_MATCHREADY.c_messageID: return new MSG_MATCHREADY();
                case MSG_MATCHRESULT.c_messageID: return new MSG_MATCHRESULT();
                case MSG_MESSAGE_PROCESS.c_messageID: return new MSG_MESSAGE_PROCESS();
                case MSG_MOVECORRECTION.c_messageID: return new MSG_MOVECORRECTION();
                case MSG_MOVESTATE.c_messageID: return new MSG_MOVESTATE();
                case MSG_MUTE.c_messageID: return new MSG_MUTE();
                case MSG_MUTE_RSP.c_messageID: return new MSG_MUTE_RSP();
                case MSG_NEWOBJECT.c_messageID: return new MSG_NEWOBJECT();
                case MSG_NEWSYSSTATS.c_messageID: return new MSG_NEWSYSSTATS();
                case MSG_NEWTICKCNT.c_messageID: return new MSG_NEWTICKCNT();
                case MSG_NEWTOURNEYREWARDS.c_messageID: return new MSG_NEWTOURNEYREWARDS();
                case MSG_NEW_MAIL.c_messageID: return new MSG_NEW_MAIL();
                case MSG_NOTIFYCHANNELINSTANCE.c_messageID: return new MSG_NOTIFYCHANNELINSTANCE();
                case MSG_NOTIFY_GIFT.c_messageID: return new MSG_NOTIFY_GIFT();
                case MSG_NOTMUTED.c_messageID: return new MSG_NOTMUTED();
                case MSG_NOT_AFK.c_messageID: return new MSG_NOT_AFK();
                case MSG_NPCSPEECH.c_messageID: return new MSG_NPCSPEECH();
                case MSG_OBJECT_INFO_QUERY.c_messageID: return new MSG_OBJECT_INFO_QUERY();
                case MSG_PARTYDISBAND.c_messageID: return new MSG_PARTYDISBAND();
                case MSG_PARTYJOINFAILED.c_messageID: return new MSG_PARTYJOINFAILED();
                case MSG_PARTYJOINNOTIFICATION.c_messageID: return new MSG_PARTYJOINNOTIFICATION();
                case MSG_PARTYLEAVE.c_messageID: return new MSG_PARTYLEAVE();
                case MSG_PARTYLEAVENOTIFICATION.c_messageID: return new MSG_PARTYLEAVENOTIFICATION();
                case MSG_PARTYLEVELUP.c_messageID: return new MSG_PARTYLEVELUP();
                case MSG_PARTYLEVELUPUPDATE.c_messageID: return new MSG_PARTYLEVELUPUPDATE();
                case MSG_PARTYMULTIPLAYERMOUNTEQUIP.c_messageID: return new MSG_PARTYMULTIPLAYERMOUNTEQUIP();
                case MSG_PARTYMULTIPLAYERMOUNTEQUIPUPDATE.c_messageID: return new MSG_PARTYMULTIPLAYERMOUNTEQUIPUPDATE();
                case MSG_PARTYMULTIPLAYERMOUNTJOIN.c_messageID: return new MSG_PARTYMULTIPLAYERMOUNTJOIN();
                case MSG_PARTYMULTIPLAYERMOUNTJOINUPDATE.c_messageID: return new MSG_PARTYMULTIPLAYERMOUNTJOINUPDATE();
                case MSG_PARTYREQUESTACCEPT.c_messageID: return new MSG_PARTYREQUESTACCEPT();
                case MSG_PARTYREQUESTDECLINE.c_messageID: return new MSG_PARTYREQUESTDECLINE();
                case MSG_PARTYREQUESTINVITE.c_messageID: return new MSG_PARTYREQUESTINVITE();
                case MSG_PARTYREQUESTJOIN.c_messageID: return new MSG_PARTYREQUESTJOIN();
                case MSG_PARTYREQUESTMEMBERZONES.c_messageID: return new MSG_PARTYREQUESTMEMBERZONES();
                case MSG_PARTYREQUESTRESPONSE.c_messageID: return new MSG_PARTYREQUESTRESPONSE();
                case MSG_PARTYREQUESTTIMEOUT.c_messageID: return new MSG_PARTYREQUESTTIMEOUT();
                case MSG_PARTYSUBMITMEMBERZONES.c_messageID: return new MSG_PARTYSUBMITMEMBERZONES();
                case MSG_PARTYUPDATE.c_messageID: return new MSG_PARTYUPDATE();
                case MSG_PARTYZONEREQUEST.c_messageID: return new MSG_PARTYZONEREQUEST();
                case MSG_PARTYZONEREQUESTRESPONSE.c_messageID: return new MSG_PARTYZONEREQUESTRESPONSE();
                case MSG_PICKUPOBJECT.c_messageID: return new MSG_PICKUPOBJECT();
                case MSG_PLACEOBJECT.c_messageID: return new MSG_PLACEOBJECT();
                case MSG_PLAYCINEMATIC.c_messageID: return new MSG_PLAYCINEMATIC();
                case MSG_PLAYERBLACKBALLEDALERT.c_messageID: return new MSG_PLAYERBLACKBALLEDALERT();
                case MSG_PLAYERREADYACK.c_messageID: return new MSG_PLAYERREADYACK();
                case MSG_PLAYSOUND.c_messageID: return new MSG_PLAYSOUND();
                case MSG_POSTZONEEVENTFROMCLIENT.c_messageID: return new MSG_POSTZONEEVENTFROMCLIENT();
                case MSG_PREVIEW_ISLAND.c_messageID: return new MSG_PREVIEW_ISLAND();
                case MSG_PVPUPDATEINFO.c_messageID: return new MSG_PVPUPDATEINFO();
                case MSG_QUERY_LOGOUT.c_messageID: return new MSG_QUERY_LOGOUT();
                case MSG_RADIALCHAT.c_messageID: return new MSG_RADIALCHAT();
                case MSG_RADIALQUICKCHAT.c_messageID: return new MSG_RADIALQUICKCHAT();
                case MSG_RADIALQUICKCHATEXT.c_messageID: return new MSG_RADIALQUICKCHATEXT();
                case MSG_RADIALZONECLUSTERQUICKCHAT.c_messageID: return new MSG_RADIALZONECLUSTERQUICKCHAT();
                case MSG_RANKING.c_messageID: return new MSG_RANKING();
                case MSG_REALM_INFO_QUERY.c_messageID: return new MSG_REALM_INFO_QUERY();
                case MSG_RECALL_LOCATION.c_messageID: return new MSG_RECALL_LOCATION();
                case MSG_RECEIVE_GIFTS.c_messageID: return new MSG_RECEIVE_GIFTS();
                case MSG_RECEIVE_PROMOTIONS.c_messageID: return new MSG_RECEIVE_PROMOTIONS();
                case MSG_REDEEM_GIFT.c_messageID: return new MSG_REDEEM_GIFT();
                case MSG_REDEEM_MAIL_GIFT.c_messageID: return new MSG_REDEEM_MAIL_GIFT();
                case MSG_REDEEM_MAIL_GIFT_RESPONSE.c_messageID: return new MSG_REDEEM_MAIL_GIFT_RESPONSE();
                case MSG_RELEASEDELAY.c_messageID: return new MSG_RELEASEDELAY();
                case MSG_RELOADTEMPLATEDIR.c_messageID: return new MSG_RELOADTEMPLATEDIR();
                case MSG_REMOVEDSHOPPER.c_messageID: return new MSG_REMOVEDSHOPPER();
                case MSG_REMOVEEFFECT.c_messageID: return new MSG_REMOVEEFFECT();
                case MSG_REMOVEITEMREQUEST.c_messageID: return new MSG_REMOVEITEMREQUEST();
                case MSG_REMOVEOBJECT.c_messageID: return new MSG_REMOVEOBJECT();
                case MSG_REMOVEPARTICLE.c_messageID: return new MSG_REMOVEPARTICLE();
                case MSG_REMOVEZONETIMER.c_messageID: return new MSG_REMOVEZONETIMER();
                case MSG_REPORTADTAKEOVER.c_messageID: return new MSG_REPORTADTAKEOVER();
                case MSG_REQASKSERVER.c_messageID: return new MSG_REQASKSERVER();
                case MSG_REQCHATDIAGNOSTICS.c_messageID: return new MSG_REQCHATDIAGNOSTICS();
                case MSG_REQUESTADVANCECHANNELINSTANCE.c_messageID: return new MSG_REQUESTADVANCECHANNELINSTANCE();
                case MSG_REQUESTCHATCODE.c_messageID: return new MSG_REQUESTCHATCODE();
                case MSG_REQUESTCREATECHANNEL.c_messageID: return new MSG_REQUESTCREATECHANNEL();
                case MSG_REQUESTDIRECTEDCHAT.c_messageID: return new MSG_REQUESTDIRECTEDCHAT();
                case MSG_REQUESTDIRECTEDCHATBYNAME.c_messageID: return new MSG_REQUESTDIRECTEDCHATBYNAME();
                case MSG_REQUESTDIRECTEDQUICKCHAT.c_messageID: return new MSG_REQUESTDIRECTEDQUICKCHAT();
                case MSG_REQUESTDIRECTEDQUICKCHATEXT.c_messageID: return new MSG_REQUESTDIRECTEDQUICKCHATEXT();
                case MSG_REQUESTJOINCHANNEL.c_messageID: return new MSG_REQUESTJOINCHANNEL();
                case MSG_REQUESTJOINCHANNELBYNAME.c_messageID: return new MSG_REQUESTJOINCHANNELBYNAME();
                case MSG_REQUESTLEAVECHANNEL.c_messageID: return new MSG_REQUESTLEAVECHANNEL();
                case MSG_REQUESTLEAVECHANNELBYNAME.c_messageID: return new MSG_REQUESTLEAVECHANNELBYNAME();
                case MSG_REQUESTMAXFRIENDS.c_messageID: return new MSG_REQUESTMAXFRIENDS();
                case MSG_REQUESTRADIALCHAT.c_messageID: return new MSG_REQUESTRADIALCHAT();
                case MSG_REQUESTRADIALFRIENDCHAT.c_messageID: return new MSG_REQUESTRADIALFRIENDCHAT();
                case MSG_REQUESTRADIALFRIENDQUICKCHAT.c_messageID: return new MSG_REQUESTRADIALFRIENDQUICKCHAT();
                case MSG_REQUESTRADIALOWNERCHAT.c_messageID: return new MSG_REQUESTRADIALOWNERCHAT();
                case MSG_REQUESTRADIALQUICKCHAT.c_messageID: return new MSG_REQUESTRADIALQUICKCHAT();
                case MSG_REQUESTRADIALQUICKCHATEXT.c_messageID: return new MSG_REQUESTRADIALQUICKCHATEXT();
                case MSG_REQUESTSESSION.c_messageID: return new MSG_REQUESTSESSION();
                case MSG_REQUESTZONECLUSTERQUICKCHAT.c_messageID: return new MSG_REQUESTZONECLUSTERQUICKCHAT();
                case MSG_REQUEST_GIFTS.c_messageID: return new MSG_REQUEST_GIFTS();
                case MSG_REQUEST_PROMOTIONS.c_messageID: return new MSG_REQUEST_PROMOTIONS();
                case MSG_RESTORECHAR_RSP.c_messageID: return new MSG_RESTORECHAR_RSP();
                case MSG_RETRIEVE_MAIL.c_messageID: return new MSG_RETRIEVE_MAIL();
                case MSG_RETRYTELEPORT.c_messageID: return new MSG_RETRYTELEPORT();
                case MSG_SCRIPT.c_messageID: return new MSG_SCRIPT();
                case MSG_SELECT_BADGE.c_messageID: return new MSG_SELECT_BADGE();
                case MSG_SENDCHATCODE.c_messageID: return new MSG_SENDCHATCODE();
                case MSG_SENDINTERACTOPTIONS.c_messageID: return new MSG_SENDINTERACTOPTIONS();
                case MSG_SENDTEXT.c_messageID: return new MSG_SENDTEXT();
                case MSG_SERVERMOVE.c_messageID: return new MSG_SERVERMOVE();
                case MSG_SERVERSHUTDOWN.c_messageID: return new MSG_SERVERSHUTDOWN();
                case MSG_SERVERTELEPORT.c_messageID: return new MSG_SERVERTELEPORT();
                case MSG_SERVERTRANSFER.c_messageID: return new MSG_SERVERTRANSFER();
                case MSG_SERVERTUTORIALCOMMAND.c_messageID: return new MSG_SERVERTUTORIALCOMMAND();
                case MSG_SERVERERROR.c_messageID: return new MSG_SERVERERROR();
                case MSG_SERVER_PROCESS_RUNNING.c_messageID: return new MSG_SERVER_PROCESS_RUNNING();
                case MSG_SESSION.c_messageID: return new MSG_SESSION();
                case MSG_SESSION_ERROR.c_messageID: return new MSG_SESSION_ERROR();
                case MSG_SESSION_PLAYER.c_messageID: return new MSG_SESSION_PLAYER();
                case MSG_SETHOUSECUSTOMIZATION.c_messageID: return new MSG_SETHOUSECUSTOMIZATION();
                case MSG_SPLITQUANTITY.c_messageID: return new MSG_SPLITQUANTITY();
                case MSG_STARTSTAGEDCINEMATIC.c_messageID: return new MSG_STARTSTAGEDCINEMATIC();
                case MSG_START_CLIENT_PROCESS.c_messageID: return new MSG_START_CLIENT_PROCESS();
                case MSG_START_SERVER_PROCESS.c_messageID: return new MSG_START_SERVER_PROCESS();
                case MSG_SUBOPTIMAL_BRACKET_RESPONSE.c_messageID: return new MSG_SUBOPTIMAL_BRACKET_RESPONSE();
                case MSG_TELEPORT_TO_GAME_ZONE.c_messageID: return new MSG_TELEPORT_TO_GAME_ZONE();
                case MSG_TOURNAMENTUPDATE.c_messageID: return new MSG_TOURNAMENTUPDATE();
                case MSG_TRANSFERCHAR_RSP.c_messageID: return new MSG_TRANSFERCHAR_RSP();
                case MSG_TRANSFER_INSTANCE.c_messageID: return new MSG_TRANSFER_INSTANCE();
                case MSG_TRANSFER_REALMS.c_messageID: return new MSG_TRANSFER_REALMS();
                case MSG_TRASHINVENTORYITEM.c_messageID: return new MSG_TRASHINVENTORYITEM();
                case MSG_TUTORIALS.c_messageID: return new MSG_TUTORIALS();
                case MSG_UPDATEOBJECT.c_messageID: return new MSG_UPDATEOBJECT();
                case MSG_UPDATEQUANTITY.c_messageID: return new MSG_UPDATEQUANTITY();
                case MSG_UPDATEZONECOUNTER.c_messageID: return new MSG_UPDATEZONECOUNTER();
                case MSG_UPDATEZONETIMER.c_messageID: return new MSG_UPDATEZONETIMER();
                case MSG_USECHATCODE.c_messageID: return new MSG_USECHATCODE();
                case MSG_CSRVIEWACCOUNT.c_messageID: return new MSG_CSRVIEWACCOUNT();
                case MSG_WIZBANG.c_messageID: return new MSG_WIZBANG();
                case MSG_ZOMBIE_PLAYER.c_messageID: return new MSG_ZOMBIE_PLAYER();
                case MSG_ZONEEVENTTIMEREXPIRED.c_messageID: return new MSG_ZONEEVENTTIMEREXPIRED();
                case MSG_ZONETRANSFER.c_messageID: return new MSG_ZONETRANSFER();
                case MSG_ZONETRANSFERACK.c_messageID: return new MSG_ZONETRANSFERACK();
                case MSG_ZONETRANSFERNACK.c_messageID: return new MSG_ZONETRANSFERNACK();
                case MSG_ZONETRANSFERREQUEST.c_messageID: return new MSG_ZONETRANSFERREQUEST();
            }
            throw new ArgumentOutOfRangeException(nameof(id));
        }
        
        public interface Handler
        {
            bool NetHandleADCLICKTHROUGH(MSG_ADCLICKTHROUGH msg) => false;
            bool NetHandleAddEffect(MSG_ADDEFFECT msg) => false;
            bool NetHandleAddItemRequest(MSG_ADDITEMREQUEST msg) => false;
            bool NetHandleAddObject(MSG_ADDOBJECT msg) => false;
            bool NetHandleAddParticle(MSG_ADDPARTICLE msg) => false;
            bool NetHandleAddZoneTimer(MSG_ADDZONETIMER msg) => false;
            bool NetHandleAttach(MSG_ATTACH msg) => false;
            bool NetHandleAttachFailed(MSG_ATTACHFAILED msg) => false;
            bool NetHandleAuctionHouseUpdate(MSG_AUCTIONHOUSEUPDATE msg) => false;
            bool NetHandleBadges(MSG_BADGES msg) => false;
            bool NetHandleBan_Rsp(MSG_BAN_RSP msg) => false;
            bool NetHandleBestFriend(MSG_BESTFRIEND msg) => false;
            bool NetHandleBlackball(MSG_BLACKBALL msg) => false;
            bool NetHandleBuddyDrop(MSG_BUDDYDROP msg) => false;
            bool NetHandleBuddyEntry(MSG_BUDDYENTRY msg) => false;
            bool NetHandleBuddyListComplete(MSG_BUDDYLISTCOMPLETE msg) => false;
            bool NetHandleBuddyRequestAccept(MSG_BUDDYREQUESTACCEPT msg) => false;
            bool NetHandleBuddyRequestAcceptFwd(MSG_BUDDYREQUESTACCEPTFWD msg) => false;
            bool NetHandleBuddyRequestAdd(MSG_BUDDYREQUESTADD msg) => false;
            bool NetHandleBuddyRequestAddFwd(MSG_BUDDYREQUESTADDFWD msg) => false;
            bool NetHandleBuddyRequestDeny(MSG_BUDDYREQUESTDENY msg) => false;
            bool NetHandleBuddyRequestDenyFwd(MSG_BUDDYREQUESTDENYFWD msg) => false;
            bool NetHandleBuddyRequestDrop(MSG_BUDDYREQUESTDROP msg) => false;
            bool NetHandleBuddyRequestError(MSG_BUDDYREQUESTERROR msg) => false;
            bool NetHandleBuddyRequestList(MSG_BUDDYREQUESTLIST msg) => false;
            bool NetHandleBuddyStats(MSG_BUDDYSTATS msg) => false;
            bool NetHandleBuddyStatusUpdate(MSG_BUDDYSTATUSUPDATE msg) => false;
            bool NetHandleBugReport(MSG_BUGREPORT msg) => false;
            bool NetHandleBugSubmitResponse(MSG_BUGSUBMITRESPONSE msg) => false;
            bool NetHandleChannelChat(MSG_CHANNELCHAT msg) => false;
            bool NetHandleChannelSubscription(MSG_CHANNELSUBSCRIPTION msg) => false;
            bool NetHandleChatDiagnostics(MSG_CHATDIAGNOSTICS msg) => false;
            bool NetHandleChatError(MSG_CHATERROR msg) => false;
            bool NetHandleCheckSubscription(MSG_CHECKSUBSCRIPTION msg) => false;
            bool NetHandleCheckMail(MSG_CHECK_MAIL msg) => false;
            bool NetHandleClientMove(MSG_CLIENTMOVE msg) => false;
            bool NetHandleClientMoveState(MSG_CLIENTMOVESTATE msg) => false;
            bool NetHandleClientNotifyText(MSG_CLIENTNOTIFYTEXT msg) => false;
            bool NetHandleClientTutorialEvent(MSG_CLIENTTUTORIALEVENT msg) => false;
            bool NetHandleClient_Disconnect(MSG_CLIENT_DISCONNECT msg) => false;
            bool NetHandleClient_Error(MSG_CLIENT_ERROR msg) => false;
            bool NetHandleCLIENT_PROCESS_TERMINATED(MSG_CLIENT_PROCESS_TERMINATED msg) => false;
            bool NetHandleCombineInventoryItems(MSG_COMBINEINVENTORYITEMS msg) => false;
            bool NetHandleCommand(MSG_COMMAND msg) => false;
            bool NetHandleCommandResult(MSG_COMMANDRESULT msg) => false;
            bool NetHandleCompanionEffects(MSG_COMPANIONEFFECTS msg) => false;
            bool NetHandleCoreEmote(MSG_CORE_EMOTE msg) => false;
            bool NetHandleCreateChannelResponse(MSG_CREATECHANNELRESPONSE msg) => false;
            bool NetHandleCREATE_SESSION(MSG_CREATE_SESSION msg) => false;
            bool NetHandleCSRBankItems(MSG_CSRBANKITEMS msg) => false;
            bool NetHandleCSRBankItemsDone(MSG_CSRBANKITEMSDONE msg) => false;
            bool NetHandleCSREditCharacter(MSG_CSREDITCHARACTER msg) => false;
            bool NetHandleCSREditCharacterFailed(MSG_CSREDITCHARACTERFAILED msg) => false;
            bool NetHandleCSRFinishedHouse(MSG_CSRFINISHEDHOUSE msg) => false;
            bool NetHandleCSRSearchList(MSG_CSRSEARCHLIST msg) => false;
            bool NetHandleCSRMailData(MSG_CSR_MAIL_DATA msg) => false;
            bool NetHandleCSRReceiveGifts(MSG_CSR_RECEIVE_GIFTS msg) => false;
            bool NetHandleDEBUGDELETEALLOBJECTS(MSG_DEBUGDELETEALLOBJECTS msg) => false;
            bool NetHandleDeleteObject(MSG_DELETEOBJECT msg) => false;
            bool NetHandleDeleteGift(MSG_DELETE_GIFT msg) => false;
            bool NetHandleDirectedChat(MSG_DIRECTEDCHAT msg) => false;
            bool NetHandleDirectedChatByNameResponse(MSG_DIRECTEDCHATBYNAMERESPONSE msg) => false;
            bool NetHandleDirectedChatFail(MSG_DIRECTEDCHATFAIL msg) => false;
            bool NetHandleDirectedQuickChat(MSG_DIRECTEDQUICKCHAT msg) => false;
            bool NetHandleDirectedQuickChatExt(MSG_DIRECTEDQUICKCHATEXT msg) => false;
            bool NetHandleDisconnect_Afk(MSG_DISCONNECT_AFK msg) => false;
            bool NetHandleDownloadBrowser(MSG_DOWNLOADBROWSER msg) => false;
            bool NetHandleDownloadPackage(MSG_DOWNLOADPACKAGE msg) => false;
            bool NetHandleDownloadPackageElement(MSG_DOWNLOADPACKAGEELEMENT msg) => false;
            bool NetHandleDynaModBehavior_UpdateMods(MSG_DYNAMODBEHAVIOR_UPDATEMODS msg) => false;
            bool NetHandleDynaModDump(MSG_DYNAMODDUMP msg) => false;
            bool NetHandleEnterState(MSG_ENTERSTATE msg) => false;
            bool NetHandleEquipItem(MSG_EQUIPITEM msg) => false;
            bool NetHandleEquipmentBehavior_EquipItem(MSG_EQUIPMENTBEHAVIOR_EQUIPITEM msg) => false;
            bool NetHandleEquipmentBehavior_PublicEquipItem(MSG_EQUIPMENTBEHAVIOR_PUBLICEQUIPITEM msg) => false;
            bool NetHandleEquipmentBehavior_PublicUnequipItem(MSG_EQUIPMENTBEHAVIOR_PUBLICUNEQUIPITEM msg) => false;
            bool NetHandleEquipmentBehavior_UnequipItem(MSG_EQUIPMENTBEHAVIOR_UNEQUIPITEM msg) => false;
            bool NetHandleFeedInventoryItem(MSG_FEEDINVENTORYITEM msg) => false;
            bool NetHandleFIND_SESSIONS(MSG_FIND_SESSIONS msg) => false;
            bool NetHandleFIND_SESSION_PLAYERS(MSG_FIND_SESSION_PLAYERS msg) => false;
            bool NetHandleGenericGame(MSG_GENERICGAME msg) => false;
            bool NetHandleGetLadder(MSG_GETLADDER msg) => false;
            bool NetHandleGET_RANKINGS(MSG_GET_RANKINGS msg) => false;
            bool NetHandleGiftRedeemed(MSG_GIFT_REDEEMED msg) => false;
            bool NetHandleGotoPlayer(MSG_GOTOPLAYER msg) => false;
            bool NetHandleGotoPlayerResponse(MSG_GOTOPLAYERRESP msg) => false;
            bool NetHandleHarassmentReport(MSG_HARASSMENTREPORT msg) => false;
            bool NetHandleIgnoreAdd(MSG_IGNOREADD msg) => false;
            bool NetHandleIgnoreDrop(MSG_IGNOREDROP msg) => false;
            bool NetHandleIgnoreList(MSG_IGNORELIST msg) => false;
            bool NetHandleInteractObject(MSG_INTERACTOBJECT msg) => false;
            bool NetHandleInteractOption(MSG_INTERACTOPTION msg) => false;
            bool NetHandleINVENTORYBEHAVIOR_ADDITEM(MSG_INVENTORYBEHAVIOR_ADDITEM msg) => false;
            bool NetHandleINVENTORYBEHAVIOR_REMOVEITEM(MSG_INVENTORYBEHAVIOR_REMOVEITEM msg) => false;
            bool NetHandleINVENTORYBEHAVIOR_TRADEITEM(MSG_INVENTORYBEHAVIOR_TRADEITEM msg) => false;
            bool NetHandleInviteFriend(MSG_INVITEFRIEND msg) => false;
            bool NetHandleInviteResponse(MSG_INVITE_RESPONSE msg) => false;
            bool NetHandleJoinChannelResponse(MSG_JOINCHANNELRESPONSE msg) => false;
            bool NetHandleJOIN_SESSION(MSG_JOIN_SESSION msg) => false;
            bool NetHandleJump(MSG_JUMP msg) => false;
            bool NetHandleKILL_CLIENT_PROCESS(MSG_KILL_CLIENT_PROCESS msg) => false;
            bool NetHandleLADDER(MSG_LADDER msg) => false;
            bool NetHandleLeaveChannelResponse(MSG_LEAVECHANNELRESPONSE msg) => false;
            bool NetHandleLeaveHousingLot(MSG_LEAVEHOUSINGLOT msg) => false;
            bool NetHandleLeaveServiceRange(MSG_LEAVESERVICERANGE msg) => false;
            bool NetHandleLeaveState(MSG_LEAVESTATE msg) => false;
            bool NetHandleLOADSAVEOBJECTS(MSG_LOADSAVEOBJECTS msg) => false;
            bool NetHandleLoginComplete(MSG_LOGINCOMPLETE msg) => false;
            bool NetHandleMailData(MSG_MAIL_DATA msg) => false;
            bool NetHandleMarkLocation(MSG_MARK_LOCATION msg) => false;
            bool NetHandleMarkLocationResponse(MSG_MARK_LOCATION_RESPONSE msg) => false;
            bool NetHandleMatchAward(MSG_MATCHAWARD msg) => false;
            bool NetHandleMatchInvite(MSG_MATCHINVITE msg) => false;
            bool NetHandleMatchMakerUpdate(MSG_MATCHMAKERUPDATE msg) => false;
            bool NetHandleMatchReady(MSG_MATCHREADY msg) => false;
            bool NetHandleMatchResult(MSG_MATCHRESULT msg) => false;
            bool NetHandleMESSAGE_PROCESS(MSG_MESSAGE_PROCESS msg) => false;
            bool NetHandleMoveCorrection(MSG_MOVECORRECTION msg) => false;
            bool NetHandleMoveState(MSG_MOVESTATE msg) => false;
            bool NetHandleMute(MSG_MUTE msg) => false;
            bool NetHandleMute_Rsp(MSG_MUTE_RSP msg) => false;
            bool NetHandleNewObject(MSG_NEWOBJECT msg) => false;
            bool NetHandleNewSysStats(MSG_NEWSYSSTATS msg) => false;
            bool NetHandleNewTickCnt(MSG_NEWTICKCNT msg) => false;
            bool NetHandleNewTourneyRewards(MSG_NEWTOURNEYREWARDS msg) => false;
            bool NetHandleNewMail(MSG_NEW_MAIL msg) => false;
            bool NetHandleNotifyChannelInstance(MSG_NOTIFYCHANNELINSTANCE msg) => false;
            bool NetHandleNotifyGift(MSG_NOTIFY_GIFT msg) => false;
            bool NetHandleNotMuted(MSG_NOTMUTED msg) => false;
            bool NetHandleNot_Afk(MSG_NOT_AFK msg) => false;
            bool NetHandleNPCSpeech(MSG_NPCSPEECH msg) => false;
            bool NetHandleObjectInfoQuery(MSG_OBJECT_INFO_QUERY msg) => false;
            bool NetHandlePartyDisband(MSG_PARTYDISBAND msg) => false;
            bool NetHandlePartyJoinFailed(MSG_PARTYJOINFAILED msg) => false;
            bool NetHandlePartyJoinNotification(MSG_PARTYJOINNOTIFICATION msg) => false;
            bool NetHandlePartyLeave(MSG_PARTYLEAVE msg) => false;
            bool NetHandlePartyLeaveNotification(MSG_PARTYLEAVENOTIFICATION msg) => false;
            bool NetHandlePartyLevelUp(MSG_PARTYLEVELUP msg) => false;
            bool NetHandlePartyLevelUpUpdate(MSG_PARTYLEVELUPUPDATE msg) => false;
            bool NetHandlePartyMultiPlayerMountEquip(MSG_PARTYMULTIPLAYERMOUNTEQUIP msg) => false;
            bool NetHandlePartyMultiPlayerMountEquipUpdate(MSG_PARTYMULTIPLAYERMOUNTEQUIPUPDATE msg) => false;
            bool NetHandlePartyMultiPlayerMountJoin(MSG_PARTYMULTIPLAYERMOUNTJOIN msg) => false;
            bool NetHandlePartyMultiPlayerMountJoinUpdate(MSG_PARTYMULTIPLAYERMOUNTJOINUPDATE msg) => false;
            bool NetHandlePartyRequestAccept(MSG_PARTYREQUESTACCEPT msg) => false;
            bool NetHandlePartyRequestDecline(MSG_PARTYREQUESTDECLINE msg) => false;
            bool NetHandlePartyRequestInvite(MSG_PARTYREQUESTINVITE msg) => false;
            bool NetHandlePartyRequestJoin(MSG_PARTYREQUESTJOIN msg) => false;
            bool NetHandlePartyRequestMemberZones(MSG_PARTYREQUESTMEMBERZONES msg) => false;
            bool NetHandlePartyRequestResponse(MSG_PARTYREQUESTRESPONSE msg) => false;
            bool NetHandlePartyRequestTimeout(MSG_PARTYREQUESTTIMEOUT msg) => false;
            bool NetHandlePartySubmitMemberZones(MSG_PARTYSUBMITMEMBERZONES msg) => false;
            bool NetHandlePartyUpdate(MSG_PARTYUPDATE msg) => false;
            bool NetHandlePartyZoneRequest(MSG_PARTYZONEREQUEST msg) => false;
            bool NetHandlePartyZoneRequestResponse(MSG_PARTYZONEREQUESTRESPONSE msg) => false;
            bool NetHandlePickUpObject(MSG_PICKUPOBJECT msg) => false;
            bool NetHandlePlaceObject(MSG_PLACEOBJECT msg) => false;
            bool NetHandlePlayCinematic(MSG_PLAYCINEMATIC msg) => false;
            bool NetHandlePlayerBlackballedAlert(MSG_PLAYERBLACKBALLEDALERT msg) => false;
            bool NetHandlePlayerReadyAck(MSG_PLAYERREADYACK msg) => false;
            bool NetHandlePlaySound(MSG_PLAYSOUND msg) => false;
            bool NetHandlePostZoneEventFromClient(MSG_POSTZONEEVENTFROMCLIENT msg) => false;
            bool NetHandlePreviewIsland(MSG_PREVIEW_ISLAND msg) => false;
            bool NetHandlePvPUpdateInfo(MSG_PVPUPDATEINFO msg) => false;
            bool NetHandleQuery_Logout(MSG_QUERY_LOGOUT msg) => false;
            bool NetHandleRadialChat(MSG_RADIALCHAT msg) => false;
            bool NetHandleRadialQuickChat(MSG_RADIALQUICKCHAT msg) => false;
            bool NetHandleRadialQuickChatExt(MSG_RADIALQUICKCHATEXT msg) => false;
            bool NetHandleRadialZoneClusterQuickChat(MSG_RADIALZONECLUSTERQUICKCHAT msg) => false;
            bool NetHandleRANKING(MSG_RANKING msg) => false;
            bool NetHandleRealmInfoQuery(MSG_REALM_INFO_QUERY msg) => false;
            bool NetHandleRecallLocation(MSG_RECALL_LOCATION msg) => false;
            bool NetHandleReceiveGifts(MSG_RECEIVE_GIFTS msg) => false;
            bool NetHandleReceivePromotions(MSG_RECEIVE_PROMOTIONS msg) => false;
            bool NetHandleRedeemGift(MSG_REDEEM_GIFT msg) => false;
            bool NetHandleRedeemMailGift(MSG_REDEEM_MAIL_GIFT msg) => false;
            bool NetHandleRedeemMailGiftResponse(MSG_REDEEM_MAIL_GIFT_RESPONSE msg) => false;
            bool NetHandleReleaseDelay(MSG_RELEASEDELAY msg) => false;
            bool NetHandleReloadTemplateDir(MSG_RELOADTEMPLATEDIR msg) => false;
            bool NetHandleRemovedShopper(MSG_REMOVEDSHOPPER msg) => false;
            bool NetHandleRemoveEffect(MSG_REMOVEEFFECT msg) => false;
            bool NetHandleRemoveItemRequest(MSG_REMOVEITEMREQUEST msg) => false;
            bool NetHandleRemoveObject(MSG_REMOVEOBJECT msg) => false;
            bool NetHandleRemoveParticle(MSG_REMOVEPARTICLE msg) => false;
            bool NetHandleRemoveZoneTimer(MSG_REMOVEZONETIMER msg) => false;
            bool NetHandleReportAdTakeover(MSG_REPORTADTAKEOVER msg) => false;
            bool NetHandleReqAskServer(MSG_REQASKSERVER msg) => false;
            bool NetHandleReqChatDiagnostics(MSG_REQCHATDIAGNOSTICS msg) => false;
            bool NetHandleRequestAdvanceChannelInstance(MSG_REQUESTADVANCECHANNELINSTANCE msg) => false;
            bool NetHandleRequestChatCode(MSG_REQUESTCHATCODE msg) => false;
            bool NetHandleRequestCreateChannel(MSG_REQUESTCREATECHANNEL msg) => false;
            bool NetHandleRequestDirectedChat(MSG_REQUESTDIRECTEDCHAT msg) => false;
            bool NetHandleRequestDirectedChatByName(MSG_REQUESTDIRECTEDCHATBYNAME msg) => false;
            bool NetHandleRequestDirectedQuickChat(MSG_REQUESTDIRECTEDQUICKCHAT msg) => false;
            bool NetHandleRequestDirectedQuickChatExt(MSG_REQUESTDIRECTEDQUICKCHATEXT msg) => false;
            bool NetHandleRequestJoinChannel(MSG_REQUESTJOINCHANNEL msg) => false;
            bool NetHandleRequestJoinChannelByName(MSG_REQUESTJOINCHANNELBYNAME msg) => false;
            bool NetHandleRequestLeaveChannel(MSG_REQUESTLEAVECHANNEL msg) => false;
            bool NetHandleRequestLeaveChannelByName(MSG_REQUESTLEAVECHANNELBYNAME msg) => false;
            bool NetHandleRequestMaxFriends(MSG_REQUESTMAXFRIENDS msg) => false;
            bool NetHandleRequestRadialChat(MSG_REQUESTRADIALCHAT msg) => false;
            bool NetHandleRequestRadialFriendChat(MSG_REQUESTRADIALFRIENDCHAT msg) => false;
            bool NetHandleRequestRadialFriendQuickChat(MSG_REQUESTRADIALFRIENDQUICKCHAT msg) => false;
            bool NetHandleRequestRadialOwnerChat(MSG_REQUESTRADIALOWNERCHAT msg) => false;
            bool NetHandleRequestRadialQuickChat(MSG_REQUESTRADIALQUICKCHAT msg) => false;
            bool NetHandleRequestRadialQuickChatExt(MSG_REQUESTRADIALQUICKCHATEXT msg) => false;
            bool NetHandleRequestSession(MSG_REQUESTSESSION msg) => false;
            bool NetHandleRequestZoneClusterQuickChat(MSG_REQUESTZONECLUSTERQUICKCHAT msg) => false;
            bool NetHandleRequestGifts(MSG_REQUEST_GIFTS msg) => false;
            bool NetHandleRequestPromotions(MSG_REQUEST_PROMOTIONS msg) => false;
            bool NetHandleRestoreChar_Rsp(MSG_RESTORECHAR_RSP msg) => false;
            bool NetHandleRetrieveMail(MSG_RETRIEVE_MAIL msg) => false;
            bool NetHandleRetryTeleport(MSG_RETRYTELEPORT msg) => false;
            bool NetHandleScript(MSG_SCRIPT msg) => false;
            bool NetHandleSelect_Badge(MSG_SELECT_BADGE msg) => false;
            bool NetHandleSendChatCode(MSG_SENDCHATCODE msg) => false;
            bool NetHandleSendInteractOptions(MSG_SENDINTERACTOPTIONS msg) => false;
            bool NetHandleSendText(MSG_SENDTEXT msg) => false;
            bool NetHandleServerMove(MSG_SERVERMOVE msg) => false;
            bool NetHandleServerShutdown(MSG_SERVERSHUTDOWN msg) => false;
            bool NetHandleServerTeleport(MSG_SERVERTELEPORT msg) => false;
            bool NetHandleServerTransfer(MSG_SERVERTRANSFER msg) => false;
            bool NetHandleServerTutorialCommand(MSG_SERVERTUTORIALCOMMAND msg) => false;
            bool NetHandleServerError(MSG_SERVERERROR msg) => false;
            bool NetHandleSERVER_PROCESS_RUNNING(MSG_SERVER_PROCESS_RUNNING msg) => false;
            bool NetHandleSESSION(MSG_SESSION msg) => false;
            bool NetHandleSESSION_ERROR(MSG_SESSION_ERROR msg) => false;
            bool NetHandleSESSION_PLAYER(MSG_SESSION_PLAYER msg) => false;
            bool NetHandleSETHOUSECUSTOMIZATION(MSG_SETHOUSECUSTOMIZATION msg) => false;
            bool NetHandleSplitQuantity(MSG_SPLITQUANTITY msg) => false;
            bool NetHandleStartStagedCinematic(MSG_STARTSTAGEDCINEMATIC msg) => false;
            bool NetHandleSTART_CLIENT_PROCESS(MSG_START_CLIENT_PROCESS msg) => false;
            bool NetHandleSTART_SERVER_PROCESS(MSG_START_SERVER_PROCESS msg) => false;
            bool NetHandleSuboptimal_Bracket_Response(MSG_SUBOPTIMAL_BRACKET_RESPONSE msg) => false;
            bool NetHandleTeleportToGameZone(MSG_TELEPORT_TO_GAME_ZONE msg) => false;
            bool NetHandleTournamentUpdate(MSG_TOURNAMENTUPDATE msg) => false;
            bool NetHandleTransferChar_Rsp(MSG_TRANSFERCHAR_RSP msg) => false;
            bool NetHandleTransfer_Instance(MSG_TRANSFER_INSTANCE msg) => false;
            bool NetHandleTransfer_Realms(MSG_TRANSFER_REALMS msg) => false;
            bool NetHandleTrashInventoryItem(MSG_TRASHINVENTORYITEM msg) => false;
            bool NetHandleTutorials(MSG_TUTORIALS msg) => false;
            bool NetHandleUpdateObject(MSG_UPDATEOBJECT msg) => false;
            bool NetHandleUpdateQuantity(MSG_UPDATEQUANTITY msg) => false;
            bool NetHandleUpdateZoneCounter(MSG_UPDATEZONECOUNTER msg) => false;
            bool NetHandleUpdateZoneTimer(MSG_UPDATEZONETIMER msg) => false;
            bool NetHandleUseChatCode(MSG_USECHATCODE msg) => false;
            bool NetHandleCSRViewAccount(MSG_CSRVIEWACCOUNT msg) => false;
            bool NetHandleWizBang(MSG_WIZBANG msg) => false;
            bool NetHandleZombie_Player(MSG_ZOMBIE_PLAYER msg) => false;
            bool NetHandleZONEEVENTTIMEREXPIRED(MSG_ZONEEVENTTIMEREXPIRED msg) => false;
            bool NetHandleZoneTransfer(MSG_ZONETRANSFER msg) => false;
            bool NetHandleZoneTransferAck(MSG_ZONETRANSFERACK msg) => false;
            bool NetHandleZoneTransferNack(MSG_ZONETRANSFERNACK msg) => false;
            bool NetHandleZoneTransferRequest(MSG_ZONETRANSFERREQUEST msg) => false;
        }
    }
    public class LOGIN_7_Protocol: INetworkService
    {
        public const byte c_serviceID = 7;
        public byte GetID() => c_serviceID;
        
        public class MSG_CHARACTERINFO : INetworkMessage
        {
            public const byte c_messageID = 1;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("CharacterInfo", DMLType.STR)] public ByteString m_characterInfo;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_CHARACTERINFO>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_CHARACTERINFO>.Read(buf, this);
            }
        }
        public class MSG_CHARACTERLIST : INetworkMessage
        {
            public const byte c_messageID = 2;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("Error", DMLType.UINT)] public uint m_error;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_CHARACTERLIST>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_CHARACTERLIST>.Read(buf, this);
            }
        }
        public class MSG_CHARACTERSELECTED : INetworkMessage
        {
            public const byte c_messageID = 3;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("IP", DMLType.STR)] public ByteString m_IP;
            [DMLField("TCPPort", DMLType.INT)] public int m_TCPPort;
            [DMLField("UDPPort", DMLType.INT)] public int m_UDPPort;
            [DMLField("Key", DMLType.STR)] public ByteString m_key;
            [DMLField("UserID", DMLType.GID)] public GID m_userID;
            [DMLField("CharID", DMLType.GID)] public GID m_charID;
            [DMLField("ZoneID", DMLType.GID)] public GID m_zoneID;
            [DMLField("ZoneName", DMLType.STR)] public ByteString m_zoneName;
            [DMLField("Location", DMLType.STR)] public ByteString m_location;
            [DMLField("Slot", DMLType.INT)] public int m_slot;
            [DMLField("PrepPhase", DMLType.INT)] public int m_prepPhase;
            [DMLField("Error", DMLType.INT)] public int m_error;
            [DMLField("LoginServer", DMLType.STR)] public ByteString m_loginServer;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_CHARACTERSELECTED>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_CHARACTERSELECTED>.Read(buf, this);
            }
        }
        public class MSG_CREATECHARACTER : INetworkMessage
        {
            public const byte c_messageID = 4;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("CreationInfo", DMLType.STR)] public ByteString m_creationInfo;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_CREATECHARACTER>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_CREATECHARACTER>.Read(buf, this);
            }
        }
        public class MSG_CREATECHARACTERRESPONSE : INetworkMessage
        {
            public const byte c_messageID = 5;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("ErrorCode", DMLType.INT)] public int m_errorCode;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_CREATECHARACTERRESPONSE>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_CREATECHARACTERRESPONSE>.Read(buf, this);
            }
        }
        public class MSG_DELETECHARACTER : INetworkMessage
        {
            public const byte c_messageID = 6;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("CharID", DMLType.GID)] public GID m_charID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_DELETECHARACTER>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_DELETECHARACTER>.Read(buf, this);
            }
        }
        public class MSG_DELETECHARACTERRESPONSE : INetworkMessage
        {
            public const byte c_messageID = 7;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("ErrorCode", DMLType.INT)] public int m_errorCode;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_DELETECHARACTERRESPONSE>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_DELETECHARACTERRESPONSE>.Read(buf, this);
            }
        }
        public class MSG_REQUESTCHARACTERLIST : INetworkMessage
        {
            public const byte c_messageID = 8;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_REQUESTCHARACTERLIST>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_REQUESTCHARACTERLIST>.Read(buf, this);
            }
        }
        public class MSG_REQUESTSERVERLIST : INetworkMessage
        {
            public const byte c_messageID = 9;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_REQUESTSERVERLIST>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_REQUESTSERVERLIST>.Read(buf, this);
            }
        }
        public class MSG_SELECTCHARACTER : INetworkMessage
        {
            public const byte c_messageID = 10;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("CharID", DMLType.GID)] public GID m_charID;
            [DMLField("ServerName", DMLType.STR)] public ByteString m_serverName;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_SELECTCHARACTER>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_SELECTCHARACTER>.Read(buf, this);
            }
        }
        public class MSG_SERVERLIST : INetworkMessage
        {
            public const byte c_messageID = 11;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_SERVERLIST>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_SERVERLIST>.Read(buf, this);
            }
        }
        public class MSG_STARTCHARACTERLIST : INetworkMessage
        {
            public const byte c_messageID = 12;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("LoginServer", DMLType.STR)] public ByteString m_loginServer;
            [DMLField("PurchasedCharacterSlots", DMLType.INT)] public int m_purchasedCharacterSlots;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_STARTCHARACTERLIST>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_STARTCHARACTERLIST>.Read(buf, this);
            }
        }
        public class MSG_USER_AUTHEN : INetworkMessage
        {
            public const byte c_messageID = 13;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("Rec1", DMLType.STR)] public ByteString m_rec1;
            [DMLField("Version", DMLType.STR)] public ByteString m_version;
            [DMLField("Revision", DMLType.STR)] public ByteString m_revision;
            [DMLField("DataRevision", DMLType.STR)] public ByteString m_dataRevision;
            [DMLField("CRC", DMLType.STR)] public ByteString m_cRC;
            [DMLField("MachineID", DMLType.GID)] public GID m_machineID;
            [DMLField("PatchClientID", DMLType.STR)] public ByteString m_patchClientID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_USER_AUTHEN>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_USER_AUTHEN>.Read(buf, this);
            }
        }
        public class MSG_USER_AUTHEN_RSP : INetworkMessage
        {
            public const byte c_messageID = 14;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("Error", DMLType.INT)] public int m_error;
            [DMLField("UserID", DMLType.GID)] public GID m_userID;
            [DMLField("Rec1", DMLType.STR)] public ByteString m_rec1;
            [DMLField("Reason", DMLType.STR)] public ByteString m_reason;
            [DMLField("TimeStamp", DMLType.STR)] public ByteString m_timeStamp;
            [DMLField("PayingUser", DMLType.INT)] public int m_payingUser;
            [DMLField("Flags", DMLType.INT)] public int m_flags;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_USER_AUTHEN_RSP>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_USER_AUTHEN_RSP>.Read(buf, this);
            }
        }
        public class MSG_USER_VALIDATE : INetworkMessage
        {
            public const byte c_messageID = 15;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("UserID", DMLType.GID)] public GID m_userID;
            [DMLField("PassKey3", DMLType.STR)] public ByteString m_passKey3;
            [DMLField("MachineID", DMLType.GID)] public GID m_machineID;
            [DMLField("Locale", DMLType.STR)] public ByteString m_locale;
            [DMLField("PatchClientID", DMLType.STR)] public ByteString m_patchClientID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_USER_VALIDATE>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_USER_VALIDATE>.Read(buf, this);
            }
        }
        public class MSG_USER_VALIDATE_RSP : INetworkMessage
        {
            public const byte c_messageID = 16;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("Error", DMLType.INT)] public int m_error;
            [DMLField("Reason", DMLType.STR)] public ByteString m_reason;
            [DMLField("UserID", DMLType.GID)] public GID m_userID;
            [DMLField("TimeStamp", DMLType.STR)] public ByteString m_timeStamp;
            [DMLField("PayingUser", DMLType.INT)] public int m_payingUser;
            [DMLField("Flags", DMLType.INT)] public int m_flags;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_USER_VALIDATE_RSP>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_USER_VALIDATE_RSP>.Read(buf, this);
            }
        }
        public class MSG_DISCONNECT_LOGIN_AFK : INetworkMessage
        {
            public const byte c_messageID = 17;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("Warning", DMLType.BYT)] public sbyte m_warning;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_DISCONNECT_LOGIN_AFK>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_DISCONNECT_LOGIN_AFK>.Read(buf, this);
            }
        }
        public class MSG_LOGIN_NOT_AFK : INetworkMessage
        {
            public const byte c_messageID = 18;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("BadgeNameID", DMLType.UINT)] public uint m_badgeNameID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_LOGIN_NOT_AFK>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_LOGIN_NOT_AFK>.Read(buf, this);
            }
        }
        public class MSG_LOGINSERVERSHUTDOWN : INetworkMessage
        {
            public const byte c_messageID = 19;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("Message", DMLType.UINT)] public uint m_message;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_LOGINSERVERSHUTDOWN>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_LOGINSERVERSHUTDOWN>.Read(buf, this);
            }
        }
        public class MSG_USER_ADMIT_IND : INetworkMessage
        {
            public const byte c_messageID = 20;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("Status", DMLType.INT)] public int m_status;
            [DMLField("PositionInQueue", DMLType.UINT)] public uint m_positionInQueue;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_USER_ADMIT_IND>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_USER_ADMIT_IND>.Read(buf, this);
            }
        }
        public class MSG_WEBCHARACTERINFO : INetworkMessage
        {
            public const byte c_messageID = 21;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("Name", DMLType.INT)] public int m_name;
            [DMLField("Gender", DMLType.INT)] public int m_gender;
            [DMLField("School", DMLType.INT)] public int m_school;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_WEBCHARACTERINFO>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_WEBCHARACTERINFO>.Read(buf, this);
            }
        }
        public class MSG_USER_AUTHEN_V2 : INetworkMessage
        {
            public const byte c_messageID = 22;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("Rec1", DMLType.STR)] public ByteString m_rec1;
            [DMLField("Version", DMLType.STR)] public ByteString m_version;
            [DMLField("Revision", DMLType.STR)] public ByteString m_revision;
            [DMLField("DataRevision", DMLType.STR)] public ByteString m_dataRevision;
            [DMLField("CRC", DMLType.STR)] public ByteString m_cRC;
            [DMLField("MachineID", DMLType.GID)] public GID m_machineID;
            [DMLField("Locale", DMLType.STR)] public ByteString m_locale;
            [DMLField("PatchClientID", DMLType.STR)] public ByteString m_patchClientID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_USER_AUTHEN_V2>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_USER_AUTHEN_V2>.Read(buf, this);
            }
        }
        public class MSG_SAVECHARACTER : INetworkMessage
        {
            public const byte c_messageID = 23;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("CharID", DMLType.GID)] public GID m_charID;
            [DMLField("Success", DMLType.UBYT)] public byte m_success;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_SAVECHARACTER>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_SAVECHARACTER>.Read(buf, this);
            }
        }
        public class MSG_WEB_AUTHEN : INetworkMessage
        {
            public const byte c_messageID = 24;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("Rec1", DMLType.STR)] public ByteString m_rec1;
            [DMLField("Version", DMLType.STR)] public ByteString m_version;
            [DMLField("Revision", DMLType.STR)] public ByteString m_revision;
            [DMLField("DataRevision", DMLType.STR)] public ByteString m_dataRevision;
            [DMLField("CRC", DMLType.STR)] public ByteString m_cRC;
            [DMLField("MachineID", DMLType.GID)] public GID m_machineID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_WEB_AUTHEN>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_WEB_AUTHEN>.Read(buf, this);
            }
        }
        public class MSG_WEB_VALIDATE : INetworkMessage
        {
            public const byte c_messageID = 25;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("UserID", DMLType.GID)] public GID m_userID;
            [DMLField("PassKey3", DMLType.STR)] public ByteString m_passKey3;
            [DMLField("MachineID", DMLType.GID)] public GID m_machineID;
            [DMLField("Locale", DMLType.STR)] public ByteString m_locale;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_WEB_VALIDATE>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_WEB_VALIDATE>.Read(buf, this);
            }
        }
        public class MSG_CHANGECHARACTERNAME : INetworkMessage
        {
            public const byte c_messageID = 26;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("CharID", DMLType.GID)] public GID m_charID;
            [DMLField("NewName", DMLType.WSTR)] public string m_newName;
            [DMLField("ServerName", DMLType.STR)] public ByteString m_serverName;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_CHANGECHARACTERNAME>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_CHANGECHARACTERNAME>.Read(buf, this);
            }
        }
        public class MSG_USER_AUTHEN_V3 : INetworkMessage
        {
            public const byte c_messageID = 27;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("Rec1", DMLType.STR)] public ByteString m_rec1;
            [DMLField("Version", DMLType.STR)] public ByteString m_version;
            [DMLField("Revision", DMLType.STR)] public ByteString m_revision;
            [DMLField("DataRevision", DMLType.STR)] public ByteString m_dataRevision;
            [DMLField("CRC", DMLType.STR)] public ByteString m_cRC;
            [DMLField("MachineID", DMLType.GID)] public GID m_machineID;
            [DMLField("Locale", DMLType.STR)] public ByteString m_locale;
            [DMLField("PatchClientID", DMLType.STR)] public ByteString m_patchClientID;
            [DMLField("IsSteamPatcher", DMLType.UINT)] public uint m_isSteamPatcher;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_USER_AUTHEN_V3>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_USER_AUTHEN_V3>.Read(buf, this);
            }
        }
        
        public bool Dispatch(object handlerVoid, INetworkMessage message)
        {
            Debug.Assert(message.GetServiceID() == c_serviceID);
            var handler = (Handler)handlerVoid;
            
            switch (message.GetID())
            {
                case MSG_CHARACTERINFO.c_messageID:
                    return handler.NetHandleCharacterInfo((MSG_CHARACTERINFO)message);
                case MSG_CHARACTERLIST.c_messageID:
                    return handler.NetHandleCharacterList((MSG_CHARACTERLIST)message);
                case MSG_CHARACTERSELECTED.c_messageID:
                    return handler.NetHandleCharacterSelected((MSG_CHARACTERSELECTED)message);
                case MSG_CREATECHARACTER.c_messageID:
                    return handler.NetHandleCreateCharacter((MSG_CREATECHARACTER)message);
                case MSG_CREATECHARACTERRESPONSE.c_messageID:
                    return handler.NetHandleCreateCharacterResponse((MSG_CREATECHARACTERRESPONSE)message);
                case MSG_DELETECHARACTER.c_messageID:
                    return handler.NetHandleDeleteCharacter((MSG_DELETECHARACTER)message);
                case MSG_DELETECHARACTERRESPONSE.c_messageID:
                    return handler.NetHandleDeleteCharacterResponse((MSG_DELETECHARACTERRESPONSE)message);
                case MSG_REQUESTCHARACTERLIST.c_messageID:
                    return handler.NetHandleRequestCharacterList((MSG_REQUESTCHARACTERLIST)message);
                case MSG_REQUESTSERVERLIST.c_messageID:
                    return handler.NetHandleRequestServerList((MSG_REQUESTSERVERLIST)message);
                case MSG_SELECTCHARACTER.c_messageID:
                    return handler.NetHandleSelectCharacter((MSG_SELECTCHARACTER)message);
                case MSG_SERVERLIST.c_messageID:
                    return handler.NetHandleServerList((MSG_SERVERLIST)message);
                case MSG_STARTCHARACTERLIST.c_messageID:
                    return handler.NetHandleStartCharacterList((MSG_STARTCHARACTERLIST)message);
                case MSG_USER_AUTHEN.c_messageID:
                    return handler.NetHandleUserAuthen((MSG_USER_AUTHEN)message);
                case MSG_USER_AUTHEN_RSP.c_messageID:
                    return handler.NetHandleUserAuthenRsp((MSG_USER_AUTHEN_RSP)message);
                case MSG_USER_VALIDATE.c_messageID:
                    return handler.NetHandleUserValidate((MSG_USER_VALIDATE)message);
                case MSG_USER_VALIDATE_RSP.c_messageID:
                    return handler.NetHandleUserValidateRsp((MSG_USER_VALIDATE_RSP)message);
                case MSG_DISCONNECT_LOGIN_AFK.c_messageID:
                    return handler.NetHandleDisconnect_Login_Afk((MSG_DISCONNECT_LOGIN_AFK)message);
                case MSG_LOGIN_NOT_AFK.c_messageID:
                    return handler.NetHandleLogin_Not_Afk((MSG_LOGIN_NOT_AFK)message);
                case MSG_LOGINSERVERSHUTDOWN.c_messageID:
                    return handler.NetHandleServerShutdown((MSG_LOGINSERVERSHUTDOWN)message);
                case MSG_USER_ADMIT_IND.c_messageID:
                    return handler.NetHandleUserAdmitInd((MSG_USER_ADMIT_IND)message);
                case MSG_WEBCHARACTERINFO.c_messageID:
                    return handler.NetHandleWebCharacterInfo((MSG_WEBCHARACTERINFO)message);
                case MSG_USER_AUTHEN_V2.c_messageID:
                    return handler.NetHandleUserAuthenV2((MSG_USER_AUTHEN_V2)message);
                case MSG_SAVECHARACTER.c_messageID:
                    return handler.NetHandleSaveCharacter((MSG_SAVECHARACTER)message);
                case MSG_WEB_AUTHEN.c_messageID:
                    return handler.NetHandleWebAuthen((MSG_WEB_AUTHEN)message);
                case MSG_WEB_VALIDATE.c_messageID:
                    return handler.NetHandleWebValidate((MSG_WEB_VALIDATE)message);
                case MSG_CHANGECHARACTERNAME.c_messageID:
                    return handler.NetHandleChangeCharacterName((MSG_CHANGECHARACTERNAME)message);
                case MSG_USER_AUTHEN_V3.c_messageID:
                    return handler.NetHandleUserAuthenV3((MSG_USER_AUTHEN_V3)message);
            }
            return false;
        }
        
        public INetworkMessage AllocateMessage(byte id)
        {
            switch (id)
            {
                case MSG_CHARACTERINFO.c_messageID: return new MSG_CHARACTERINFO();
                case MSG_CHARACTERLIST.c_messageID: return new MSG_CHARACTERLIST();
                case MSG_CHARACTERSELECTED.c_messageID: return new MSG_CHARACTERSELECTED();
                case MSG_CREATECHARACTER.c_messageID: return new MSG_CREATECHARACTER();
                case MSG_CREATECHARACTERRESPONSE.c_messageID: return new MSG_CREATECHARACTERRESPONSE();
                case MSG_DELETECHARACTER.c_messageID: return new MSG_DELETECHARACTER();
                case MSG_DELETECHARACTERRESPONSE.c_messageID: return new MSG_DELETECHARACTERRESPONSE();
                case MSG_REQUESTCHARACTERLIST.c_messageID: return new MSG_REQUESTCHARACTERLIST();
                case MSG_REQUESTSERVERLIST.c_messageID: return new MSG_REQUESTSERVERLIST();
                case MSG_SELECTCHARACTER.c_messageID: return new MSG_SELECTCHARACTER();
                case MSG_SERVERLIST.c_messageID: return new MSG_SERVERLIST();
                case MSG_STARTCHARACTERLIST.c_messageID: return new MSG_STARTCHARACTERLIST();
                case MSG_USER_AUTHEN.c_messageID: return new MSG_USER_AUTHEN();
                case MSG_USER_AUTHEN_RSP.c_messageID: return new MSG_USER_AUTHEN_RSP();
                case MSG_USER_VALIDATE.c_messageID: return new MSG_USER_VALIDATE();
                case MSG_USER_VALIDATE_RSP.c_messageID: return new MSG_USER_VALIDATE_RSP();
                case MSG_DISCONNECT_LOGIN_AFK.c_messageID: return new MSG_DISCONNECT_LOGIN_AFK();
                case MSG_LOGIN_NOT_AFK.c_messageID: return new MSG_LOGIN_NOT_AFK();
                case MSG_LOGINSERVERSHUTDOWN.c_messageID: return new MSG_LOGINSERVERSHUTDOWN();
                case MSG_USER_ADMIT_IND.c_messageID: return new MSG_USER_ADMIT_IND();
                case MSG_WEBCHARACTERINFO.c_messageID: return new MSG_WEBCHARACTERINFO();
                case MSG_USER_AUTHEN_V2.c_messageID: return new MSG_USER_AUTHEN_V2();
                case MSG_SAVECHARACTER.c_messageID: return new MSG_SAVECHARACTER();
                case MSG_WEB_AUTHEN.c_messageID: return new MSG_WEB_AUTHEN();
                case MSG_WEB_VALIDATE.c_messageID: return new MSG_WEB_VALIDATE();
                case MSG_CHANGECHARACTERNAME.c_messageID: return new MSG_CHANGECHARACTERNAME();
                case MSG_USER_AUTHEN_V3.c_messageID: return new MSG_USER_AUTHEN_V3();
            }
            throw new ArgumentOutOfRangeException(nameof(id));
        }
        
        public interface Handler
        {
            bool NetHandleCharacterInfo(MSG_CHARACTERINFO msg) => false;
            bool NetHandleCharacterList(MSG_CHARACTERLIST msg) => false;
            bool NetHandleCharacterSelected(MSG_CHARACTERSELECTED msg) => false;
            bool NetHandleCreateCharacter(MSG_CREATECHARACTER msg) => false;
            bool NetHandleCreateCharacterResponse(MSG_CREATECHARACTERRESPONSE msg) => false;
            bool NetHandleDeleteCharacter(MSG_DELETECHARACTER msg) => false;
            bool NetHandleDeleteCharacterResponse(MSG_DELETECHARACTERRESPONSE msg) => false;
            bool NetHandleRequestCharacterList(MSG_REQUESTCHARACTERLIST msg) => false;
            bool NetHandleRequestServerList(MSG_REQUESTSERVERLIST msg) => false;
            bool NetHandleSelectCharacter(MSG_SELECTCHARACTER msg) => false;
            bool NetHandleServerList(MSG_SERVERLIST msg) => false;
            bool NetHandleStartCharacterList(MSG_STARTCHARACTERLIST msg) => false;
            bool NetHandleUserAuthen(MSG_USER_AUTHEN msg) => false;
            bool NetHandleUserAuthenRsp(MSG_USER_AUTHEN_RSP msg) => false;
            bool NetHandleUserValidate(MSG_USER_VALIDATE msg) => false;
            bool NetHandleUserValidateRsp(MSG_USER_VALIDATE_RSP msg) => false;
            bool NetHandleDisconnect_Login_Afk(MSG_DISCONNECT_LOGIN_AFK msg) => false;
            bool NetHandleLogin_Not_Afk(MSG_LOGIN_NOT_AFK msg) => false;
            bool NetHandleServerShutdown(MSG_LOGINSERVERSHUTDOWN msg) => false;
            bool NetHandleUserAdmitInd(MSG_USER_ADMIT_IND msg) => false;
            bool NetHandleWebCharacterInfo(MSG_WEBCHARACTERINFO msg) => false;
            bool NetHandleUserAuthenV2(MSG_USER_AUTHEN_V2 msg) => false;
            bool NetHandleSaveCharacter(MSG_SAVECHARACTER msg) => false;
            bool NetHandleWebAuthen(MSG_WEB_AUTHEN msg) => false;
            bool NetHandleWebValidate(MSG_WEB_VALIDATE msg) => false;
            bool NetHandleChangeCharacterName(MSG_CHANGECHARACTERNAME msg) => false;
            bool NetHandleUserAuthenV3(MSG_USER_AUTHEN_V3 msg) => false;
        }
    }
    public class MG9_MESSAGES_54_Protocol: INetworkService
    {
        public const byte c_serviceID = 54;
        public byte GetID() => c_serviceID;
        
        public class MSG_MG9_CONNECT : INetworkMessage
        {
            public const byte c_messageID = 1;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_MG9_CONNECT>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_MG9_CONNECT>.Read(buf, this);
            }
        }
        public class MSG_MG9_MOVED : INetworkMessage
        {
            public const byte c_messageID = 2;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_MG9_MOVED>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_MG9_MOVED>.Read(buf, this);
            }
        }
        public class MSG_MG9_REWARDS : INetworkMessage
        {
            public const byte c_messageID = 3;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("score", DMLType.INT)] public int m_score;
            [DMLField("gameName", DMLType.STR)] public ByteString m_gameName;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_MG9_REWARDS>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_MG9_REWARDS>.Read(buf, this);
            }
        }
        
        public bool Dispatch(object handlerVoid, INetworkMessage message)
        {
            Debug.Assert(message.GetServiceID() == c_serviceID);
            var handler = (Handler)handlerVoid;
            
            switch (message.GetID())
            {
                case MSG_MG9_CONNECT.c_messageID:
                    return handler.NetHandleMsg_MG9_Connect((MSG_MG9_CONNECT)message);
                case MSG_MG9_MOVED.c_messageID:
                    return handler.NetHandleMsg_MG9_Moved((MSG_MG9_MOVED)message);
                case MSG_MG9_REWARDS.c_messageID:
                    return handler.NetHandleMsg_MG9_Rewards((MSG_MG9_REWARDS)message);
            }
            return false;
        }
        
        public INetworkMessage AllocateMessage(byte id)
        {
            switch (id)
            {
                case MSG_MG9_CONNECT.c_messageID: return new MSG_MG9_CONNECT();
                case MSG_MG9_MOVED.c_messageID: return new MSG_MG9_MOVED();
                case MSG_MG9_REWARDS.c_messageID: return new MSG_MG9_REWARDS();
            }
            throw new ArgumentOutOfRangeException(nameof(id));
        }
        
        public interface Handler
        {
            bool NetHandleMsg_MG9_Connect(MSG_MG9_CONNECT msg) => false;
            bool NetHandleMsg_MG9_Moved(MSG_MG9_MOVED msg) => false;
            bool NetHandleMsg_MG9_Rewards(MSG_MG9_REWARDS msg) => false;
        }
    }
    public class MG4_MESSAGES_45_Protocol: INetworkService
    {
        public const byte c_serviceID = 45;
        public byte GetID() => c_serviceID;
        
        public class MSG_MG4_CONNECT : INetworkMessage
        {
            public const byte c_messageID = 1;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_MG4_CONNECT>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_MG4_CONNECT>.Read(buf, this);
            }
        }
        public class MSG_MG4_MOVED : INetworkMessage
        {
            public const byte c_messageID = 2;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_MG4_MOVED>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_MG4_MOVED>.Read(buf, this);
            }
        }
        public class MSG_MG4_REWARDS : INetworkMessage
        {
            public const byte c_messageID = 3;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("score", DMLType.INT)] public int m_score;
            [DMLField("gameName", DMLType.STR)] public ByteString m_gameName;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_MG4_REWARDS>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_MG4_REWARDS>.Read(buf, this);
            }
        }
        
        public bool Dispatch(object handlerVoid, INetworkMessage message)
        {
            Debug.Assert(message.GetServiceID() == c_serviceID);
            var handler = (Handler)handlerVoid;
            
            switch (message.GetID())
            {
                case MSG_MG4_CONNECT.c_messageID:
                    return handler.NetHandleMsg_MG4_Connect((MSG_MG4_CONNECT)message);
                case MSG_MG4_MOVED.c_messageID:
                    return handler.NetHandleMsg_MG4_Moved((MSG_MG4_MOVED)message);
                case MSG_MG4_REWARDS.c_messageID:
                    return handler.NetHandleMsg_MG4_Rewards((MSG_MG4_REWARDS)message);
            }
            return false;
        }
        
        public INetworkMessage AllocateMessage(byte id)
        {
            switch (id)
            {
                case MSG_MG4_CONNECT.c_messageID: return new MSG_MG4_CONNECT();
                case MSG_MG4_MOVED.c_messageID: return new MSG_MG4_MOVED();
                case MSG_MG4_REWARDS.c_messageID: return new MSG_MG4_REWARDS();
            }
            throw new ArgumentOutOfRangeException(nameof(id));
        }
        
        public interface Handler
        {
            bool NetHandleMsg_MG4_Connect(MSG_MG4_CONNECT msg) => false;
            bool NetHandleMsg_MG4_Moved(MSG_MG4_MOVED msg) => false;
            bool NetHandleMsg_MG4_Rewards(MSG_MG4_REWARDS msg) => false;
        }
    }
    public class MG1_MESSAGES_42_Protocol: INetworkService
    {
        public const byte c_serviceID = 42;
        public byte GetID() => c_serviceID;
        
        public class MSG_MG1_CONNECT : INetworkMessage
        {
            public const byte c_messageID = 1;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_MG1_CONNECT>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_MG1_CONNECT>.Read(buf, this);
            }
        }
        public class MSG_MG1_MOVED : INetworkMessage
        {
            public const byte c_messageID = 2;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_MG1_MOVED>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_MG1_MOVED>.Read(buf, this);
            }
        }
        public class MSG_MG1_REWARDS : INetworkMessage
        {
            public const byte c_messageID = 3;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("score", DMLType.INT)] public int m_score;
            [DMLField("gameName", DMLType.STR)] public ByteString m_gameName;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_MG1_REWARDS>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_MG1_REWARDS>.Read(buf, this);
            }
        }
        
        public bool Dispatch(object handlerVoid, INetworkMessage message)
        {
            Debug.Assert(message.GetServiceID() == c_serviceID);
            var handler = (Handler)handlerVoid;
            
            switch (message.GetID())
            {
                case MSG_MG1_CONNECT.c_messageID:
                    return handler.NetHandleMsg_MG1_Connect((MSG_MG1_CONNECT)message);
                case MSG_MG1_MOVED.c_messageID:
                    return handler.NetHandleMsg_MG1_Moved((MSG_MG1_MOVED)message);
                case MSG_MG1_REWARDS.c_messageID:
                    return handler.NetHandleMsg_MG1_Rewards((MSG_MG1_REWARDS)message);
            }
            return false;
        }
        
        public INetworkMessage AllocateMessage(byte id)
        {
            switch (id)
            {
                case MSG_MG1_CONNECT.c_messageID: return new MSG_MG1_CONNECT();
                case MSG_MG1_MOVED.c_messageID: return new MSG_MG1_MOVED();
                case MSG_MG1_REWARDS.c_messageID: return new MSG_MG1_REWARDS();
            }
            throw new ArgumentOutOfRangeException(nameof(id));
        }
        
        public interface Handler
        {
            bool NetHandleMsg_MG1_Connect(MSG_MG1_CONNECT msg) => false;
            bool NetHandleMsg_MG1_Moved(MSG_MG1_MOVED msg) => false;
            bool NetHandleMsg_MG1_Rewards(MSG_MG1_REWARDS msg) => false;
        }
    }
    public class DOODLEDOUG_MESSAGES_41_Protocol: INetworkService
    {
        public const byte c_serviceID = 41;
        public byte GetID() => c_serviceID;
        
        public class MSG_DOODLEDOUG_CONNECT : INetworkMessage
        {
            public const byte c_messageID = 1;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_DOODLEDOUG_CONNECT>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_DOODLEDOUG_CONNECT>.Read(buf, this);
            }
        }
        public class MSG_DOODLEDOUG_MOVED : INetworkMessage
        {
            public const byte c_messageID = 2;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_DOODLEDOUG_MOVED>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_DOODLEDOUG_MOVED>.Read(buf, this);
            }
        }
        public class MSG_DOODLEDOUG_REWARDS : INetworkMessage
        {
            public const byte c_messageID = 3;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("score", DMLType.INT)] public int m_score;
            [DMLField("gameName", DMLType.STR)] public ByteString m_gameName;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_DOODLEDOUG_REWARDS>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_DOODLEDOUG_REWARDS>.Read(buf, this);
            }
        }
        
        public bool Dispatch(object handlerVoid, INetworkMessage message)
        {
            Debug.Assert(message.GetServiceID() == c_serviceID);
            var handler = (Handler)handlerVoid;
            
            switch (message.GetID())
            {
                case MSG_DOODLEDOUG_CONNECT.c_messageID:
                    return handler.NetHandleMsg_DoodleDoug_Connect((MSG_DOODLEDOUG_CONNECT)message);
                case MSG_DOODLEDOUG_MOVED.c_messageID:
                    return handler.NetHandleMsg_DoodleDoug_Moved((MSG_DOODLEDOUG_MOVED)message);
                case MSG_DOODLEDOUG_REWARDS.c_messageID:
                    return handler.NetHandleMsg_DoodleDoug_Rewards((MSG_DOODLEDOUG_REWARDS)message);
            }
            return false;
        }
        
        public INetworkMessage AllocateMessage(byte id)
        {
            switch (id)
            {
                case MSG_DOODLEDOUG_CONNECT.c_messageID: return new MSG_DOODLEDOUG_CONNECT();
                case MSG_DOODLEDOUG_MOVED.c_messageID: return new MSG_DOODLEDOUG_MOVED();
                case MSG_DOODLEDOUG_REWARDS.c_messageID: return new MSG_DOODLEDOUG_REWARDS();
            }
            throw new ArgumentOutOfRangeException(nameof(id));
        }
        
        public interface Handler
        {
            bool NetHandleMsg_DoodleDoug_Connect(MSG_DOODLEDOUG_CONNECT msg) => false;
            bool NetHandleMsg_DoodleDoug_Moved(MSG_DOODLEDOUG_MOVED msg) => false;
            bool NetHandleMsg_DoodleDoug_Rewards(MSG_DOODLEDOUG_REWARDS msg) => false;
        }
    }
    public class MG6_MESSAGES_47_Protocol: INetworkService
    {
        public const byte c_serviceID = 47;
        public byte GetID() => c_serviceID;
        
        public class MSG_MG6_CONNECT : INetworkMessage
        {
            public const byte c_messageID = 1;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_MG6_CONNECT>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_MG6_CONNECT>.Read(buf, this);
            }
        }
        public class MSG_MG6_MOVED : INetworkMessage
        {
            public const byte c_messageID = 2;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_MG6_MOVED>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_MG6_MOVED>.Read(buf, this);
            }
        }
        public class MSG_MG6_REWARDS : INetworkMessage
        {
            public const byte c_messageID = 3;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("score", DMLType.INT)] public int m_score;
            [DMLField("gameName", DMLType.STR)] public ByteString m_gameName;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_MG6_REWARDS>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_MG6_REWARDS>.Read(buf, this);
            }
        }
        
        public bool Dispatch(object handlerVoid, INetworkMessage message)
        {
            Debug.Assert(message.GetServiceID() == c_serviceID);
            var handler = (Handler)handlerVoid;
            
            switch (message.GetID())
            {
                case MSG_MG6_CONNECT.c_messageID:
                    return handler.NetHandleMsg_MG6_Connect((MSG_MG6_CONNECT)message);
                case MSG_MG6_MOVED.c_messageID:
                    return handler.NetHandleMsg_MG6_Moved((MSG_MG6_MOVED)message);
                case MSG_MG6_REWARDS.c_messageID:
                    return handler.NetHandleMsg_MG6_Rewards((MSG_MG6_REWARDS)message);
            }
            return false;
        }
        
        public INetworkMessage AllocateMessage(byte id)
        {
            switch (id)
            {
                case MSG_MG6_CONNECT.c_messageID: return new MSG_MG6_CONNECT();
                case MSG_MG6_MOVED.c_messageID: return new MSG_MG6_MOVED();
                case MSG_MG6_REWARDS.c_messageID: return new MSG_MG6_REWARDS();
            }
            throw new ArgumentOutOfRangeException(nameof(id));
        }
        
        public interface Handler
        {
            bool NetHandleMsg_MG6_Connect(MSG_MG6_CONNECT msg) => false;
            bool NetHandleMsg_MG6_Moved(MSG_MG6_MOVED msg) => false;
            bool NetHandleMsg_MG6_Rewards(MSG_MG6_REWARDS msg) => false;
        }
    }
    public class MG2_MESSAGES_43_Protocol: INetworkService
    {
        public const byte c_serviceID = 43;
        public byte GetID() => c_serviceID;
        
        public class MSG_MG2_CONNECT : INetworkMessage
        {
            public const byte c_messageID = 1;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_MG2_CONNECT>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_MG2_CONNECT>.Read(buf, this);
            }
        }
        public class MSG_MG2_MOVED : INetworkMessage
        {
            public const byte c_messageID = 2;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_MG2_MOVED>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_MG2_MOVED>.Read(buf, this);
            }
        }
        public class MSG_MG2_REWARDS : INetworkMessage
        {
            public const byte c_messageID = 3;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("score", DMLType.INT)] public int m_score;
            [DMLField("gameName", DMLType.STR)] public ByteString m_gameName;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_MG2_REWARDS>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_MG2_REWARDS>.Read(buf, this);
            }
        }
        
        public bool Dispatch(object handlerVoid, INetworkMessage message)
        {
            Debug.Assert(message.GetServiceID() == c_serviceID);
            var handler = (Handler)handlerVoid;
            
            switch (message.GetID())
            {
                case MSG_MG2_CONNECT.c_messageID:
                    return handler.NetHandleMsg_MG2_Connect((MSG_MG2_CONNECT)message);
                case MSG_MG2_MOVED.c_messageID:
                    return handler.NetHandleMsg_MG2_Moved((MSG_MG2_MOVED)message);
                case MSG_MG2_REWARDS.c_messageID:
                    return handler.NetHandleMsg_MG2_Rewards((MSG_MG2_REWARDS)message);
            }
            return false;
        }
        
        public INetworkMessage AllocateMessage(byte id)
        {
            switch (id)
            {
                case MSG_MG2_CONNECT.c_messageID: return new MSG_MG2_CONNECT();
                case MSG_MG2_MOVED.c_messageID: return new MSG_MG2_MOVED();
                case MSG_MG2_REWARDS.c_messageID: return new MSG_MG2_REWARDS();
            }
            throw new ArgumentOutOfRangeException(nameof(id));
        }
        
        public interface Handler
        {
            bool NetHandleMsg_MG2_Connect(MSG_MG2_CONNECT msg) => false;
            bool NetHandleMsg_MG2_Moved(MSG_MG2_MOVED msg) => false;
            bool NetHandleMsg_MG2_Rewards(MSG_MG2_REWARDS msg) => false;
        }
    }
    public class WIZARDHOUSING_50_Protocol: INetworkService
    {
        public const byte c_serviceID = 50;
        public byte GetID() => c_serviceID;
        
        public class MSG_ADDFISHTOAQUARIUM : INetworkMessage
        {
            public const byte c_messageID = 1;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("GlobalID", DMLType.GID)] public GID m_globalID;
            [DMLField("FishTemplateID", DMLType.UINT)] public uint m_fishTemplateID;
            [DMLField("Size", DMLType.FLT)] public float m_size;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_ADDFISHTOAQUARIUM>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_ADDFISHTOAQUARIUM>.Read(buf, this);
            }
        }
        public class MSG_ADDINSTANCEFISH : INetworkMessage
        {
            public const byte c_messageID = 2;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("ZoneNameID", DMLType.UINT)] public uint m_zoneNameID;
            [DMLField("FishTemplateID", DMLType.UINT)] public uint m_fishTemplateID;
            [DMLField("Size", DMLType.FLT)] public float m_size;
            [DMLField("FishID", DMLType.UINT)] public uint m_fishID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_ADDINSTANCEFISH>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_ADDINSTANCEFISH>.Read(buf, this);
            }
        }
        public class MSG_ADDTOTREASURECARDPOSTER : INetworkMessage
        {
            public const byte c_messageID = 3;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("TreasureCardPosterID", DMLType.GID)] public GID m_treasureCardPosterID;
            [DMLField("SpellTemplateID", DMLType.UINT)] public uint m_spellTemplateID;
            [DMLField("EnchantmentTemplateID", DMLType.UINT)] public uint m_enchantmentTemplateID;
            [DMLField("Flags", DMLType.UBYT)] public byte m_flags;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_ADDTOTREASURECARDPOSTER>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_ADDTOTREASURECARDPOSTER>.Read(buf, this);
            }
        }
        public class MSG_AUDITATTICRESULTS : INetworkMessage
        {
            public const byte c_messageID = 4;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("ItemsAudited", DMLType.UINT)] public uint m_itemsAudited;
            [DMLField("ItemsRemoved", DMLType.UINT)] public uint m_itemsRemoved;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_AUDITATTICRESULTS>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_AUDITATTICRESULTS>.Read(buf, this);
            }
        }
        public class MSG_BEGINFISHINGCAST : INetworkMessage
        {
            public const byte c_messageID = 5;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("PositionX", DMLType.FLT)] public float m_positionX;
            [DMLField("PositionY", DMLType.FLT)] public float m_positionY;
            [DMLField("PositionZ", DMLType.FLT)] public float m_positionZ;
            [DMLField("EndX", DMLType.FLT)] public float m_endX;
            [DMLField("EndY", DMLType.FLT)] public float m_endY;
            [DMLField("EndZ", DMLType.FLT)] public float m_endZ;
            [DMLField("Yaw", DMLType.FLT)] public float m_yaw;
            [DMLField("SpellTemplateID", DMLType.UINT)] public uint m_spellTemplateID;
            [DMLField("IsRecast", DMLType.UBYT)] public byte m_isRecast;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_BEGINFISHINGCAST>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_BEGINFISHINGCAST>.Read(buf, this);
            }
        }
        public class MSG_BLOCKPETSPAWN : INetworkMessage
        {
            public const byte c_messageID = 6;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_BLOCKPETSPAWN>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_BLOCKPETSPAWN>.Read(buf, this);
            }
        }
        public class MSG_BUYISLANDSPACECONFIRM : INetworkMessage
        {
            public const byte c_messageID = 7;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("Failure", DMLType.BYT)] public sbyte m_failure;
            [DMLField("WebFailure", DMLType.BYT)] public sbyte m_webFailure;
            [DMLField("Credits", DMLType.INT)] public int m_credits;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_BUYISLANDSPACECONFIRM>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_BUYISLANDSPACECONFIRM>.Read(buf, this);
            }
        }
        public class MSG_CASTLEGAMESREQUEST : INetworkMessage
        {
            public const byte c_messageID = 8;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("GlobalID", DMLType.GID)] public GID m_globalID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_CASTLEGAMESREQUEST>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_CASTLEGAMESREQUEST>.Read(buf, this);
            }
        }
        public class MSG_CASTLEGAMESREQUESTGAMEDATA : INetworkMessage
        {
            public const byte c_messageID = 9;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("GlobalID", DMLType.GID)] public GID m_globalID;
            [DMLField("PageNumber", DMLType.UINT)] public uint m_pageNumber;
            [DMLField("Data", DMLType.STR)] public ByteString m_data;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_CASTLEGAMESREQUESTGAMEDATA>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_CASTLEGAMESREQUESTGAMEDATA>.Read(buf, this);
            }
        }
        public class MSG_CASTLEGAMESTELEPORTREJECTED : INetworkMessage
        {
            public const byte c_messageID = 10;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_CASTLEGAMESTELEPORTREJECTED>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_CASTLEGAMESTELEPORTREJECTED>.Read(buf, this);
            }
        }
        public class MSG_CASTLEMAGICCHANGEACTION : INetworkMessage
        {
            public const byte c_messageID = 11;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("GlobalID", DMLType.GID)] public GID m_globalID;
            [DMLField("ActionNumber", DMLType.UINT)] public uint m_actionNumber;
            [DMLField("SpellTemplateID", DMLType.UINT)] public uint m_spellTemplateID;
            [DMLField("TargetTemplateID", DMLType.UINT)] public uint m_targetTemplateID;
            [DMLField("LocX", DMLType.FLT)] public float m_locX;
            [DMLField("LocY", DMLType.FLT)] public float m_locY;
            [DMLField("LocZ", DMLType.FLT)] public float m_locZ;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_CASTLEMAGICCHANGEACTION>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_CASTLEMAGICCHANGEACTION>.Read(buf, this);
            }
        }
        public class MSG_CASTLEMAGICCLEAR : INetworkMessage
        {
            public const byte c_messageID = 12;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_CASTLEMAGICCLEAR>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_CASTLEMAGICCLEAR>.Read(buf, this);
            }
        }
        public class MSG_CASTLEMAGICCURRENTSTATE : INetworkMessage
        {
            public const byte c_messageID = 13;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("TargetPlayer", DMLType.GID)] public GID m_targetPlayer;
            [DMLField("ChangeBuffer", DMLType.STR)] public ByteString m_changeBuffer;
            [DMLField("ZoneTime", DMLType.FLT)] public float m_zoneTime;
            [DMLField("OrbFlags", DMLType.BYT)] public sbyte m_orbFlags;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_CASTLEMAGICCURRENTSTATE>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_CASTLEMAGICCURRENTSTATE>.Read(buf, this);
            }
        }
        public class MSG_CASTLEMAGICORB : INetworkMessage
        {
            public const byte c_messageID = 14;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("OrbFlags", DMLType.BYT)] public sbyte m_orbFlags;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_CASTLEMAGICORB>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_CASTLEMAGICORB>.Read(buf, this);
            }
        }
        public class MSG_CASTLEMAGICREQUESTALLOWMOUNTS : INetworkMessage
        {
            public const byte c_messageID = 15;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("State", DMLType.BYT)] public sbyte m_state;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_CASTLEMAGICREQUESTALLOWMOUNTS>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_CASTLEMAGICREQUESTALLOWMOUNTS>.Read(buf, this);
            }
        }
        public class MSG_CASTLEMAGICREQUESTALLOWPVP : INetworkMessage
        {
            public const byte c_messageID = 16;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("State", DMLType.BYT)] public sbyte m_state;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_CASTLEMAGICREQUESTALLOWPVP>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_CASTLEMAGICREQUESTALLOWPVP>.Read(buf, this);
            }
        }
        public class MSG_CASTLEMAGICREQUESTPLAYERTELEPORT : INetworkMessage
        {
            public const byte c_messageID = 17;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("TargetPlayerGID", DMLType.GID)] public GID m_targetPlayerGID;
            [DMLField("TargetGID", DMLType.GID)] public GID m_targetGID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_CASTLEMAGICREQUESTPLAYERTELEPORT>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_CASTLEMAGICREQUESTPLAYERTELEPORT>.Read(buf, this);
            }
        }
        public class MSG_CASTLEMAGICREQUESTRANDOM : INetworkMessage
        {
            public const byte c_messageID = 18;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("Buffer", DMLType.STR)] public ByteString m_buffer;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_CASTLEMAGICREQUESTRANDOM>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_CASTLEMAGICREQUESTRANDOM>.Read(buf, this);
            }
        }
        public class MSG_CASTLEMAGICREQUESTUSE : INetworkMessage
        {
            public const byte c_messageID = 19;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("ItemGID", DMLType.GID)] public GID m_itemGID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_CASTLEMAGICREQUESTUSE>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_CASTLEMAGICREQUESTUSE>.Read(buf, this);
            }
        }
        public class MSG_CASTLEMAGICTUTORIAL : INetworkMessage
        {
            public const byte c_messageID = 20;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("State", DMLType.BYT)] public sbyte m_state;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_CASTLEMAGICTUTORIAL>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_CASTLEMAGICTUTORIAL>.Read(buf, this);
            }
        }
        public class MSG_CASTLEMAGICUPDATESTATE : INetworkMessage
        {
            public const byte c_messageID = 21;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("GlobalID", DMLType.GID)] public GID m_globalID;
            [DMLField("State", DMLType.UINT)] public uint m_state;
            [DMLField("RandomNumbers", DMLType.UINT)] public uint m_randomNumbers;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_CASTLEMAGICUPDATESTATE>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_CASTLEMAGICUPDATESTATE>.Read(buf, this);
            }
        }
        public class MSG_CASTLETOURSADD : INetworkMessage
        {
            public const byte c_messageID = 22;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("GlobalID", DMLType.GID)] public GID m_globalID;
            [DMLField("HouseGID", DMLType.GID)] public GID m_houseGID;
            [DMLField("HouseType", DMLType.BYT)] public sbyte m_houseType;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_CASTLETOURSADD>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_CASTLETOURSADD>.Read(buf, this);
            }
        }
        public class MSG_CASTLETOURSADDRESULT : INetworkMessage
        {
            public const byte c_messageID = 23;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("Status", DMLType.UINT)] public uint m_status;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_CASTLETOURSADDRESULT>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_CASTLETOURSADDRESULT>.Read(buf, this);
            }
        }
        public class MSG_CASTLETOURSCSRRESULTS : INetworkMessage
        {
            public const byte c_messageID = 24;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("Result", DMLType.STR)] public ByteString m_result;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_CASTLETOURSCSRRESULTS>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_CASTLETOURSCSRRESULTS>.Read(buf, this);
            }
        }
        public class MSG_CASTLETOURSDELETECHARACTER : INetworkMessage
        {
            public const byte c_messageID = 25;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("CharacterID", DMLType.GID)] public GID m_characterID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_CASTLETOURSDELETECHARACTER>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_CASTLETOURSDELETECHARACTER>.Read(buf, this);
            }
        }
        public class MSG_CASTLETOURSENABLERATINGDISPLAY : INetworkMessage
        {
            public const byte c_messageID = 26;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("CastleType", DMLType.BYT)] public sbyte m_castleType;
            [DMLField("Rating", DMLType.BYT)] public sbyte m_rating;
            [DMLField("FirstDisplay", DMLType.BYT)] public sbyte m_firstDisplay;
            [DMLField("TemplateID", DMLType.UINT)] public uint m_templateID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_CASTLETOURSENABLERATINGDISPLAY>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_CASTLETOURSENABLERATINGDISPLAY>.Read(buf, this);
            }
        }
        public class MSG_CASTLETOURSLEADERBOARDRESPONSE : INetworkMessage
        {
            public const byte c_messageID = 27;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("CharacterID", DMLType.GID)] public GID m_characterID;
            [DMLField("LeaderboardType", DMLType.BYT)] public sbyte m_leaderboardType;
            [DMLField("SortType", DMLType.BYT)] public sbyte m_sortType;
            [DMLField("PageNumber", DMLType.UINT)] public uint m_pageNumber;
            [DMLField("LeaderboardData", DMLType.STR)] public ByteString m_leaderboardData;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_CASTLETOURSLEADERBOARDRESPONSE>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_CASTLETOURSLEADERBOARDRESPONSE>.Read(buf, this);
            }
        }
        public class MSG_CASTLETOURSPLAYERBANNED : INetworkMessage
        {
            public const byte c_messageID = 28;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("GlobalID", DMLType.GID)] public GID m_globalID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_CASTLETOURSPLAYERBANNED>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_CASTLETOURSPLAYERBANNED>.Read(buf, this);
            }
        }
        public class MSG_CASTLETOURSRATINGDISPLAY : INetworkMessage
        {
            public const byte c_messageID = 29;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_CASTLETOURSRATINGDISPLAY>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_CASTLETOURSRATINGDISPLAY>.Read(buf, this);
            }
        }
        public class MSG_CASTLETOURSREMOVE : INetworkMessage
        {
            public const byte c_messageID = 30;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("GlobalID", DMLType.GID)] public GID m_globalID;
            [DMLField("HouseGID", DMLType.GID)] public GID m_houseGID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_CASTLETOURSREMOVE>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_CASTLETOURSREMOVE>.Read(buf, this);
            }
        }
        public class MSG_CASTLETOURSREMOVERESULT : INetworkMessage
        {
            public const byte c_messageID = 31;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("Status", DMLType.UINT)] public uint m_status;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_CASTLETOURSREMOVERESULT>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_CASTLETOURSREMOVERESULT>.Read(buf, this);
            }
        }
        public class MSG_CASTLETOURSREQUEST : INetworkMessage
        {
            public const byte c_messageID = 32;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("GlobalID", DMLType.GID)] public GID m_globalID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_CASTLETOURSREQUEST>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_CASTLETOURSREQUEST>.Read(buf, this);
            }
        }
        public class MSG_CASTLETOURSREQUESTFRIENDS : INetworkMessage
        {
            public const byte c_messageID = 33;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("CharacterID", DMLType.GID)] public GID m_characterID;
            [DMLField("Data", DMLType.STR)] public ByteString m_data;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_CASTLETOURSREQUESTFRIENDS>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_CASTLETOURSREQUESTFRIENDS>.Read(buf, this);
            }
        }
        public class MSG_CASTLETOURSREQUESTLEADERBOARD : INetworkMessage
        {
            public const byte c_messageID = 34;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("LeaderboardType", DMLType.BYT)] public sbyte m_leaderboardType;
            [DMLField("SortType", DMLType.BYT)] public sbyte m_sortType;
            [DMLField("PageNumber", DMLType.UINT)] public uint m_pageNumber;
            [DMLField("LeaderboardData", DMLType.STR)] public ByteString m_leaderboardData;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_CASTLETOURSREQUESTLEADERBOARD>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_CASTLETOURSREQUESTLEADERBOARD>.Read(buf, this);
            }
        }
        public class MSG_CASTLETOURSREQUESTMYCASTLEDATA : INetworkMessage
        {
            public const byte c_messageID = 35;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("GlobalID", DMLType.GID)] public GID m_globalID;
            [DMLField("Data", DMLType.STR)] public ByteString m_data;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_CASTLETOURSREQUESTMYCASTLEDATA>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_CASTLETOURSREQUESTMYCASTLEDATA>.Read(buf, this);
            }
        }
        public class MSG_CASTLETOURSREQUESTMYCASTLES : INetworkMessage
        {
            public const byte c_messageID = 36;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("GlobalID", DMLType.GID)] public GID m_globalID;
            [DMLField("Data", DMLType.STR)] public ByteString m_data;
            [DMLField("Days", DMLType.BYT)] public sbyte m_days;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_CASTLETOURSREQUESTMYCASTLES>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_CASTLETOURSREQUESTMYCASTLES>.Read(buf, this);
            }
        }
        public class MSG_CASTLETOURSSENDRATING : INetworkMessage
        {
            public const byte c_messageID = 37;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("Rating", DMLType.BYT)] public sbyte m_rating;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_CASTLETOURSSENDRATING>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_CASTLETOURSSENDRATING>.Read(buf, this);
            }
        }
        public class MSG_CASTLETOURSTELEPORTPLAYER : INetworkMessage
        {
            public const byte c_messageID = 38;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("CharacterID", DMLType.GID)] public GID m_characterID;
            [DMLField("TeleportData", DMLType.STR)] public ByteString m_teleportData;
            [DMLField("Source", DMLType.BYT)] public sbyte m_source;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_CASTLETOURSTELEPORTPLAYER>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_CASTLETOURSTELEPORTPLAYER>.Read(buf, this);
            }
        }
        public class MSG_CASTLETOURSTELEPORTREJECTED : INetworkMessage
        {
            public const byte c_messageID = 39;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_CASTLETOURSTELEPORTREJECTED>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_CASTLETOURSTELEPORTREJECTED>.Read(buf, this);
            }
        }
        public class MSG_CASTLETOURSVISITCASTLE : INetworkMessage
        {
            public const byte c_messageID = 40;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("VisitType", DMLType.BYT)] public sbyte m_visitType;
            [DMLField("HouseType", DMLType.BYT)] public sbyte m_houseType;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_CASTLETOURSVISITCASTLE>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_CASTLETOURSVISITCASTLE>.Read(buf, this);
            }
        }
        public class MSG_CATCHFISH : INetworkMessage
        {
            public const byte c_messageID = 41;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("SpellTemplateID", DMLType.UINT)] public uint m_spellTemplateID;
            [DMLField("IsTreasureCard", DMLType.UBYT)] public byte m_isTreasureCard;
            [DMLField("FishingPassport", DMLType.UINT)] public uint m_fishingPassport;
            [DMLField("FishID", DMLType.UINT)] public uint m_fishID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_CATCHFISH>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_CATCHFISH>.Read(buf, this);
            }
        }
        public class MSG_CATCHOFTHEDAYOPEN : INetworkMessage
        {
            public const byte c_messageID = 42;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("GlobalID", DMLType.GID)] public GID m_globalID;
            [DMLField("FishTemplateID", DMLType.UINT)] public uint m_fishTemplateID;
            [DMLField("CatchOfTheDayBonus", DMLType.UINT)] public uint m_catchOfTheDayBonus;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_CATCHOFTHEDAYOPEN>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_CATCHOFTHEDAYOPEN>.Read(buf, this);
            }
        }
        public class MSG_CATCHSUCCESS : INetworkMessage
        {
            public const byte c_messageID = 43;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("FishID", DMLType.UINT)] public uint m_fishID;
            [DMLField("Assist", DMLType.UBYT)] public byte m_assist;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_CATCHSUCCESS>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_CATCHSUCCESS>.Read(buf, this);
            }
        }
        public class MSG_CHANGEBREADCRUMBREQUEST : INetworkMessage
        {
            public const byte c_messageID = 44;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("BreadCrumbGID", DMLType.GID)] public GID m_breadCrumbGID;
            [DMLField("OtherGID", DMLType.GID)] public GID m_otherGID;
            [DMLField("AddPet", DMLType.BYT)] public sbyte m_addPet;
            [DMLField("LinkBreadCrumb", DMLType.BYT)] public sbyte m_linkBreadCrumb;
            [DMLField("SetPetBehavior", DMLType.BYT)] public sbyte m_setPetBehavior;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_CHANGEBREADCRUMBREQUEST>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_CHANGEBREADCRUMBREQUEST>.Read(buf, this);
            }
        }
        public class MSG_CREATETESTISLAND : INetworkMessage
        {
            public const byte c_messageID = 45;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("DeedGID", DMLType.UINT)] public uint m_deedGID;
            [DMLField("StructureGID", DMLType.UINT)] public uint m_structureGID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_CREATETESTISLAND>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_CREATETESTISLAND>.Read(buf, this);
            }
        }
        public class MSG_DAILYPVPOPEN : INetworkMessage
        {
            public const byte c_messageID = 46;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("ConsecutiveDays", DMLType.UBYT)] public byte m_consecutiveDays;
            [DMLField("Flags", DMLType.UBYT)] public byte m_flags;
            [DMLField("TimeLeft", DMLType.UINT)] public uint m_timeLeft;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_DAILYPVPOPEN>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_DAILYPVPOPEN>.Read(buf, this);
            }
        }
        public class MSG_DAILYQUESTCOMPLETED : INetworkMessage
        {
            public const byte c_messageID = 47;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("QuestIndex", DMLType.UINT)] public uint m_questIndex;
            [DMLField("CurrentCircle", DMLType.UBYT)] public byte m_currentCircle;
            [DMLField("ConsecutiveDays", DMLType.UBYT)] public byte m_consecutiveDays;
            [DMLField("Flags", DMLType.UBYT)] public byte m_flags;
            [DMLField("ItemTemplateID", DMLType.UINT)] public uint m_itemTemplateID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_DAILYQUESTCOMPLETED>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_DAILYQUESTCOMPLETED>.Read(buf, this);
            }
        }
        public class MSG_DAILYQUESTCSRDATA : INetworkMessage
        {
            public const byte c_messageID = 48;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("QuestData", DMLType.STR)] public ByteString m_questData;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_DAILYQUESTCSRDATA>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_DAILYQUESTCSRDATA>.Read(buf, this);
            }
        }
        public class MSG_DAILYQUESTEXPLORE : INetworkMessage
        {
            public const byte c_messageID = 49;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("LocX", DMLType.FLT)] public float m_locX;
            [DMLField("LocY", DMLType.FLT)] public float m_locY;
            [DMLField("LocZ", DMLType.FLT)] public float m_locZ;
            [DMLField("Radius", DMLType.FLT)] public float m_radius;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_DAILYQUESTEXPLORE>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_DAILYQUESTEXPLORE>.Read(buf, this);
            }
        }
        public class MSG_DAILYQUESTOPEN : INetworkMessage
        {
            public const byte c_messageID = 50;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("QuestIndex", DMLType.UINT)] public uint m_questIndex;
            [DMLField("CurrentCircle", DMLType.UBYT)] public byte m_currentCircle;
            [DMLField("ConsecutiveDays", DMLType.UBYT)] public byte m_consecutiveDays;
            [DMLField("Flags", DMLType.UBYT)] public byte m_flags;
            [DMLField("TimeLeft", DMLType.UINT)] public uint m_timeLeft;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_DAILYQUESTOPEN>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_DAILYQUESTOPEN>.Read(buf, this);
            }
        }
        public class MSG_DELETEEQUIPPEDHOUSINGITEM : INetworkMessage
        {
            public const byte c_messageID = 51;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("ObjectGID", DMLType.GID)] public GID m_objectGID;
            [DMLField("ItemGID", DMLType.GID)] public GID m_itemGID;
            [DMLField("SlotName", DMLType.STR)] public ByteString m_slotName;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_DELETEEQUIPPEDHOUSINGITEM>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_DELETEEQUIPPEDHOUSINGITEM>.Read(buf, this);
            }
        }
        public class MSG_DELETEFISH : INetworkMessage
        {
            public const byte c_messageID = 52;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("GlobalID", DMLType.GID)] public GID m_globalID;
            [DMLField("FishTemplateID", DMLType.UINT)] public uint m_fishTemplateID;
            [DMLField("Size", DMLType.FLT)] public float m_size;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_DELETEFISH>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_DELETEFISH>.Read(buf, this);
            }
        }
        public class MSG_DELETEFROMATTIC : INetworkMessage
        {
            public const byte c_messageID = 53;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("GlobalID", DMLType.GID)] public GID m_globalID;
            [DMLField("ItemID", DMLType.GID)] public GID m_itemID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_DELETEFROMATTIC>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_DELETEFROMATTIC>.Read(buf, this);
            }
        }
        public class MSG_DELETEMUSICLOOP : INetworkMessage
        {
            public const byte c_messageID = 54;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("ObjectGID", DMLType.GID)] public GID m_objectGID;
            [DMLField("LoopNumber", DMLType.UINT)] public uint m_loopNumber;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_DELETEMUSICLOOP>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_DELETEMUSICLOOP>.Read(buf, this);
            }
        }
        public class MSG_DISPLAYCATCHFISH : INetworkMessage
        {
            public const byte c_messageID = 55;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("ObjectGID", DMLType.GID)] public GID m_objectGID;
            [DMLField("FishTemplateID", DMLType.UINT)] public uint m_fishTemplateID;
            [DMLField("Size", DMLType.FLT)] public float m_size;
            [DMLField("SpellTemplateID", DMLType.UINT)] public uint m_spellTemplateID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_DISPLAYCATCHFISH>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_DISPLAYCATCHFISH>.Read(buf, this);
            }
        }
        public class MSG_DISPLAYCAUGHTFISH : INetworkMessage
        {
            public const byte c_messageID = 56;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("ObjectGID", DMLType.GID)] public GID m_objectGID;
            [DMLField("FishTemplateID", DMLType.UINT)] public uint m_fishTemplateID;
            [DMLField("Length", DMLType.FLT)] public float m_length;
            [DMLField("IsSmallFry", DMLType.UBYT)] public byte m_isSmallFry;
            [DMLField("IsWopper", DMLType.UBYT)] public byte m_isWopper;
            [DMLField("LootData", DMLType.STR)] public ByteString m_lootData;
            [DMLField("Energy", DMLType.UBYT)] public byte m_energy;
            [DMLField("IsTournamentFish", DMLType.UBYT)] public byte m_isTournamentFish;
            [DMLField("CatchOfTheDayBonus", DMLType.UINT)] public uint m_catchOfTheDayBonus;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_DISPLAYCAUGHTFISH>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_DISPLAYCAUGHTFISH>.Read(buf, this);
            }
        }
        public class MSG_DISPOSABLEDUNGEONNOOWNER : INetworkMessage
        {
            public const byte c_messageID = 57;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_DISPOSABLEDUNGEONNOOWNER>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_DISPOSABLEDUNGEONNOOWNER>.Read(buf, this);
            }
        }
        public class MSG_EMPTYLOTCHECK : INetworkMessage
        {
            public const byte c_messageID = 58;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("EmptyLotGID", DMLType.GID)] public GID m_emptyLotGID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_EMPTYLOTCHECK>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_EMPTYLOTCHECK>.Read(buf, this);
            }
        }
        public class MSG_ENDFISHINGCAST : INetworkMessage
        {
            public const byte c_messageID = 59;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("ObjectGID", DMLType.GID)] public GID m_objectGID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_ENDFISHINGCAST>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_ENDFISHINGCAST>.Read(buf, this);
            }
        }
        public class MSG_ENTERTOURNAMENTFISH : INetworkMessage
        {
            public const byte c_messageID = 60;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("FishTemplateID", DMLType.UINT)] public uint m_fishTemplateID;
            [DMLField("FishSize", DMLType.FLT)] public float m_fishSize;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_ENTERTOURNAMENTFISH>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_ENTERTOURNAMENTFISH>.Read(buf, this);
            }
        }
        public class MSG_ENTERTOURNAMENTFISHRESULT : INetworkMessage
        {
            public const byte c_messageID = 61;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("Position", DMLType.INT)] public int m_position;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_ENTERTOURNAMENTFISHRESULT>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_ENTERTOURNAMENTFISHRESULT>.Read(buf, this);
            }
        }
        public class MSG_EQUIPHOUSEMUSIC : INetworkMessage
        {
            public const byte c_messageID = 62;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("MusicPlayerGID", DMLType.GID)] public GID m_musicPlayerGID;
            [DMLField("MusicGID", DMLType.GID)] public GID m_musicGID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_EQUIPHOUSEMUSIC>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_EQUIPHOUSEMUSIC>.Read(buf, this);
            }
        }
        public class MSG_EQUIPMANNEQUINITEM : INetworkMessage
        {
            public const byte c_messageID = 63;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("MannequinGID", DMLType.GID)] public GID m_mannequinGID;
            [DMLField("IsEquip", DMLType.INT)] public int m_isEquip;
            [DMLField("ItemID", DMLType.GID)] public GID m_itemID;
            [DMLField("SlotName", DMLType.STR)] public ByteString m_slotName;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_EQUIPMANNEQUINITEM>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_EQUIPMANNEQUINITEM>.Read(buf, this);
            }
        }
        public class MSG_FISHESCAPED : INetworkMessage
        {
            public const byte c_messageID = 64;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("FishID", DMLType.UINT)] public uint m_fishID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_FISHESCAPED>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_FISHESCAPED>.Read(buf, this);
            }
        }
        public class MSG_FISHINGCSRRESULTS : INetworkMessage
        {
            public const byte c_messageID = 65;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("Result", DMLType.STR)] public ByteString m_result;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_FISHINGCSRRESULTS>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_FISHINGCSRRESULTS>.Read(buf, this);
            }
        }
        public class MSG_FISHINGSPELLCAST : INetworkMessage
        {
            public const byte c_messageID = 66;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("SpellTemplateID", DMLType.UINT)] public uint m_spellTemplateID;
            [DMLField("IsTreasureCard", DMLType.UBYT)] public byte m_isTreasureCard;
            [DMLField("FishingPassport", DMLType.UINT)] public uint m_fishingPassport;
            [DMLField("IsRecast", DMLType.UBYT)] public byte m_isRecast;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_FISHINGSPELLCAST>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_FISHINGSPELLCAST>.Read(buf, this);
            }
        }
        public class MSG_FISHTOURNAMENTLEADERBOARDOPEN : INetworkMessage
        {
            public const byte c_messageID = 67;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("ThisWeeksExpireTime", DMLType.UINT)] public uint m_thisWeeksExpireTime;
            [DMLField("LastWeeksExpireTime", DMLType.UINT)] public uint m_lastWeeksExpireTime;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_FISHTOURNAMENTLEADERBOARDOPEN>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_FISHTOURNAMENTLEADERBOARDOPEN>.Read(buf, this);
            }
        }
        public class MSG_FISHTOURNAMENTLEADERBOARDREQUEST : INetworkMessage
        {
            public const byte c_messageID = 68;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("ExpireTime", DMLType.UINT)] public uint m_expireTime;
            [DMLField("PageNumber", DMLType.UINT)] public uint m_pageNumber;
            [DMLField("Data", DMLType.STR)] public ByteString m_data;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_FISHTOURNAMENTLEADERBOARDREQUEST>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_FISHTOURNAMENTLEADERBOARDREQUEST>.Read(buf, this);
            }
        }
        public class MSG_FISHTOURNAMENTOPEN : INetworkMessage
        {
            public const byte c_messageID = 69;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("GlobalID", DMLType.GID)] public GID m_globalID;
            [DMLField("FishTemplateID", DMLType.UINT)] public uint m_fishTemplateID;
            [DMLField("FishSizeTarget", DMLType.UINT)] public uint m_fishSizeTarget;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_FISHTOURNAMENTOPEN>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_FISHTOURNAMENTOPEN>.Read(buf, this);
            }
        }
        public class MSG_GARDENINGCASTSPELL : INetworkMessage
        {
            public const byte c_messageID = 70;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("SpellTemplateID", DMLType.UINT)] public uint m_spellTemplateID;
            [DMLField("PlayerGID", DMLType.GID)] public GID m_playerGID;
            [DMLField("PositionX", DMLType.FLT)] public float m_positionX;
            [DMLField("PositionY", DMLType.FLT)] public float m_positionY;
            [DMLField("PositionZ", DMLType.FLT)] public float m_positionZ;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_GARDENINGCASTSPELL>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_GARDENINGCASTSPELL>.Read(buf, this);
            }
        }
        public class MSG_GARDENINGCOMMAND : INetworkMessage
        {
            public const byte c_messageID = 71;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("Command", DMLType.UBYT)] public byte m_command;
            [DMLField("PositionX", DMLType.FLT)] public float m_positionX;
            [DMLField("PositionY", DMLType.FLT)] public float m_positionY;
            [DMLField("PositionZ", DMLType.FLT)] public float m_positionZ;
            [DMLField("TemplateID", DMLType.UINT)] public uint m_templateID;
            [DMLField("ObjectGID", DMLType.GID)] public GID m_objectGID;
            [DMLField("ZoneGID", DMLType.GID)] public GID m_zoneGID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_GARDENINGCOMMAND>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_GARDENINGCOMMAND>.Read(buf, this);
            }
        }
        public class MSG_GARDENINGCOMMANDRESPONSE : INetworkMessage
        {
            public const byte c_messageID = 72;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_GARDENINGCOMMANDRESPONSE>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_GARDENINGCOMMANDRESPONSE>.Read(buf, this);
            }
        }
        public class MSG_GARDENINGCSRRESULTS : INetworkMessage
        {
            public const byte c_messageID = 73;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("Result", DMLType.STR)] public ByteString m_result;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_GARDENINGCSRRESULTS>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_GARDENINGCSRRESULTS>.Read(buf, this);
            }
        }
        public class MSG_GARDENINGHARVESTPLANT : INetworkMessage
        {
            public const byte c_messageID = 74;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("PositionX", DMLType.FLT)] public float m_positionX;
            [DMLField("PositionY", DMLType.FLT)] public float m_positionY;
            [DMLField("PositionZ", DMLType.FLT)] public float m_positionZ;
            [DMLField("PlantTemplateID", DMLType.UINT)] public uint m_plantTemplateID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_GARDENINGHARVESTPLANT>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_GARDENINGHARVESTPLANT>.Read(buf, this);
            }
        }
        public class MSG_GARDENINGHARVESTPLANTSECONDSPRING : INetworkMessage
        {
            public const byte c_messageID = 75;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("PositionX", DMLType.FLT)] public float m_positionX;
            [DMLField("PositionY", DMLType.FLT)] public float m_positionY;
            [DMLField("PositionZ", DMLType.FLT)] public float m_positionZ;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_GARDENINGHARVESTPLANTSECONDSPRING>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_GARDENINGHARVESTPLANTSECONDSPRING>.Read(buf, this);
            }
        }
        public class MSG_GARDENINGPELLFIZZLE : INetworkMessage
        {
            public const byte c_messageID = 76;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("FizzleType", DMLType.UBYT)] public byte m_fizzleType;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_GARDENINGPELLFIZZLE>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_GARDENINGPELLFIZZLE>.Read(buf, this);
            }
        }
        public class MSG_GARDENINGSPELLINSPECT : INetworkMessage
        {
            public const byte c_messageID = 77;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("PositionX", DMLType.FLT)] public float m_positionX;
            [DMLField("PositionY", DMLType.FLT)] public float m_positionY;
            [DMLField("PositionZ", DMLType.FLT)] public float m_positionZ;
            [DMLField("Progress", DMLType.FLT)] public float m_progress;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_GARDENINGSPELLINSPECT>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_GARDENINGSPELLINSPECT>.Read(buf, this);
            }
        }
        public class MSG_GARDENLEVELUP : INetworkMessage
        {
            public const byte c_messageID = 78;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("GlobalID", DMLType.GID)] public GID m_globalID;
            [DMLField("NewLevel", DMLType.INT)] public int m_newLevel;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_GARDENLEVELUP>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_GARDENLEVELUP>.Read(buf, this);
            }
        }
        public class MSG_HIDEHOUSINGOBJECT : INetworkMessage
        {
            public const byte c_messageID = 79;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("ObjectGID", DMLType.GID)] public GID m_objectGID;
            [DMLField("Hide", DMLType.INT)] public int m_hide;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_HIDEHOUSINGOBJECT>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_HIDEHOUSINGOBJECT>.Read(buf, this);
            }
        }
        public class MSG_HOUSINGGAMEREQUESTPOWERUPLOCATIONS : INetworkMessage
        {
            public const byte c_messageID = 80;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("ZoneGID", DMLType.GID)] public GID m_zoneGID;
            [DMLField("Data", DMLType.STR)] public ByteString m_data;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_HOUSINGGAMEREQUESTPOWERUPLOCATIONS>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_HOUSINGGAMEREQUESTPOWERUPLOCATIONS>.Read(buf, this);
            }
        }
        public class MSG_HOUSINGGAMESTATUSUPDATE : INetworkMessage
        {
            public const byte c_messageID = 81;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("Flags", DMLType.UBYT)] public byte m_flags;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_HOUSINGGAMESTATUSUPDATE>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_HOUSINGGAMESTATUSUPDATE>.Read(buf, this);
            }
        }
        public class MSG_HOUSINGGAMEUSEPOWERUP : INetworkMessage
        {
            public const byte c_messageID = 82;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_HOUSINGGAMEUSEPOWERUP>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_HOUSINGGAMEUSEPOWERUP>.Read(buf, this);
            }
        }
        public class MSG_HOUSINGOBJECTNOPICKUP : INetworkMessage
        {
            public const byte c_messageID = 83;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_HOUSINGOBJECTNOPICKUP>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_HOUSINGOBJECTNOPICKUP>.Read(buf, this);
            }
        }
        public class MSG_HOUSINGOBJECTPROXIMITY : INetworkMessage
        {
            public const byte c_messageID = 84;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("ObjectID", DMLType.GID)] public GID m_objectID;
            [DMLField("Inside", DMLType.INT)] public int m_inside;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_HOUSINGOBJECTPROXIMITY>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_HOUSINGOBJECTPROXIMITY>.Read(buf, this);
            }
        }
        public class MSG_HOUSINGZONEPLAYER : INetworkMessage
        {
            public const byte c_messageID = 85;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("HousingPlayer", DMLType.GID)] public GID m_housingPlayer;
            [DMLField("AddPlayer", DMLType.BYT)] public sbyte m_addPlayer;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_HOUSINGZONEPLAYER>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_HOUSINGZONEPLAYER>.Read(buf, this);
            }
        }
        public class MSG_HOUSINGZONEPLAYERLIST : INetworkMessage
        {
            public const byte c_messageID = 86;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("PlayerListBuffer", DMLType.STR)] public ByteString m_playerListBuffer;
            [DMLField("ZoneGID", DMLType.GID)] public GID m_zoneGID;
            [DMLField("OrbFlags", DMLType.BYT)] public sbyte m_orbFlags;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_HOUSINGZONEPLAYERLIST>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_HOUSINGZONEPLAYERLIST>.Read(buf, this);
            }
        }
        public class MSG_INTERACTIVEMUSICERROR : INetworkMessage
        {
            public const byte c_messageID = 87;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("ObjectGID", DMLType.GID)] public GID m_objectGID;
            [DMLField("Error", DMLType.BYT)] public sbyte m_error;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_INTERACTIVEMUSICERROR>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_INTERACTIVEMUSICERROR>.Read(buf, this);
            }
        }
        public class MSG_INTERACTIVEMUSICINUSE : INetworkMessage
        {
            public const byte c_messageID = 88;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("PlayerGID", DMLType.GID)] public GID m_playerGID;
            [DMLField("InUse", DMLType.BYT)] public sbyte m_inUse;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_INTERACTIVEMUSICINUSE>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_INTERACTIVEMUSICINUSE>.Read(buf, this);
            }
        }
        public class MSG_INTERACTIVEMUSICINUSE2 : INetworkMessage
        {
            public const byte c_messageID = 89;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("Data", DMLType.STR)] public ByteString m_data;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_INTERACTIVEMUSICINUSE2>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_INTERACTIVEMUSICINUSE2>.Read(buf, this);
            }
        }
        public class MSG_ISLANDSPACEBUYREQUEST : INetworkMessage
        {
            public const byte c_messageID = 90;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("GlobalID", DMLType.GID)] public GID m_globalID;
            [DMLField("WebFailure", DMLType.BYT)] public sbyte m_webFailure;
            [DMLField("Credits", DMLType.INT)] public int m_credits;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_ISLANDSPACEBUYREQUEST>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_ISLANDSPACEBUYREQUEST>.Read(buf, this);
            }
        }
        public class MSG_ISLANDSPACESHOPOPEN : INetworkMessage
        {
            public const byte c_messageID = 91;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("GlobalID", DMLType.GID)] public GID m_globalID;
            [DMLField("WebFailure", DMLType.BYT)] public sbyte m_webFailure;
            [DMLField("Credits", DMLType.INT)] public int m_credits;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_ISLANDSPACESHOPOPEN>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_ISLANDSPACESHOPOPEN>.Read(buf, this);
            }
        }
        public class MSG_MISSFISH : INetworkMessage
        {
            public const byte c_messageID = 92;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("SpellTemplateID", DMLType.UINT)] public uint m_spellTemplateID;
            [DMLField("IsTreasureCard", DMLType.UBYT)] public byte m_isTreasureCard;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_MISSFISH>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_MISSFISH>.Read(buf, this);
            }
        }
        public class MSG_MONSTERMAGICADDMONSTER : INetworkMessage
        {
            public const byte c_messageID = 93;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("GlobalID", DMLType.GID)] public GID m_globalID;
            [DMLField("SpellTemplateID", DMLType.UINT)] public uint m_spellTemplateID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_MONSTERMAGICADDMONSTER>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_MONSTERMAGICADDMONSTER>.Read(buf, this);
            }
        }
        public class MSG_MONSTERMAGICERASEMONSTER : INetworkMessage
        {
            public const byte c_messageID = 94;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("GlobalID", DMLType.GID)] public GID m_globalID;
            [DMLField("MobTemplateID", DMLType.UINT)] public uint m_mobTemplateID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_MONSTERMAGICERASEMONSTER>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_MONSTERMAGICERASEMONSTER>.Read(buf, this);
            }
        }
        public class MSG_MOVEFROMATTIC : INetworkMessage
        {
            public const byte c_messageID = 95;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("GlobalID", DMLType.GID)] public GID m_globalID;
            [DMLField("ItemID", DMLType.GID)] public GID m_itemID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_MOVEFROMATTIC>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_MOVEFROMATTIC>.Read(buf, this);
            }
        }
        public class MSG_MOVEGEARFROMGEARVAULT : INetworkMessage
        {
            public const byte c_messageID = 96;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("GearVaultGID", DMLType.GID)] public GID m_gearVaultGID;
            [DMLField("GearData", DMLType.STR)] public ByteString m_gearData;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_MOVEGEARFROMGEARVAULT>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_MOVEGEARFROMGEARVAULT>.Read(buf, this);
            }
        }
        public class MSG_MOVEGEARTOGEARVAULT : INetworkMessage
        {
            public const byte c_messageID = 97;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("GearVaultGID", DMLType.GID)] public GID m_gearVaultGID;
            [DMLField("GearGID", DMLType.GID)] public GID m_gearGID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_MOVEGEARTOGEARVAULT>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_MOVEGEARTOGEARVAULT>.Read(buf, this);
            }
        }
        public class MSG_MOVEJEWELFROMJEWELVAULT : INetworkMessage
        {
            public const byte c_messageID = 98;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("JewelVaultID", DMLType.GID)] public GID m_jewelVaultID;
            [DMLField("JewelTemplateID", DMLType.UINT)] public uint m_jewelTemplateID;
            [DMLField("Count", DMLType.UINT)] public uint m_count;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_MOVEJEWELFROMJEWELVAULT>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_MOVEJEWELFROMJEWELVAULT>.Read(buf, this);
            }
        }
        public class MSG_MOVEJEWELTOJEWELVAULT : INetworkMessage
        {
            public const byte c_messageID = 99;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("JewelVaultID", DMLType.GID)] public GID m_jewelVaultID;
            [DMLField("JewelTemplateID", DMLType.UINT)] public uint m_jewelTemplateID;
            [DMLField("Count", DMLType.UINT)] public uint m_count;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_MOVEJEWELTOJEWELVAULT>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_MOVEJEWELTOJEWELVAULT>.Read(buf, this);
            }
        }
        public class MSG_MOVESEEDFROMGARDENINGSHED : INetworkMessage
        {
            public const byte c_messageID = 100;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("GardeningShedID", DMLType.GID)] public GID m_gardeningShedID;
            [DMLField("SeedTemplateID", DMLType.UINT)] public uint m_seedTemplateID;
            [DMLField("Count", DMLType.UINT)] public uint m_count;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_MOVESEEDFROMGARDENINGSHED>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_MOVESEEDFROMGARDENINGSHED>.Read(buf, this);
            }
        }
        public class MSG_MOVESEEDTOGARDENINGSHED : INetworkMessage
        {
            public const byte c_messageID = 101;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("GardeningShedID", DMLType.GID)] public GID m_gardeningShedID;
            [DMLField("SeedTemplateID", DMLType.UINT)] public uint m_seedTemplateID;
            [DMLField("Count", DMLType.UINT)] public uint m_count;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_MOVESEEDTOGARDENINGSHED>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_MOVESEEDTOGARDENINGSHED>.Read(buf, this);
            }
        }
        public class MSG_MOVETCFROMTCVAULT : INetworkMessage
        {
            public const byte c_messageID = 102;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("TCVaultID", DMLType.GID)] public GID m_tCVaultID;
            [DMLField("SpellTemplateID", DMLType.UINT)] public uint m_spellTemplateID;
            [DMLField("EnchantmentTemplateID", DMLType.UINT)] public uint m_enchantmentTemplateID;
            [DMLField("Count", DMLType.UINT)] public uint m_count;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_MOVETCFROMTCVAULT>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_MOVETCFROMTCVAULT>.Read(buf, this);
            }
        }
        public class MSG_MOVETCTOTCVAULT : INetworkMessage
        {
            public const byte c_messageID = 103;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("TCVaultID", DMLType.GID)] public GID m_tCVaultID;
            [DMLField("SpellTemplateID", DMLType.UINT)] public uint m_spellTemplateID;
            [DMLField("EnchantmentTemplateID", DMLType.UINT)] public uint m_enchantmentTemplateID;
            [DMLField("Count", DMLType.UINT)] public uint m_count;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_MOVETCTOTCVAULT>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_MOVETCTOTCVAULT>.Read(buf, this);
            }
        }
        public class MSG_MOVETOATTIC : INetworkMessage
        {
            public const byte c_messageID = 104;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("GlobalID", DMLType.GID)] public GID m_globalID;
            [DMLField("ItemID", DMLType.GID)] public GID m_itemID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_MOVETOATTIC>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_MOVETOATTIC>.Read(buf, this);
            }
        }
        public class MSG_NOFISHSPACE : INetworkMessage
        {
            public const byte c_messageID = 105;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("GameObjectID", DMLType.GID)] public GID m_gameObjectID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_NOFISHSPACE>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_NOFISHSPACE>.Read(buf, this);
            }
        }
        public class MSG_PATCHADDATTIC : INetworkMessage
        {
            public const byte c_messageID = 106;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("BlobGID", DMLType.GID)] public GID m_blobGID;
            [DMLField("ObjectID", DMLType.GID)] public GID m_objectID;
            [DMLField("SubType", DMLType.STR)] public ByteString m_subType;
            [DMLField("PackageNumber", DMLType.UINT)] public uint m_packageNumber;
            [DMLField("VersionNumber", DMLType.UINT)] public uint m_versionNumber;
            [DMLField("GIDID", DMLType.UINT)] public uint m_gIDID;
            [DMLField("Data", DMLType.STR)] public ByteString m_data;
            [DMLField("PrimaryColorIndex", DMLType.BYT)] public sbyte m_primaryColorIndex;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PATCHADDATTIC>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PATCHADDATTIC>.Read(buf, this);
            }
        }
        public class MSG_PATCHADDHOUSINGOBJECT : INetworkMessage
        {
            public const byte c_messageID = 107;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("ObjectID", DMLType.GID)] public GID m_objectID;
            [DMLField("LocX", DMLType.FLT)] public float m_locX;
            [DMLField("LocY", DMLType.FLT)] public float m_locY;
            [DMLField("LocZ", DMLType.FLT)] public float m_locZ;
            [DMLField("Yaw", DMLType.FLT)] public float m_yaw;
            [DMLField("SubType", DMLType.STR)] public ByteString m_subType;
            [DMLField("PackageNumber", DMLType.UINT)] public uint m_packageNumber;
            [DMLField("VersionNumber", DMLType.UINT)] public uint m_versionNumber;
            [DMLField("GIDID", DMLType.UINT)] public uint m_gIDID;
            [DMLField("Data", DMLType.STR)] public ByteString m_data;
            [DMLField("ColorBits", DMLType.BYT)] public sbyte m_colorBits;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PATCHADDHOUSINGOBJECT>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PATCHADDHOUSINGOBJECT>.Read(buf, this);
            }
        }
        public class MSG_PATCHAQUARIUM : INetworkMessage
        {
            public const byte c_messageID = 108;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("Data", DMLType.STR)] public ByteString m_data;
            [DMLField("SubType", DMLType.STR)] public ByteString m_subType;
            [DMLField("PackageNumber", DMLType.UINT)] public uint m_packageNumber;
            [DMLField("VersionNumber", DMLType.UINT)] public uint m_versionNumber;
            [DMLField("GIDID", DMLType.UINT)] public uint m_gIDID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PATCHAQUARIUM>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PATCHAQUARIUM>.Read(buf, this);
            }
        }
        public class MSG_PATCHCASTLEMAGIC : INetworkMessage
        {
            public const byte c_messageID = 109;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("Data", DMLType.STR)] public ByteString m_data;
            [DMLField("SubType", DMLType.STR)] public ByteString m_subType;
            [DMLField("PackageNumber", DMLType.UINT)] public uint m_packageNumber;
            [DMLField("VersionNumber", DMLType.UINT)] public uint m_versionNumber;
            [DMLField("GIDID", DMLType.UINT)] public uint m_gIDID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PATCHCASTLEMAGIC>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PATCHCASTLEMAGIC>.Read(buf, this);
            }
        }
        public class MSG_PATCHDELETEATTIC : INetworkMessage
        {
            public const byte c_messageID = 110;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("BlobGID", DMLType.GID)] public GID m_blobGID;
            [DMLField("ObjectID", DMLType.GID)] public GID m_objectID;
            [DMLField("SubType", DMLType.STR)] public ByteString m_subType;
            [DMLField("PackageNumber", DMLType.UINT)] public uint m_packageNumber;
            [DMLField("VersionNumber", DMLType.UINT)] public uint m_versionNumber;
            [DMLField("GIDID", DMLType.UINT)] public uint m_gIDID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PATCHDELETEATTIC>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PATCHDELETEATTIC>.Read(buf, this);
            }
        }
        public class MSG_PATCHDELETEHOUSINGOBJECT : INetworkMessage
        {
            public const byte c_messageID = 111;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("SubType", DMLType.STR)] public ByteString m_subType;
            [DMLField("PackageNumber", DMLType.UINT)] public uint m_packageNumber;
            [DMLField("VersionNumber", DMLType.UINT)] public uint m_versionNumber;
            [DMLField("GIDID", DMLType.UINT)] public uint m_gIDID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PATCHDELETEHOUSINGOBJECT>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PATCHDELETEHOUSINGOBJECT>.Read(buf, this);
            }
        }
        public class MSG_PATCHEQUIPHOUSINGOBJECT : INetworkMessage
        {
            public const byte c_messageID = 112;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("Data", DMLType.STR)] public ByteString m_data;
            [DMLField("SubType", DMLType.STR)] public ByteString m_subType;
            [DMLField("PackageNumber", DMLType.UINT)] public uint m_packageNumber;
            [DMLField("VersionNumber", DMLType.UINT)] public uint m_versionNumber;
            [DMLField("GIDID", DMLType.UINT)] public uint m_gIDID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PATCHEQUIPHOUSINGOBJECT>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PATCHEQUIPHOUSINGOBJECT>.Read(buf, this);
            }
        }
        public class MSG_PATCHGARDENING : INetworkMessage
        {
            public const byte c_messageID = 113;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("Command", DMLType.UBYT)] public byte m_command;
            [DMLField("PositionX", DMLType.FLT)] public float m_positionX;
            [DMLField("PositionY", DMLType.FLT)] public float m_positionY;
            [DMLField("PositionZ", DMLType.FLT)] public float m_positionZ;
            [DMLField("PackageNumber", DMLType.UINT)] public uint m_packageNumber;
            [DMLField("VersionNumber", DMLType.UINT)] public uint m_versionNumber;
            [DMLField("GIDID", DMLType.UINT)] public uint m_gIDID;
            [DMLField("TemplateID", DMLType.UINT)] public uint m_templateID;
            [DMLField("Time", DMLType.UINT)] public uint m_time;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PATCHGARDENING>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PATCHGARDENING>.Read(buf, this);
            }
        }
        public class MSG_PATCHHOUSE : INetworkMessage
        {
            public const byte c_messageID = 114;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("DeedTemplateID", DMLType.UINT)] public uint m_deedTemplateID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PATCHHOUSE>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PATCHHOUSE>.Read(buf, this);
            }
        }
        public class MSG_PATCHHOUSINGBREADCRUMB : INetworkMessage
        {
            public const byte c_messageID = 115;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("Data", DMLType.STR)] public ByteString m_data;
            [DMLField("SubType", DMLType.STR)] public ByteString m_subType;
            [DMLField("PackageNumber", DMLType.UINT)] public uint m_packageNumber;
            [DMLField("VersionNumber", DMLType.UINT)] public uint m_versionNumber;
            [DMLField("GIDID", DMLType.UINT)] public uint m_gIDID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PATCHHOUSINGBREADCRUMB>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PATCHHOUSINGBREADCRUMB>.Read(buf, this);
            }
        }
        public class MSG_PATCHHOUSINGGARDENINGSHED : INetworkMessage
        {
            public const byte c_messageID = 116;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("Data", DMLType.STR)] public ByteString m_data;
            [DMLField("SubType", DMLType.STR)] public ByteString m_subType;
            [DMLField("PackageNumber", DMLType.UINT)] public uint m_packageNumber;
            [DMLField("VersionNumber", DMLType.UINT)] public uint m_versionNumber;
            [DMLField("GIDID", DMLType.UINT)] public uint m_gIDID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PATCHHOUSINGGARDENINGSHED>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PATCHHOUSINGGARDENINGSHED>.Read(buf, this);
            }
        }
        public class MSG_PATCHHOUSINGGEARVAULT : INetworkMessage
        {
            public const byte c_messageID = 117;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("Data", DMLType.STR)] public ByteString m_data;
            [DMLField("SubType", DMLType.STR)] public ByteString m_subType;
            [DMLField("PackageNumber", DMLType.UINT)] public uint m_packageNumber;
            [DMLField("VersionNumber", DMLType.UINT)] public uint m_versionNumber;
            [DMLField("GIDID", DMLType.UINT)] public uint m_gIDID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PATCHHOUSINGGEARVAULT>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PATCHHOUSINGGEARVAULT>.Read(buf, this);
            }
        }
        public class MSG_PATCHHOUSINGJEWELVAULT : INetworkMessage
        {
            public const byte c_messageID = 118;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("Data", DMLType.STR)] public ByteString m_data;
            [DMLField("SubType", DMLType.STR)] public ByteString m_subType;
            [DMLField("PackageNumber", DMLType.UINT)] public uint m_packageNumber;
            [DMLField("VersionNumber", DMLType.UINT)] public uint m_versionNumber;
            [DMLField("GIDID", DMLType.UINT)] public uint m_gIDID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PATCHHOUSINGJEWELVAULT>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PATCHHOUSINGJEWELVAULT>.Read(buf, this);
            }
        }
        public class MSG_PATCHHOUSINGMUSICOBJECT : INetworkMessage
        {
            public const byte c_messageID = 119;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("Data", DMLType.STR)] public ByteString m_data;
            [DMLField("SubType", DMLType.STR)] public ByteString m_subType;
            [DMLField("PackageNumber", DMLType.UINT)] public uint m_packageNumber;
            [DMLField("VersionNumber", DMLType.UINT)] public uint m_versionNumber;
            [DMLField("GIDID", DMLType.UINT)] public uint m_gIDID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PATCHHOUSINGMUSICOBJECT>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PATCHHOUSINGMUSICOBJECT>.Read(buf, this);
            }
        }
        public class MSG_PATCHHOUSINGSIGNOBJECT : INetworkMessage
        {
            public const byte c_messageID = 120;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("Data", DMLType.STR)] public ByteString m_data;
            [DMLField("SubType", DMLType.STR)] public ByteString m_subType;
            [DMLField("PackageNumber", DMLType.UINT)] public uint m_packageNumber;
            [DMLField("VersionNumber", DMLType.UINT)] public uint m_versionNumber;
            [DMLField("GIDID", DMLType.UINT)] public uint m_gIDID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PATCHHOUSINGSIGNOBJECT>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PATCHHOUSINGSIGNOBJECT>.Read(buf, this);
            }
        }
        public class MSG_PATCHHOUSINGTELEPORTEROBJECT : INetworkMessage
        {
            public const byte c_messageID = 121;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("Data", DMLType.STR)] public ByteString m_data;
            [DMLField("SubType", DMLType.STR)] public ByteString m_subType;
            [DMLField("PackageNumber", DMLType.UINT)] public uint m_packageNumber;
            [DMLField("VersionNumber", DMLType.UINT)] public uint m_versionNumber;
            [DMLField("GIDID", DMLType.UINT)] public uint m_gIDID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PATCHHOUSINGTELEPORTEROBJECT>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PATCHHOUSINGTELEPORTEROBJECT>.Read(buf, this);
            }
        }
        public class MSG_PATCHMONSTERARENA : INetworkMessage
        {
            public const byte c_messageID = 122;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("Data", DMLType.STR)] public ByteString m_data;
            [DMLField("SubType", DMLType.STR)] public ByteString m_subType;
            [DMLField("PackageNumber", DMLType.UINT)] public uint m_packageNumber;
            [DMLField("VersionNumber", DMLType.UINT)] public uint m_versionNumber;
            [DMLField("GIDID", DMLType.UINT)] public uint m_gIDID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PATCHMONSTERARENA>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PATCHMONSTERARENA>.Read(buf, this);
            }
        }
        public class MSG_PATCHMUSICLOOP : INetworkMessage
        {
            public const byte c_messageID = 123;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("SubType", DMLType.STR)] public ByteString m_subType;
            [DMLField("MusicData", DMLType.STR)] public ByteString m_musicData;
            [DMLField("PackageNumber", DMLType.UINT)] public uint m_packageNumber;
            [DMLField("VersionNumber", DMLType.UINT)] public uint m_versionNumber;
            [DMLField("GIDID", DMLType.UINT)] public uint m_gIDID;
            [DMLField("ObjectID", DMLType.GID)] public GID m_objectID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PATCHMUSICLOOP>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PATCHMUSICLOOP>.Read(buf, this);
            }
        }
        public class MSG_PATCHREMOVETEXTUREREMAP : INetworkMessage
        {
            public const byte c_messageID = 124;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("Data", DMLType.STR)] public ByteString m_data;
            [DMLField("SubType", DMLType.STR)] public ByteString m_subType;
            [DMLField("PackageNumber", DMLType.UINT)] public uint m_packageNumber;
            [DMLField("VersionNumber", DMLType.UINT)] public uint m_versionNumber;
            [DMLField("GIDID", DMLType.UINT)] public uint m_gIDID;
            [DMLField("RemapIndex", DMLType.UINT)] public uint m_remapIndex;
            [DMLField("TextureType", DMLType.UINT)] public uint m_textureType;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PATCHREMOVETEXTUREREMAP>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PATCHREMOVETEXTUREREMAP>.Read(buf, this);
            }
        }
        public class MSG_PATCHTEXTUREREMAP : INetworkMessage
        {
            public const byte c_messageID = 125;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("Data", DMLType.STR)] public ByteString m_data;
            [DMLField("SubType", DMLType.STR)] public ByteString m_subType;
            [DMLField("PackageNumber", DMLType.UINT)] public uint m_packageNumber;
            [DMLField("VersionNumber", DMLType.UINT)] public uint m_versionNumber;
            [DMLField("GIDID", DMLType.UINT)] public uint m_gIDID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PATCHTEXTUREREMAP>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PATCHTEXTUREREMAP>.Read(buf, this);
            }
        }
        public class MSG_PATCHTINTHOUSINGOBJECT : INetworkMessage
        {
            public const byte c_messageID = 126;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("SubType", DMLType.STR)] public ByteString m_subType;
            [DMLField("ColorBits", DMLType.BYT)] public sbyte m_colorBits;
            [DMLField("PackageNumber", DMLType.UINT)] public uint m_packageNumber;
            [DMLField("VersionNumber", DMLType.UINT)] public uint m_versionNumber;
            [DMLField("GIDID", DMLType.UINT)] public uint m_gIDID;
            [DMLField("ObjectID", DMLType.GID)] public GID m_objectID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PATCHTINTHOUSINGOBJECT>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PATCHTINTHOUSINGOBJECT>.Read(buf, this);
            }
        }
        public class MSG_PATCHTREASURECARDPOSTER : INetworkMessage
        {
            public const byte c_messageID = 127;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("Data", DMLType.STR)] public ByteString m_data;
            [DMLField("SubType", DMLType.STR)] public ByteString m_subType;
            [DMLField("PackageNumber", DMLType.UINT)] public uint m_packageNumber;
            [DMLField("VersionNumber", DMLType.UINT)] public uint m_versionNumber;
            [DMLField("GIDID", DMLType.UINT)] public uint m_gIDID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PATCHTREASURECARDPOSTER>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PATCHTREASURECARDPOSTER>.Read(buf, this);
            }
        }
        public class MSG_PATCHTREASURECARDVAULT : INetworkMessage
        {
            public const byte c_messageID = 128;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("Data", DMLType.STR)] public ByteString m_data;
            [DMLField("SubType", DMLType.STR)] public ByteString m_subType;
            [DMLField("PackageNumber", DMLType.UINT)] public uint m_packageNumber;
            [DMLField("VersionNumber", DMLType.UINT)] public uint m_versionNumber;
            [DMLField("GIDID", DMLType.UINT)] public uint m_gIDID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PATCHTREASURECARDVAULT>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PATCHTREASURECARDVAULT>.Read(buf, this);
            }
        }
        public class MSG_PATCHUPDATEHOUSINGOBJECT : INetworkMessage
        {
            public const byte c_messageID = 129;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("LocX", DMLType.FLT)] public float m_locX;
            [DMLField("LocY", DMLType.FLT)] public float m_locY;
            [DMLField("LocZ", DMLType.FLT)] public float m_locZ;
            [DMLField("Yaw", DMLType.FLT)] public float m_yaw;
            [DMLField("SubType", DMLType.STR)] public ByteString m_subType;
            [DMLField("PackageNumber", DMLType.UINT)] public uint m_packageNumber;
            [DMLField("VersionNumber", DMLType.UINT)] public uint m_versionNumber;
            [DMLField("GIDID", DMLType.UINT)] public uint m_gIDID;
            [DMLField("ObjectID", DMLType.GID)] public GID m_objectID;
            [DMLField("SwitchTemplateID", DMLType.BYT)] public sbyte m_switchTemplateID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PATCHUPDATEHOUSINGOBJECT>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PATCHUPDATEHOUSINGOBJECT>.Read(buf, this);
            }
        }
        public class MSG_PETTOMESCANATTIC : INetworkMessage
        {
            public const byte c_messageID = 130;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("GlobalID", DMLType.GID)] public GID m_globalID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PETTOMESCANATTIC>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PETTOMESCANATTIC>.Read(buf, this);
            }
        }
        public class MSG_PICKUPALL : INetworkMessage
        {
            public const byte c_messageID = 131;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("ItemCount", DMLType.UINT)] public uint m_itemCount;
            [DMLField("ErrorCode", DMLType.BYT)] public sbyte m_errorCode;
            [DMLField("Exceptions", DMLType.STR)] public ByteString m_exceptions;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PICKUPALL>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PICKUPALL>.Read(buf, this);
            }
        }
        public class MSG_PICKUPHOUSINGTEXTURE : INetworkMessage
        {
            public const byte c_messageID = 132;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("RemapIndex", DMLType.UINT)] public uint m_remapIndex;
            [DMLField("TextureType", DMLType.UINT)] public uint m_textureType;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PICKUPHOUSINGTEXTURE>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PICKUPHOUSINGTEXTURE>.Read(buf, this);
            }
        }
        public class MSG_PLACEHOUSINGFISH : INetworkMessage
        {
            public const byte c_messageID = 133;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("FishTemplateID", DMLType.GID)] public GID m_fishTemplateID;
            [DMLField("LocX", DMLType.FLT)] public float m_locX;
            [DMLField("LocY", DMLType.FLT)] public float m_locY;
            [DMLField("LocZ", DMLType.FLT)] public float m_locZ;
            [DMLField("Yaw", DMLType.FLT)] public float m_yaw;
            [DMLField("FishSize", DMLType.FLT)] public float m_fishSize;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PLACEHOUSINGFISH>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PLACEHOUSINGFISH>.Read(buf, this);
            }
        }
        public class MSG_PLACEHOUSINGOBJECT : INetworkMessage
        {
            public const byte c_messageID = 134;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("ObjectID", DMLType.GID)] public GID m_objectID;
            [DMLField("LocX", DMLType.FLT)] public float m_locX;
            [DMLField("LocY", DMLType.FLT)] public float m_locY;
            [DMLField("LocZ", DMLType.FLT)] public float m_locZ;
            [DMLField("Yaw", DMLType.FLT)] public float m_yaw;
            [DMLField("SwitchCastleBlock", DMLType.BYT)] public sbyte m_switchCastleBlock;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PLACEHOUSINGOBJECT>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PLACEHOUSINGOBJECT>.Read(buf, this);
            }
        }
        public class MSG_PLAYERTELEPORTINGTOFRIEND : INetworkMessage
        {
            public const byte c_messageID = 135;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("TargetCharacterID", DMLType.GID)] public GID m_targetCharacterID;
            [DMLField("OriginatorID", DMLType.GID)] public GID m_originatorID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PLAYERTELEPORTINGTOFRIEND>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PLAYERTELEPORTINGTOFRIEND>.Read(buf, this);
            }
        }
        public class MSG_PLAYINTERACTIVEMUSIC : INetworkMessage
        {
            public const byte c_messageID = 136;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("InstrumentNote", DMLType.UINT)] public uint m_instrumentNote;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PLAYINTERACTIVEMUSIC>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PLAYINTERACTIVEMUSIC>.Read(buf, this);
            }
        }
        public class MSG_PLAYINTERACTIVEMUSIC2 : INetworkMessage
        {
            public const byte c_messageID = 137;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("InstrumentNotes", DMLType.STR)] public ByteString m_instrumentNotes;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PLAYINTERACTIVEMUSIC2>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PLAYINTERACTIVEMUSIC2>.Read(buf, this);
            }
        }
        public class MSG_PLAYINTERACTIVEMUSICLOOP : INetworkMessage
        {
            public const byte c_messageID = 138;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("PlayerGID", DMLType.GID)] public GID m_playerGID;
            [DMLField("TemplateID", DMLType.UINT)] public uint m_templateID;
            [DMLField("LoopIndex", DMLType.BYT)] public sbyte m_loopIndex;
            [DMLField("ObjectGID", DMLType.GID)] public GID m_objectGID;
            [DMLField("TargetPlayers", DMLType.STR)] public ByteString m_targetPlayers;
            [DMLField("LoopOffset", DMLType.FLT)] public float m_loopOffset;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PLAYINTERACTIVEMUSICLOOP>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PLAYINTERACTIVEMUSICLOOP>.Read(buf, this);
            }
        }
        public class MSG_PLAYINTERACTIVEMUSICLOOPING : INetworkMessage
        {
            public const byte c_messageID = 139;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("InstrumentNote", DMLType.UINT)] public uint m_instrumentNote;
            [DMLField("ObjectGID", DMLType.GID)] public GID m_objectGID;
            [DMLField("LoopOffset", DMLType.FLT)] public float m_loopOffset;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PLAYINTERACTIVEMUSICLOOPING>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PLAYINTERACTIVEMUSICLOOPING>.Read(buf, this);
            }
        }
        public class MSG_PLAYINTERACTIVEMUSICLOOPING2 : INetworkMessage
        {
            public const byte c_messageID = 140;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("InstrumentNotes", DMLType.STR)] public ByteString m_instrumentNotes;
            [DMLField("ObjectGID", DMLType.GID)] public GID m_objectGID;
            [DMLField("LoopOffset", DMLType.FLT)] public float m_loopOffset;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PLAYINTERACTIVEMUSICLOOPING2>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PLAYINTERACTIVEMUSICLOOPING2>.Read(buf, this);
            }
        }
        public class MSG_REMOVEFISHFROMAQUARIUM : INetworkMessage
        {
            public const byte c_messageID = 141;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("GlobalID", DMLType.GID)] public GID m_globalID;
            [DMLField("FishTemplateID", DMLType.UINT)] public uint m_fishTemplateID;
            [DMLField("Size", DMLType.FLT)] public float m_size;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_REMOVEFISHFROMAQUARIUM>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_REMOVEFISHFROMAQUARIUM>.Read(buf, this);
            }
        }
        public class MSG_REMOVEHOUSEMUSIC : INetworkMessage
        {
            public const byte c_messageID = 142;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("MusicPlayerGID", DMLType.GID)] public GID m_musicPlayerGID;
            [DMLField("MusicTemplateID", DMLType.UINT)] public uint m_musicTemplateID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_REMOVEHOUSEMUSIC>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_REMOVEHOUSEMUSIC>.Read(buf, this);
            }
        }
        public class MSG_REPORTHOUSE : INetworkMessage
        {
            public const byte c_messageID = 143;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("CharacterID", DMLType.GID)] public GID m_characterID;
            [DMLField("DeedTemplateID", DMLType.UINT)] public uint m_deedTemplateID;
            [DMLField("Message", DMLType.WSTR)] public string m_message;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_REPORTHOUSE>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_REPORTHOUSE>.Read(buf, this);
            }
        }
        public class MSG_REQUESTALLFISH : INetworkMessage
        {
            public const byte c_messageID = 144;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("GlobalID", DMLType.GID)] public GID m_globalID;
            [DMLField("FishData", DMLType.STR)] public ByteString m_fishData;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_REQUESTALLFISH>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_REQUESTALLFISH>.Read(buf, this);
            }
        }
        public class MSG_REQUESTATTIC : INetworkMessage
        {
            public const byte c_messageID = 145;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("GlobalID", DMLType.GID)] public GID m_globalID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_REQUESTATTIC>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_REQUESTATTIC>.Read(buf, this);
            }
        }
        public class MSG_REQUESTCATCHSUCCESS : INetworkMessage
        {
            public const byte c_messageID = 146;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("SpellTemplateID", DMLType.UINT)] public uint m_spellTemplateID;
            [DMLField("FishingPassport", DMLType.UINT)] public uint m_fishingPassport;
            [DMLField("FishID", DMLType.UINT)] public uint m_fishID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_REQUESTCATCHSUCCESS>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_REQUESTCATCHSUCCESS>.Read(buf, this);
            }
        }
        public class MSG_REQUESTDEEDZONE : INetworkMessage
        {
            public const byte c_messageID = 147;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("GlobalID", DMLType.GID)] public GID m_globalID;
            [DMLField("Status", DMLType.INT)] public int m_status;
            [DMLField("Teleport", DMLType.INT)] public int m_teleport;
            [DMLField("Arguments", DMLType.STR)] public ByteString m_arguments;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_REQUESTDEEDZONE>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_REQUESTDEEDZONE>.Read(buf, this);
            }
        }
        public class MSG_REQUESTFISHHISTORY : INetworkMessage
        {
            public const byte c_messageID = 148;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("GlobalID", DMLType.GID)] public GID m_globalID;
            [DMLField("FishData", DMLType.STR)] public ByteString m_fishData;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_REQUESTFISHHISTORY>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_REQUESTFISHHISTORY>.Read(buf, this);
            }
        }
        public class MSG_REQUESTHOUSEOWNERCHARACTERID : INetworkMessage
        {
            public const byte c_messageID = 149;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("CharacterID", DMLType.GID)] public GID m_characterID;
            [DMLField("DeedTemplateID", DMLType.UINT)] public uint m_deedTemplateID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_REQUESTHOUSEOWNERCHARACTERID>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_REQUESTHOUSEOWNERCHARACTERID>.Read(buf, this);
            }
        }
        public class MSG_REQUESTHOUSETRANSFERLIST : INetworkMessage
        {
            public const byte c_messageID = 150;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("Data", DMLType.STR)] public ByteString m_data;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_REQUESTHOUSETRANSFERLIST>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_REQUESTHOUSETRANSFERLIST>.Read(buf, this);
            }
        }
        public class MSG_REQUESTHOUSINGZONE : INetworkMessage
        {
            public const byte c_messageID = 151;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("GlobalID", DMLType.GID)] public GID m_globalID;
            [DMLField("Status", DMLType.INT)] public int m_status;
            [DMLField("TemplateGID", DMLType.GID)] public GID m_templateGID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_REQUESTHOUSINGZONE>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_REQUESTHOUSINGZONE>.Read(buf, this);
            }
        }
        public class MSG_REQUESTHOUSINGZONETELEPORT : INetworkMessage
        {
            public const byte c_messageID = 152;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("TemplateGID", DMLType.GID)] public GID m_templateGID;
            [DMLField("Location", DMLType.STR)] public ByteString m_location;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_REQUESTHOUSINGZONETELEPORT>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_REQUESTHOUSINGZONETELEPORT>.Read(buf, this);
            }
        }
        public class MSG_REQUESTINTERACTIVEMUSIC : INetworkMessage
        {
            public const byte c_messageID = 153;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("ObjectGID", DMLType.GID)] public GID m_objectGID;
            [DMLField("InUse", DMLType.UINT)] public uint m_inUse;
            [DMLField("PlayerName", DMLType.STR)] public ByteString m_playerName;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_REQUESTINTERACTIVEMUSIC>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_REQUESTINTERACTIVEMUSIC>.Read(buf, this);
            }
        }
        public class MSG_REQUESTISLANDSWITCH : INetworkMessage
        {
            public const byte c_messageID = 154;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("GlobalID", DMLType.GID)] public GID m_globalID;
            [DMLField("Status", DMLType.INT)] public int m_status;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_REQUESTISLANDSWITCH>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_REQUESTISLANDSWITCH>.Read(buf, this);
            }
        }
        public class MSG_REQUESTSENDAWAY : INetworkMessage
        {
            public const byte c_messageID = 155;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("TargetPlayer", DMLType.GID)] public GID m_targetPlayer;
            [DMLField("ISCSR", DMLType.UBYT)] public byte m_iSCSR;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_REQUESTSENDAWAY>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_REQUESTSENDAWAY>.Read(buf, this);
            }
        }
        public class MSG_REQUESTTELEPORTERHOUSINGCONFIRM : INetworkMessage
        {
            public const byte c_messageID = 156;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("GlobalID", DMLType.GID)] public GID m_globalID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_REQUESTTELEPORTERHOUSINGCONFIRM>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_REQUESTTELEPORTERHOUSINGCONFIRM>.Read(buf, this);
            }
        }
        public class MSG_REQUESTTELEPORTERHOUSINGZONE : INetworkMessage
        {
            public const byte c_messageID = 157;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("GlobalID", DMLType.GID)] public GID m_globalID;
            [DMLField("Status", DMLType.INT)] public int m_status;
            [DMLField("TemplateGID", DMLType.GID)] public GID m_templateGID;
            [DMLField("StructureGID", DMLType.GID)] public GID m_structureGID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_REQUESTTELEPORTERHOUSINGZONE>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_REQUESTTELEPORTERHOUSINGZONE>.Read(buf, this);
            }
        }
        public class MSG_REQUEST_BLOBS : INetworkMessage
        {
            public const byte c_messageID = 158;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("Data", DMLType.STR)] public ByteString m_data;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_REQUEST_BLOBS>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_REQUEST_BLOBS>.Read(buf, this);
            }
        }
        public class MSG_RESPEC : INetworkMessage
        {
            public const byte c_messageID = 159;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("GlobalID", DMLType.GID)] public GID m_globalID;
            [DMLField("Points", DMLType.INT)] public int m_points;
            [DMLField("WebFailure", DMLType.BYT)] public sbyte m_webFailure;
            [DMLField("Credits", DMLType.INT)] public int m_credits;
            [DMLField("LevelIsLow", DMLType.BYT)] public sbyte m_levelIsLow;
            [DMLField("EncounteredUpgradedTierSpell", DMLType.BYT)] public sbyte m_encounteredUpgradedTierSpell;
            [DMLField("Cost", DMLType.INT)] public int m_cost;
            [DMLField("Buffer", DMLType.STR)] public ByteString m_buffer;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_RESPEC>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_RESPEC>.Read(buf, this);
            }
        }
        public class MSG_SELECTHOUSEMUSIC : INetworkMessage
        {
            public const byte c_messageID = 160;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("MusicPlayerGID", DMLType.GID)] public GID m_musicPlayerGID;
            [DMLField("MusicTemplateID", DMLType.UINT)] public uint m_musicTemplateID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_SELECTHOUSEMUSIC>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_SELECTHOUSEMUSIC>.Read(buf, this);
            }
        }
        public class MSG_SELECTMUSICSTYLE : INetworkMessage
        {
            public const byte c_messageID = 161;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("MusicPlayerGID", DMLType.GID)] public GID m_musicPlayerGID;
            [DMLField("MusicStyle", DMLType.UINT)] public uint m_musicStyle;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_SELECTMUSICSTYLE>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_SELECTMUSICSTYLE>.Read(buf, this);
            }
        }
        public class MSG_SELLFISHOPEN : INetworkMessage
        {
            public const byte c_messageID = 162;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("GlobalID", DMLType.GID)] public GID m_globalID;
            [DMLField("FishTemplateID", DMLType.UINT)] public uint m_fishTemplateID;
            [DMLField("CatchOfTheDayBonus", DMLType.UINT)] public uint m_catchOfTheDayBonus;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_SELLFISHOPEN>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_SELLFISHOPEN>.Read(buf, this);
            }
        }
        public class MSG_SELLFISHREQUEST : INetworkMessage
        {
            public const byte c_messageID = 163;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("FishData", DMLType.STR)] public ByteString m_fishData;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_SELLFISHREQUEST>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_SELLFISHREQUEST>.Read(buf, this);
            }
        }
        public class MSG_SENDHOUSINGOBJECTSTATES : INetworkMessage
        {
            public const byte c_messageID = 164;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("Data", DMLType.STR)] public ByteString m_data;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_SENDHOUSINGOBJECTSTATES>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_SENDHOUSINGOBJECTSTATES>.Read(buf, this);
            }
        }
        public class MSG_SENDHOUSINGTEXTUREINFO : INetworkMessage
        {
            public const byte c_messageID = 165;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("ObjectID", DMLType.GID)] public GID m_objectID;
            [DMLField("RemapIndex", DMLType.UINT)] public uint m_remapIndex;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_SENDHOUSINGTEXTUREINFO>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_SENDHOUSINGTEXTUREINFO>.Read(buf, this);
            }
        }
        public class MSG_SEND_BLOB : INetworkMessage
        {
            public const byte c_messageID = 166;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("Data", DMLType.STR)] public ByteString m_data;
            [DMLField("UserData", DMLType.UINT)] public uint m_userData;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_SEND_BLOB>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_SEND_BLOB>.Read(buf, this);
            }
        }
        public class MSG_SETATTICID : INetworkMessage
        {
            public const byte c_messageID = 167;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("GlobalID", DMLType.GID)] public GID m_globalID;
            [DMLField("AtticID", DMLType.GID)] public GID m_atticID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_SETATTICID>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_SETATTICID>.Read(buf, this);
            }
        }
        public class MSG_SETFISHINGPLAYERS : INetworkMessage
        {
            public const byte c_messageID = 168;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("ZoneNameID", DMLType.UINT)] public uint m_zoneNameID;
            [DMLField("Data", DMLType.STR)] public ByteString m_data;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_SETFISHINGPLAYERS>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_SETFISHINGPLAYERS>.Read(buf, this);
            }
        }
        public class MSG_SETHOUSESIGN : INetworkMessage
        {
            public const byte c_messageID = 169;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("ObjectID", DMLType.GID)] public GID m_objectID;
            [DMLField("SignText", DMLType.STR)] public ByteString m_signText;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_SETHOUSESIGN>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_SETHOUSESIGN>.Read(buf, this);
            }
        }
        public class MSG_SETHOUSETELEPORTER : INetworkMessage
        {
            public const byte c_messageID = 170;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("ObjectID", DMLType.GID)] public GID m_objectID;
            [DMLField("LocX", DMLType.FLT)] public float m_locX;
            [DMLField("LocY", DMLType.FLT)] public float m_locY;
            [DMLField("LocZ", DMLType.FLT)] public float m_locZ;
            [DMLField("Yaw", DMLType.FLT)] public float m_yaw;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_SETHOUSETELEPORTER>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_SETHOUSETELEPORTER>.Read(buf, this);
            }
        }
        public class MSG_SETHOUSINGGAMESTATE : INetworkMessage
        {
            public const byte c_messageID = 171;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("PlayerName", DMLType.STR)] public ByteString m_playerName;
            [DMLField("GameState", DMLType.UINT)] public uint m_gameState;
            [DMLField("ObjectGID", DMLType.GID)] public GID m_objectGID;
            [DMLField("Score", DMLType.STR)] public ByteString m_score;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_SETHOUSINGGAMESTATE>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_SETHOUSINGGAMESTATE>.Read(buf, this);
            }
        }
        public class MSG_SETHOUSINGPALETTE : INetworkMessage
        {
            public const byte c_messageID = 172;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("ObjectGID", DMLType.GID)] public GID m_objectGID;
            [DMLField("PrimaryColorIndex", DMLType.BYT)] public sbyte m_primaryColorIndex;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_SETHOUSINGPALETTE>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_SETHOUSINGPALETTE>.Read(buf, this);
            }
        }
        public class MSG_SETINSTANCEFISH : INetworkMessage
        {
            public const byte c_messageID = 173;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("ZoneNameID", DMLType.UINT)] public uint m_zoneNameID;
            [DMLField("Data", DMLType.STR)] public ByteString m_data;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_SETINSTANCEFISH>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_SETINSTANCEFISH>.Read(buf, this);
            }
        }
        public class MSG_SETINVISIBLETOFRIENDS : INetworkMessage
        {
            public const byte c_messageID = 174;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("InvisibleToFriends", DMLType.UBYT)] public byte m_invisibleToFriends;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_SETINVISIBLETOFRIENDS>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_SETINVISIBLETOFRIENDS>.Read(buf, this);
            }
        }
        public class MSG_SETMUSICLOOP : INetworkMessage
        {
            public const byte c_messageID = 175;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("ObjectGID", DMLType.GID)] public GID m_objectGID;
            [DMLField("Data", DMLType.STR)] public ByteString m_data;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_SETMUSICLOOP>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_SETMUSICLOOP>.Read(buf, this);
            }
        }
        public class MSG_SHOWFISHINGCAST : INetworkMessage
        {
            public const byte c_messageID = 176;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("ObjectGID", DMLType.GID)] public GID m_objectGID;
            [DMLField("PositionX", DMLType.FLT)] public float m_positionX;
            [DMLField("PositionY", DMLType.FLT)] public float m_positionY;
            [DMLField("PositionZ", DMLType.FLT)] public float m_positionZ;
            [DMLField("Yaw", DMLType.FLT)] public float m_yaw;
            [DMLField("SpellTemplateID", DMLType.UINT)] public uint m_spellTemplateID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_SHOWFISHINGCAST>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_SHOWFISHINGCAST>.Read(buf, this);
            }
        }
        public class MSG_STARTHOUSINGGAME : INetworkMessage
        {
            public const byte c_messageID = 177;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("GameType", DMLType.STR)] public ByteString m_gameType;
            [DMLField("GameInProgress", DMLType.UINT)] public uint m_gameInProgress;
            [DMLField("Data", DMLType.STR)] public ByteString m_data;
            [DMLField("IsPublic", DMLType.BYT)] public sbyte m_isPublic;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_STARTHOUSINGGAME>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_STARTHOUSINGGAME>.Read(buf, this);
            }
        }
        public class MSG_STOPINTERACTIVEMUSICLOOP : INetworkMessage
        {
            public const byte c_messageID = 178;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("PlayerGID", DMLType.GID)] public GID m_playerGID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_STOPINTERACTIVEMUSICLOOP>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_STOPINTERACTIVEMUSICLOOP>.Read(buf, this);
            }
        }
        public class MSG_SWITCHGOTOCOMMONS : INetworkMessage
        {
            public const byte c_messageID = 179;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_SWITCHGOTOCOMMONS>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_SWITCHGOTOCOMMONS>.Read(buf, this);
            }
        }
        public class MSG_TELEPORTEDTODELETEDLOT : INetworkMessage
        {
            public const byte c_messageID = 180;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("Quarantined", DMLType.BYT)] public sbyte m_quarantined;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_TELEPORTEDTODELETEDLOT>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_TELEPORTEDTODELETEDLOT>.Read(buf, this);
            }
        }
        public class MSG_UPDATEATTICCOUNT : INetworkMessage
        {
            public const byte c_messageID = 181;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("GlobalID", DMLType.GID)] public GID m_globalID;
            [DMLField("ItemCount", DMLType.INT)] public int m_itemCount;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_UPDATEATTICCOUNT>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_UPDATEATTICCOUNT>.Read(buf, this);
            }
        }
        public class MSG_UPDATEGARDENINGXP : INetworkMessage
        {
            public const byte c_messageID = 182;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("GlobalID", DMLType.GID)] public GID m_globalID;
            [DMLField("XP", DMLType.INT)] public int m_xP;
            [DMLField("Level", DMLType.INT)] public int m_level;
            [DMLField("IsPet", DMLType.BYT)] public sbyte m_isPet;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_UPDATEGARDENINGXP>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_UPDATEGARDENINGXP>.Read(buf, this);
            }
        }
        public class MSG_UPDATEHOUSINGOBJECT : INetworkMessage
        {
            public const byte c_messageID = 183;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("ObjectGID", DMLType.GID)] public GID m_objectGID;
            [DMLField("LocX", DMLType.FLT)] public float m_locX;
            [DMLField("LocY", DMLType.FLT)] public float m_locY;
            [DMLField("LocZ", DMLType.FLT)] public float m_locZ;
            [DMLField("Yaw", DMLType.FLT)] public float m_yaw;
            [DMLField("SwitchCastleBlock", DMLType.UINT)] public uint m_switchCastleBlock;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_UPDATEHOUSINGOBJECT>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_UPDATEHOUSINGOBJECT>.Read(buf, this);
            }
        }
        public class MSG_UPDATEHOUSINGPET : INetworkMessage
        {
            public const byte c_messageID = 184;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("Data", DMLType.STR)] public ByteString m_data;
            [DMLField("ZoneID", DMLType.GID)] public GID m_zoneID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_UPDATEHOUSINGPET>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_UPDATEHOUSINGPET>.Read(buf, this);
            }
        }
        public class MSG_UPDATEISLANDSPACE : INetworkMessage
        {
            public const byte c_messageID = 185;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("IslandLimit", DMLType.INT)] public int m_islandLimit;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_UPDATEISLANDSPACE>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_UPDATEISLANDSPACE>.Read(buf, this);
            }
        }
        public class MSG_UPDATEMAXIMUMHOUSINGITEMS : INetworkMessage
        {
            public const byte c_messageID = 186;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("ZoneGID", DMLType.GID)] public GID m_zoneGID;
            [DMLField("NewMaximumItems", DMLType.UINT)] public uint m_newMaximumItems;
            [DMLField("IncreaseAmount", DMLType.UINT)] public uint m_increaseAmount;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_UPDATEMAXIMUMHOUSINGITEMS>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_UPDATEMAXIMUMHOUSINGITEMS>.Read(buf, this);
            }
        }
        
        public bool Dispatch(object handlerVoid, INetworkMessage message)
        {
            Debug.Assert(message.GetServiceID() == c_serviceID);
            var handler = (Handler)handlerVoid;
            
            switch (message.GetID())
            {
                case MSG_ADDFISHTOAQUARIUM.c_messageID:
                    return handler.NetHandleAddFishToAquarium((MSG_ADDFISHTOAQUARIUM)message);
                case MSG_ADDINSTANCEFISH.c_messageID:
                    return handler.NetHandleAddInstanceFish((MSG_ADDINSTANCEFISH)message);
                case MSG_ADDTOTREASURECARDPOSTER.c_messageID:
                    return handler.NetHandleAddToTreasureCardPoster((MSG_ADDTOTREASURECARDPOSTER)message);
                case MSG_AUDITATTICRESULTS.c_messageID:
                    return handler.NetHandleAuditAtticResults((MSG_AUDITATTICRESULTS)message);
                case MSG_BEGINFISHINGCAST.c_messageID:
                    return handler.NetHandleBeginFishingCast((MSG_BEGINFISHINGCAST)message);
                case MSG_BLOCKPETSPAWN.c_messageID:
                    return handler.NetHandleBlockPetSpawn((MSG_BLOCKPETSPAWN)message);
                case MSG_BUYISLANDSPACECONFIRM.c_messageID:
                    return handler.NetHandleBuyIslandSpaceConfirm((MSG_BUYISLANDSPACECONFIRM)message);
                case MSG_CASTLEGAMESREQUEST.c_messageID:
                    return handler.NetHandleCastleGamesRequest((MSG_CASTLEGAMESREQUEST)message);
                case MSG_CASTLEGAMESREQUESTGAMEDATA.c_messageID:
                    return handler.NetHandleCastleGamesRequestGameData((MSG_CASTLEGAMESREQUESTGAMEDATA)message);
                case MSG_CASTLEGAMESTELEPORTREJECTED.c_messageID:
                    return handler.NetHandleCastleGamesTeleportRejected((MSG_CASTLEGAMESTELEPORTREJECTED)message);
                case MSG_CASTLEMAGICCHANGEACTION.c_messageID:
                    return handler.NetHandleCastleMagicChangeAction((MSG_CASTLEMAGICCHANGEACTION)message);
                case MSG_CASTLEMAGICCLEAR.c_messageID:
                    return handler.NetHandleCastleMagicClear((MSG_CASTLEMAGICCLEAR)message);
                case MSG_CASTLEMAGICCURRENTSTATE.c_messageID:
                    return handler.NetHandleCastleMagicCurrentState((MSG_CASTLEMAGICCURRENTSTATE)message);
                case MSG_CASTLEMAGICORB.c_messageID:
                    return handler.NetHandleCastleMagicOrb((MSG_CASTLEMAGICORB)message);
                case MSG_CASTLEMAGICREQUESTALLOWMOUNTS.c_messageID:
                    return handler.NetHandleCastleMagicRequestAllowMounts((MSG_CASTLEMAGICREQUESTALLOWMOUNTS)message);
                case MSG_CASTLEMAGICREQUESTALLOWPVP.c_messageID:
                    return handler.NetHandleCastleMagicRequestAllowPVP((MSG_CASTLEMAGICREQUESTALLOWPVP)message);
                case MSG_CASTLEMAGICREQUESTPLAYERTELEPORT.c_messageID:
                    return handler.NetHandleCastleMagicRequestPlayerTeleport((MSG_CASTLEMAGICREQUESTPLAYERTELEPORT)message);
                case MSG_CASTLEMAGICREQUESTRANDOM.c_messageID:
                    return handler.NetHandleCastleMagicRequestRandom((MSG_CASTLEMAGICREQUESTRANDOM)message);
                case MSG_CASTLEMAGICREQUESTUSE.c_messageID:
                    return handler.NetHandleCastleMagicRequestUse((MSG_CASTLEMAGICREQUESTUSE)message);
                case MSG_CASTLEMAGICTUTORIAL.c_messageID:
                    return handler.NetHandleCastleMagicTutorial((MSG_CASTLEMAGICTUTORIAL)message);
                case MSG_CASTLEMAGICUPDATESTATE.c_messageID:
                    return handler.NetHandleCastleMagicUpdateState((MSG_CASTLEMAGICUPDATESTATE)message);
                case MSG_CASTLETOURSADD.c_messageID:
                    return handler.NetHandleCastleToursAdd((MSG_CASTLETOURSADD)message);
                case MSG_CASTLETOURSADDRESULT.c_messageID:
                    return handler.NetHandleCastleToursAddResult((MSG_CASTLETOURSADDRESULT)message);
                case MSG_CASTLETOURSCSRRESULTS.c_messageID:
                    return handler.NetHandleCastleToursCSRResults((MSG_CASTLETOURSCSRRESULTS)message);
                case MSG_CASTLETOURSDELETECHARACTER.c_messageID:
                    return handler.NetHandleCastleToursDeleteCharacter((MSG_CASTLETOURSDELETECHARACTER)message);
                case MSG_CASTLETOURSENABLERATINGDISPLAY.c_messageID:
                    return handler.NetHandleCastleToursEnableRatingDisplay((MSG_CASTLETOURSENABLERATINGDISPLAY)message);
                case MSG_CASTLETOURSLEADERBOARDRESPONSE.c_messageID:
                    return handler.NetHandleCastleToursLeaderboardResponse((MSG_CASTLETOURSLEADERBOARDRESPONSE)message);
                case MSG_CASTLETOURSPLAYERBANNED.c_messageID:
                    return handler.NetHandleCastleToursPlayerBanned((MSG_CASTLETOURSPLAYERBANNED)message);
                case MSG_CASTLETOURSRATINGDISPLAY.c_messageID:
                    return handler.NetHandleCastleToursRatingDisplay((MSG_CASTLETOURSRATINGDISPLAY)message);
                case MSG_CASTLETOURSREMOVE.c_messageID:
                    return handler.NetHandleCastleToursRemove((MSG_CASTLETOURSREMOVE)message);
                case MSG_CASTLETOURSREMOVERESULT.c_messageID:
                    return handler.NetHandleCastleToursRemoveResult((MSG_CASTLETOURSREMOVERESULT)message);
                case MSG_CASTLETOURSREQUEST.c_messageID:
                    return handler.NetHandleCastleToursRequest((MSG_CASTLETOURSREQUEST)message);
                case MSG_CASTLETOURSREQUESTFRIENDS.c_messageID:
                    return handler.NetHandleCastleToursRequestFriends((MSG_CASTLETOURSREQUESTFRIENDS)message);
                case MSG_CASTLETOURSREQUESTLEADERBOARD.c_messageID:
                    return handler.NetHandleCastleToursRequestLeaderboard((MSG_CASTLETOURSREQUESTLEADERBOARD)message);
                case MSG_CASTLETOURSREQUESTMYCASTLEDATA.c_messageID:
                    return handler.NetHandleCastleToursRequestMyCastleData((MSG_CASTLETOURSREQUESTMYCASTLEDATA)message);
                case MSG_CASTLETOURSREQUESTMYCASTLES.c_messageID:
                    return handler.NetHandleCastleToursRequestMyCastles((MSG_CASTLETOURSREQUESTMYCASTLES)message);
                case MSG_CASTLETOURSSENDRATING.c_messageID:
                    return handler.NetHandleCastleToursSendRating((MSG_CASTLETOURSSENDRATING)message);
                case MSG_CASTLETOURSTELEPORTPLAYER.c_messageID:
                    return handler.NetHandleCastleToursTeleportPlayer((MSG_CASTLETOURSTELEPORTPLAYER)message);
                case MSG_CASTLETOURSTELEPORTREJECTED.c_messageID:
                    return handler.NetHandleCastleToursTeleportRejected((MSG_CASTLETOURSTELEPORTREJECTED)message);
                case MSG_CASTLETOURSVISITCASTLE.c_messageID:
                    return handler.NetHandleCastleToursVisitCastle((MSG_CASTLETOURSVISITCASTLE)message);
                case MSG_CATCHFISH.c_messageID:
                    return handler.NetHandleCatchFish((MSG_CATCHFISH)message);
                case MSG_CATCHOFTHEDAYOPEN.c_messageID:
                    return handler.NetHandleCatchOfTheDayOpen((MSG_CATCHOFTHEDAYOPEN)message);
                case MSG_CATCHSUCCESS.c_messageID:
                    return handler.NetHandleCatchSuccess((MSG_CATCHSUCCESS)message);
                case MSG_CHANGEBREADCRUMBREQUEST.c_messageID:
                    return handler.NetHandleChangeBreadCrumbRequest((MSG_CHANGEBREADCRUMBREQUEST)message);
                case MSG_CREATETESTISLAND.c_messageID:
                    return handler.NetHandleCreateTestIsland((MSG_CREATETESTISLAND)message);
                case MSG_DAILYPVPOPEN.c_messageID:
                    return handler.NetHandleDailyPvPOpen((MSG_DAILYPVPOPEN)message);
                case MSG_DAILYQUESTCOMPLETED.c_messageID:
                    return handler.NetHandleDailyQuestCompleted((MSG_DAILYQUESTCOMPLETED)message);
                case MSG_DAILYQUESTCSRDATA.c_messageID:
                    return handler.NetHandleDailyQuestCSRData((MSG_DAILYQUESTCSRDATA)message);
                case MSG_DAILYQUESTEXPLORE.c_messageID:
                    return handler.NetHandleDailyQuestExplore((MSG_DAILYQUESTEXPLORE)message);
                case MSG_DAILYQUESTOPEN.c_messageID:
                    return handler.NetHandleDailyQuestOpen((MSG_DAILYQUESTOPEN)message);
                case MSG_DELETEEQUIPPEDHOUSINGITEM.c_messageID:
                    return handler.NetHandleDeleteEquippedHousingItem((MSG_DELETEEQUIPPEDHOUSINGITEM)message);
                case MSG_DELETEFISH.c_messageID:
                    return handler.NetHandleDeleteFish((MSG_DELETEFISH)message);
                case MSG_DELETEFROMATTIC.c_messageID:
                    return handler.NetHandleDeleteFromAttic((MSG_DELETEFROMATTIC)message);
                case MSG_DELETEMUSICLOOP.c_messageID:
                    return handler.NetHandleDeleteMusicLoop((MSG_DELETEMUSICLOOP)message);
                case MSG_DISPLAYCATCHFISH.c_messageID:
                    return handler.NetHandleDisplayCatchFish((MSG_DISPLAYCATCHFISH)message);
                case MSG_DISPLAYCAUGHTFISH.c_messageID:
                    return handler.NetHandleDisplayCaughtFish((MSG_DISPLAYCAUGHTFISH)message);
                case MSG_DISPOSABLEDUNGEONNOOWNER.c_messageID:
                    return handler.NetHandleDisposableDungeonNoOwner((MSG_DISPOSABLEDUNGEONNOOWNER)message);
                case MSG_EMPTYLOTCHECK.c_messageID:
                    return handler.NetHandleEmptyLotCheck((MSG_EMPTYLOTCHECK)message);
                case MSG_ENDFISHINGCAST.c_messageID:
                    return handler.NetHandleEndFishingCast((MSG_ENDFISHINGCAST)message);
                case MSG_ENTERTOURNAMENTFISH.c_messageID:
                    return handler.NetHandleEnterTournamentFish((MSG_ENTERTOURNAMENTFISH)message);
                case MSG_ENTERTOURNAMENTFISHRESULT.c_messageID:
                    return handler.NetHandleEnterTournamentFishResult((MSG_ENTERTOURNAMENTFISHRESULT)message);
                case MSG_EQUIPHOUSEMUSIC.c_messageID:
                    return handler.NetHandleEquipHouseMusic((MSG_EQUIPHOUSEMUSIC)message);
                case MSG_EQUIPMANNEQUINITEM.c_messageID:
                    return handler.NetHandleEquipMannequinItem((MSG_EQUIPMANNEQUINITEM)message);
                case MSG_FISHESCAPED.c_messageID:
                    return handler.NetHandleFishEscaped((MSG_FISHESCAPED)message);
                case MSG_FISHINGCSRRESULTS.c_messageID:
                    return handler.NetHandleFishingCSRResults((MSG_FISHINGCSRRESULTS)message);
                case MSG_FISHINGSPELLCAST.c_messageID:
                    return handler.NetHandleFishingSpellCast((MSG_FISHINGSPELLCAST)message);
                case MSG_FISHTOURNAMENTLEADERBOARDOPEN.c_messageID:
                    return handler.NetHandleFishTournamentLeaderBoardOpen((MSG_FISHTOURNAMENTLEADERBOARDOPEN)message);
                case MSG_FISHTOURNAMENTLEADERBOARDREQUEST.c_messageID:
                    return handler.NetHandleFishTournamentLeaderBoardRequest((MSG_FISHTOURNAMENTLEADERBOARDREQUEST)message);
                case MSG_FISHTOURNAMENTOPEN.c_messageID:
                    return handler.NetHandleFishTournamentOpen((MSG_FISHTOURNAMENTOPEN)message);
                case MSG_GARDENINGCASTSPELL.c_messageID:
                    return handler.NetHandleGardeningCastSpell((MSG_GARDENINGCASTSPELL)message);
                case MSG_GARDENINGCOMMAND.c_messageID:
                    return handler.NetHandleGardeningCommand((MSG_GARDENINGCOMMAND)message);
                case MSG_GARDENINGCOMMANDRESPONSE.c_messageID:
                    return handler.NetHandleGardeningCommandResponse((MSG_GARDENINGCOMMANDRESPONSE)message);
                case MSG_GARDENINGCSRRESULTS.c_messageID:
                    return handler.NetHandleGardeningCSRResults((MSG_GARDENINGCSRRESULTS)message);
                case MSG_GARDENINGHARVESTPLANT.c_messageID:
                    return handler.NetHandleGardeningHarvestPlant((MSG_GARDENINGHARVESTPLANT)message);
                case MSG_GARDENINGHARVESTPLANTSECONDSPRING.c_messageID:
                    return handler.NetHandleGardeningHarvestPlantSecondSpring((MSG_GARDENINGHARVESTPLANTSECONDSPRING)message);
                case MSG_GARDENINGPELLFIZZLE.c_messageID:
                    return handler.NetHandleGardeningSpellFizzle((MSG_GARDENINGPELLFIZZLE)message);
                case MSG_GARDENINGSPELLINSPECT.c_messageID:
                    return handler.NetHandleGardeningSpellInspect((MSG_GARDENINGSPELLINSPECT)message);
                case MSG_GARDENLEVELUP.c_messageID:
                    return handler.NetHandleGardenLevelUp((MSG_GARDENLEVELUP)message);
                case MSG_HIDEHOUSINGOBJECT.c_messageID:
                    return handler.NetHandleHideHousingObject((MSG_HIDEHOUSINGOBJECT)message);
                case MSG_HOUSINGGAMEREQUESTPOWERUPLOCATIONS.c_messageID:
                    return handler.NetHandleHousingGameRequestPoweruplocations((MSG_HOUSINGGAMEREQUESTPOWERUPLOCATIONS)message);
                case MSG_HOUSINGGAMESTATUSUPDATE.c_messageID:
                    return handler.NetHandleHousingGameStatusUpdate((MSG_HOUSINGGAMESTATUSUPDATE)message);
                case MSG_HOUSINGGAMEUSEPOWERUP.c_messageID:
                    return handler.NetHandleHousingGameUsePowerup((MSG_HOUSINGGAMEUSEPOWERUP)message);
                case MSG_HOUSINGOBJECTNOPICKUP.c_messageID:
                    return handler.NetHandleHousingObjectNoPickup((MSG_HOUSINGOBJECTNOPICKUP)message);
                case MSG_HOUSINGOBJECTPROXIMITY.c_messageID:
                    return handler.NetHandleHousingObjectProximity((MSG_HOUSINGOBJECTPROXIMITY)message);
                case MSG_HOUSINGZONEPLAYER.c_messageID:
                    return handler.NetHandleHousingZonePlayer((MSG_HOUSINGZONEPLAYER)message);
                case MSG_HOUSINGZONEPLAYERLIST.c_messageID:
                    return handler.NetHandleHousingZonePlayerList((MSG_HOUSINGZONEPLAYERLIST)message);
                case MSG_INTERACTIVEMUSICERROR.c_messageID:
                    return handler.NetHandleInteractiveMusicError((MSG_INTERACTIVEMUSICERROR)message);
                case MSG_INTERACTIVEMUSICINUSE.c_messageID:
                    return handler.NetHandleInteractiveMusicInUse((MSG_INTERACTIVEMUSICINUSE)message);
                case MSG_INTERACTIVEMUSICINUSE2.c_messageID:
                    return handler.NetHandleInteractiveMusicInUse2((MSG_INTERACTIVEMUSICINUSE2)message);
                case MSG_ISLANDSPACEBUYREQUEST.c_messageID:
                    return handler.NetHandleIslandSpaceBuyRequest((MSG_ISLANDSPACEBUYREQUEST)message);
                case MSG_ISLANDSPACESHOPOPEN.c_messageID:
                    return handler.NetHandleIslandSpaceShopOpen((MSG_ISLANDSPACESHOPOPEN)message);
                case MSG_MISSFISH.c_messageID:
                    return handler.NetHandleMissFish((MSG_MISSFISH)message);
                case MSG_MONSTERMAGICADDMONSTER.c_messageID:
                    return handler.NetHandleMonsterMagicAddMonster((MSG_MONSTERMAGICADDMONSTER)message);
                case MSG_MONSTERMAGICERASEMONSTER.c_messageID:
                    return handler.NetHandleMonsterMagicEraseMonster((MSG_MONSTERMAGICERASEMONSTER)message);
                case MSG_MOVEFROMATTIC.c_messageID:
                    return handler.NetHandleMoveFromAttic((MSG_MOVEFROMATTIC)message);
                case MSG_MOVEGEARFROMGEARVAULT.c_messageID:
                    return handler.NetHandleMoveGearFromGearVault((MSG_MOVEGEARFROMGEARVAULT)message);
                case MSG_MOVEGEARTOGEARVAULT.c_messageID:
                    return handler.NetHandleMoveGearToGearVault((MSG_MOVEGEARTOGEARVAULT)message);
                case MSG_MOVEJEWELFROMJEWELVAULT.c_messageID:
                    return handler.NetHandleMoveJewelFromJewelVault((MSG_MOVEJEWELFROMJEWELVAULT)message);
                case MSG_MOVEJEWELTOJEWELVAULT.c_messageID:
                    return handler.NetHandleMoveJewelToJewelVault((MSG_MOVEJEWELTOJEWELVAULT)message);
                case MSG_MOVESEEDFROMGARDENINGSHED.c_messageID:
                    return handler.NetHandleMoveSeedFromGardeningShed((MSG_MOVESEEDFROMGARDENINGSHED)message);
                case MSG_MOVESEEDTOGARDENINGSHED.c_messageID:
                    return handler.NetHandleMoveSeedToGardeningShed((MSG_MOVESEEDTOGARDENINGSHED)message);
                case MSG_MOVETCFROMTCVAULT.c_messageID:
                    return handler.NetHandleMoveTCFromTCVault((MSG_MOVETCFROMTCVAULT)message);
                case MSG_MOVETCTOTCVAULT.c_messageID:
                    return handler.NetHandleMoveTCToTCVault((MSG_MOVETCTOTCVAULT)message);
                case MSG_MOVETOATTIC.c_messageID:
                    return handler.NetHandleMoveToAttic((MSG_MOVETOATTIC)message);
                case MSG_NOFISHSPACE.c_messageID:
                    return handler.NetHandleNoFishSpace((MSG_NOFISHSPACE)message);
                case MSG_PATCHADDATTIC.c_messageID:
                    return handler.NetHandlePatchAddAttic((MSG_PATCHADDATTIC)message);
                case MSG_PATCHADDHOUSINGOBJECT.c_messageID:
                    return handler.NetHandlePatchAddHousingObject((MSG_PATCHADDHOUSINGOBJECT)message);
                case MSG_PATCHAQUARIUM.c_messageID:
                    return handler.NetHandlePatchAquarium((MSG_PATCHAQUARIUM)message);
                case MSG_PATCHCASTLEMAGIC.c_messageID:
                    return handler.NetHandlePatchCastleMagic((MSG_PATCHCASTLEMAGIC)message);
                case MSG_PATCHDELETEATTIC.c_messageID:
                    return handler.NetHandlePatchDeleteAttic((MSG_PATCHDELETEATTIC)message);
                case MSG_PATCHDELETEHOUSINGOBJECT.c_messageID:
                    return handler.NetHandlePatchDeleteHousingObject((MSG_PATCHDELETEHOUSINGOBJECT)message);
                case MSG_PATCHEQUIPHOUSINGOBJECT.c_messageID:
                    return handler.NetHandlePatchEquipHousingObject((MSG_PATCHEQUIPHOUSINGOBJECT)message);
                case MSG_PATCHGARDENING.c_messageID:
                    return handler.NetHandlePatchGardening((MSG_PATCHGARDENING)message);
                case MSG_PATCHHOUSE.c_messageID:
                    return handler.NetHandlePatchHouse((MSG_PATCHHOUSE)message);
                case MSG_PATCHHOUSINGBREADCRUMB.c_messageID:
                    return handler.NetHandlePatchHousingBreadCrumb((MSG_PATCHHOUSINGBREADCRUMB)message);
                case MSG_PATCHHOUSINGGARDENINGSHED.c_messageID:
                    return handler.NetHandlePatchHousingGardeningShed((MSG_PATCHHOUSINGGARDENINGSHED)message);
                case MSG_PATCHHOUSINGGEARVAULT.c_messageID:
                    return handler.NetHandlePatchHousingGearVault((MSG_PATCHHOUSINGGEARVAULT)message);
                case MSG_PATCHHOUSINGJEWELVAULT.c_messageID:
                    return handler.NetHandlePatchHousingJewelVault((MSG_PATCHHOUSINGJEWELVAULT)message);
                case MSG_PATCHHOUSINGMUSICOBJECT.c_messageID:
                    return handler.NetHandlePatchHousingMusicObject((MSG_PATCHHOUSINGMUSICOBJECT)message);
                case MSG_PATCHHOUSINGSIGNOBJECT.c_messageID:
                    return handler.NetHandlePatchHousingSignObject((MSG_PATCHHOUSINGSIGNOBJECT)message);
                case MSG_PATCHHOUSINGTELEPORTEROBJECT.c_messageID:
                    return handler.NetHandlePatchHousingTeleporterObject((MSG_PATCHHOUSINGTELEPORTEROBJECT)message);
                case MSG_PATCHMONSTERARENA.c_messageID:
                    return handler.NetHandlePatchMonsterArena((MSG_PATCHMONSTERARENA)message);
                case MSG_PATCHMUSICLOOP.c_messageID:
                    return handler.NetHandlePatchMusicLoop((MSG_PATCHMUSICLOOP)message);
                case MSG_PATCHREMOVETEXTUREREMAP.c_messageID:
                    return handler.NetHandlePatchRemoveTextureRemap((MSG_PATCHREMOVETEXTUREREMAP)message);
                case MSG_PATCHTEXTUREREMAP.c_messageID:
                    return handler.NetHandlePatchTextureRemap((MSG_PATCHTEXTUREREMAP)message);
                case MSG_PATCHTINTHOUSINGOBJECT.c_messageID:
                    return handler.NetHandlePatchTintHousingObject((MSG_PATCHTINTHOUSINGOBJECT)message);
                case MSG_PATCHTREASURECARDPOSTER.c_messageID:
                    return handler.NetHandlePatchTreasureCardPoster((MSG_PATCHTREASURECARDPOSTER)message);
                case MSG_PATCHTREASURECARDVAULT.c_messageID:
                    return handler.NetHandlePatchTreasureCardVault((MSG_PATCHTREASURECARDVAULT)message);
                case MSG_PATCHUPDATEHOUSINGOBJECT.c_messageID:
                    return handler.NetHandlePatchUpdateHousingObject((MSG_PATCHUPDATEHOUSINGOBJECT)message);
                case MSG_PETTOMESCANATTIC.c_messageID:
                    return handler.NetHandlePetTomeScanAttic((MSG_PETTOMESCANATTIC)message);
                case MSG_PICKUPALL.c_messageID:
                    return handler.NetHandlePickUpAll((MSG_PICKUPALL)message);
                case MSG_PICKUPHOUSINGTEXTURE.c_messageID:
                    return handler.NetHandlePickUpHousingTexture((MSG_PICKUPHOUSINGTEXTURE)message);
                case MSG_PLACEHOUSINGFISH.c_messageID:
                    return handler.NetHandlePlaceHousingFish((MSG_PLACEHOUSINGFISH)message);
                case MSG_PLACEHOUSINGOBJECT.c_messageID:
                    return handler.NetHandlePlaceHousingObject((MSG_PLACEHOUSINGOBJECT)message);
                case MSG_PLAYERTELEPORTINGTOFRIEND.c_messageID:
                    return handler.NetHandlePlayerTeleportingToFriend((MSG_PLAYERTELEPORTINGTOFRIEND)message);
                case MSG_PLAYINTERACTIVEMUSIC.c_messageID:
                    return handler.NetHandlePlayInteractiveMusic((MSG_PLAYINTERACTIVEMUSIC)message);
                case MSG_PLAYINTERACTIVEMUSIC2.c_messageID:
                    return handler.NetHandlePlayInteractiveMusic2((MSG_PLAYINTERACTIVEMUSIC2)message);
                case MSG_PLAYINTERACTIVEMUSICLOOP.c_messageID:
                    return handler.NetHandlePlayInteractiveMusicLoop((MSG_PLAYINTERACTIVEMUSICLOOP)message);
                case MSG_PLAYINTERACTIVEMUSICLOOPING.c_messageID:
                    return handler.NetHandlePlayInteractiveMusicLooping((MSG_PLAYINTERACTIVEMUSICLOOPING)message);
                case MSG_PLAYINTERACTIVEMUSICLOOPING2.c_messageID:
                    return handler.NetHandlePlayInteractiveMusicLooping2((MSG_PLAYINTERACTIVEMUSICLOOPING2)message);
                case MSG_REMOVEFISHFROMAQUARIUM.c_messageID:
                    return handler.NetHandleRemoveFishFromAquarium((MSG_REMOVEFISHFROMAQUARIUM)message);
                case MSG_REMOVEHOUSEMUSIC.c_messageID:
                    return handler.NetHandleRemoveHouseMusic((MSG_REMOVEHOUSEMUSIC)message);
                case MSG_REPORTHOUSE.c_messageID:
                    return handler.NetHandleReportHouse((MSG_REPORTHOUSE)message);
                case MSG_REQUESTALLFISH.c_messageID:
                    return handler.NetHandleAddRequestAllFish((MSG_REQUESTALLFISH)message);
                case MSG_REQUESTATTIC.c_messageID:
                    return handler.NetHandleRequestAttic((MSG_REQUESTATTIC)message);
                case MSG_REQUESTCATCHSUCCESS.c_messageID:
                    return handler.NetHandleRequestCatchSuccess((MSG_REQUESTCATCHSUCCESS)message);
                case MSG_REQUESTDEEDZONE.c_messageID:
                    return handler.NetHandleRequestDeedZone((MSG_REQUESTDEEDZONE)message);
                case MSG_REQUESTFISHHISTORY.c_messageID:
                    return handler.NetHandleAddRequestFishHistory((MSG_REQUESTFISHHISTORY)message);
                case MSG_REQUESTHOUSEOWNERCHARACTERID.c_messageID:
                    return handler.NetHandleRequestHouseOwnerCharacterID((MSG_REQUESTHOUSEOWNERCHARACTERID)message);
                case MSG_REQUESTHOUSETRANSFERLIST.c_messageID:
                    return handler.NetHandleRequestHouseTransferList((MSG_REQUESTHOUSETRANSFERLIST)message);
                case MSG_REQUESTHOUSINGZONE.c_messageID:
                    return handler.NetHandleRequestHousingZone((MSG_REQUESTHOUSINGZONE)message);
                case MSG_REQUESTHOUSINGZONETELEPORT.c_messageID:
                    return handler.NetHandleRequestHousingZoneTeleport((MSG_REQUESTHOUSINGZONETELEPORT)message);
                case MSG_REQUESTINTERACTIVEMUSIC.c_messageID:
                    return handler.NetHandleRequestInteractiveMusic((MSG_REQUESTINTERACTIVEMUSIC)message);
                case MSG_REQUESTISLANDSWITCH.c_messageID:
                    return handler.NetHandleRequestIslandSwitch((MSG_REQUESTISLANDSWITCH)message);
                case MSG_REQUESTSENDAWAY.c_messageID:
                    return handler.NetHandleRequestSendAway((MSG_REQUESTSENDAWAY)message);
                case MSG_REQUESTTELEPORTERHOUSINGCONFIRM.c_messageID:
                    return handler.NetHandleRequestTeleporterHousingConfirm((MSG_REQUESTTELEPORTERHOUSINGCONFIRM)message);
                case MSG_REQUESTTELEPORTERHOUSINGZONE.c_messageID:
                    return handler.NetHandleRequestTeleporterHousingZone((MSG_REQUESTTELEPORTERHOUSINGZONE)message);
                case MSG_REQUEST_BLOBS.c_messageID:
                    return handler.NetHandleRequestBlobs((MSG_REQUEST_BLOBS)message);
                case MSG_RESPEC.c_messageID:
                    return handler.NetHandleRespec((MSG_RESPEC)message);
                case MSG_SELECTHOUSEMUSIC.c_messageID:
                    return handler.NetHandleSelectHouseMusic((MSG_SELECTHOUSEMUSIC)message);
                case MSG_SELECTMUSICSTYLE.c_messageID:
                    return handler.NetHandleSelectMusicStyle((MSG_SELECTMUSICSTYLE)message);
                case MSG_SELLFISHOPEN.c_messageID:
                    return handler.NetHandleSellFishOpen((MSG_SELLFISHOPEN)message);
                case MSG_SELLFISHREQUEST.c_messageID:
                    return handler.NetHandleSellFishRequest((MSG_SELLFISHREQUEST)message);
                case MSG_SENDHOUSINGOBJECTSTATES.c_messageID:
                    return handler.NetHandleSendHousingObjectStates((MSG_SENDHOUSINGOBJECTSTATES)message);
                case MSG_SENDHOUSINGTEXTUREINFO.c_messageID:
                    return handler.NetHandleSendHousingTextureInfo((MSG_SENDHOUSINGTEXTUREINFO)message);
                case MSG_SEND_BLOB.c_messageID:
                    return handler.NetHandleSendBlob((MSG_SEND_BLOB)message);
                case MSG_SETATTICID.c_messageID:
                    return handler.NetHandleSetAtticID((MSG_SETATTICID)message);
                case MSG_SETFISHINGPLAYERS.c_messageID:
                    return handler.NetHandleSetFishingPlayers((MSG_SETFISHINGPLAYERS)message);
                case MSG_SETHOUSESIGN.c_messageID:
                    return handler.NetHandleSetHouseSign((MSG_SETHOUSESIGN)message);
                case MSG_SETHOUSETELEPORTER.c_messageID:
                    return handler.NetHandleSetHouseTeleporter((MSG_SETHOUSETELEPORTER)message);
                case MSG_SETHOUSINGGAMESTATE.c_messageID:
                    return handler.NetHandleSetHousingGameState((MSG_SETHOUSINGGAMESTATE)message);
                case MSG_SETHOUSINGPALETTE.c_messageID:
                    return handler.NetHandleSetHousingPalette((MSG_SETHOUSINGPALETTE)message);
                case MSG_SETINSTANCEFISH.c_messageID:
                    return handler.NetHandleSetInstanceFish((MSG_SETINSTANCEFISH)message);
                case MSG_SETINVISIBLETOFRIENDS.c_messageID:
                    return handler.NetHandleInvisibleToFriends((MSG_SETINVISIBLETOFRIENDS)message);
                case MSG_SETMUSICLOOP.c_messageID:
                    return handler.NetHandleSetMusicLoop((MSG_SETMUSICLOOP)message);
                case MSG_SHOWFISHINGCAST.c_messageID:
                    return handler.NetHandleShowFishingCast((MSG_SHOWFISHINGCAST)message);
                case MSG_STARTHOUSINGGAME.c_messageID:
                    return handler.NetHandleStartHousingGame((MSG_STARTHOUSINGGAME)message);
                case MSG_STOPINTERACTIVEMUSICLOOP.c_messageID:
                    return handler.NetHandleStopInteractiveMusicLoop((MSG_STOPINTERACTIVEMUSICLOOP)message);
                case MSG_SWITCHGOTOCOMMONS.c_messageID:
                    return handler.NetHandleSwitchGotoCommons((MSG_SWITCHGOTOCOMMONS)message);
                case MSG_TELEPORTEDTODELETEDLOT.c_messageID:
                    return handler.NetHandleTeleportedToDeletedLot((MSG_TELEPORTEDTODELETEDLOT)message);
                case MSG_UPDATEATTICCOUNT.c_messageID:
                    return handler.NetHandleUpdateAtticCount((MSG_UPDATEATTICCOUNT)message);
                case MSG_UPDATEGARDENINGXP.c_messageID:
                    return handler.NetHandleUpdateGardeningXP((MSG_UPDATEGARDENINGXP)message);
                case MSG_UPDATEHOUSINGOBJECT.c_messageID:
                    return handler.NetHandleUpdateHousingObject((MSG_UPDATEHOUSINGOBJECT)message);
                case MSG_UPDATEHOUSINGPET.c_messageID:
                    return handler.NetHandleUpdateHousingPet((MSG_UPDATEHOUSINGPET)message);
                case MSG_UPDATEISLANDSPACE.c_messageID:
                    return handler.NetHandleUpdateIslandSpace((MSG_UPDATEISLANDSPACE)message);
                case MSG_UPDATEMAXIMUMHOUSINGITEMS.c_messageID:
                    return handler.NetHandleUpdateMaximumHousingItems((MSG_UPDATEMAXIMUMHOUSINGITEMS)message);
            }
            return false;
        }
        
        public INetworkMessage AllocateMessage(byte id)
        {
            switch (id)
            {
                case MSG_ADDFISHTOAQUARIUM.c_messageID: return new MSG_ADDFISHTOAQUARIUM();
                case MSG_ADDINSTANCEFISH.c_messageID: return new MSG_ADDINSTANCEFISH();
                case MSG_ADDTOTREASURECARDPOSTER.c_messageID: return new MSG_ADDTOTREASURECARDPOSTER();
                case MSG_AUDITATTICRESULTS.c_messageID: return new MSG_AUDITATTICRESULTS();
                case MSG_BEGINFISHINGCAST.c_messageID: return new MSG_BEGINFISHINGCAST();
                case MSG_BLOCKPETSPAWN.c_messageID: return new MSG_BLOCKPETSPAWN();
                case MSG_BUYISLANDSPACECONFIRM.c_messageID: return new MSG_BUYISLANDSPACECONFIRM();
                case MSG_CASTLEGAMESREQUEST.c_messageID: return new MSG_CASTLEGAMESREQUEST();
                case MSG_CASTLEGAMESREQUESTGAMEDATA.c_messageID: return new MSG_CASTLEGAMESREQUESTGAMEDATA();
                case MSG_CASTLEGAMESTELEPORTREJECTED.c_messageID: return new MSG_CASTLEGAMESTELEPORTREJECTED();
                case MSG_CASTLEMAGICCHANGEACTION.c_messageID: return new MSG_CASTLEMAGICCHANGEACTION();
                case MSG_CASTLEMAGICCLEAR.c_messageID: return new MSG_CASTLEMAGICCLEAR();
                case MSG_CASTLEMAGICCURRENTSTATE.c_messageID: return new MSG_CASTLEMAGICCURRENTSTATE();
                case MSG_CASTLEMAGICORB.c_messageID: return new MSG_CASTLEMAGICORB();
                case MSG_CASTLEMAGICREQUESTALLOWMOUNTS.c_messageID: return new MSG_CASTLEMAGICREQUESTALLOWMOUNTS();
                case MSG_CASTLEMAGICREQUESTALLOWPVP.c_messageID: return new MSG_CASTLEMAGICREQUESTALLOWPVP();
                case MSG_CASTLEMAGICREQUESTPLAYERTELEPORT.c_messageID: return new MSG_CASTLEMAGICREQUESTPLAYERTELEPORT();
                case MSG_CASTLEMAGICREQUESTRANDOM.c_messageID: return new MSG_CASTLEMAGICREQUESTRANDOM();
                case MSG_CASTLEMAGICREQUESTUSE.c_messageID: return new MSG_CASTLEMAGICREQUESTUSE();
                case MSG_CASTLEMAGICTUTORIAL.c_messageID: return new MSG_CASTLEMAGICTUTORIAL();
                case MSG_CASTLEMAGICUPDATESTATE.c_messageID: return new MSG_CASTLEMAGICUPDATESTATE();
                case MSG_CASTLETOURSADD.c_messageID: return new MSG_CASTLETOURSADD();
                case MSG_CASTLETOURSADDRESULT.c_messageID: return new MSG_CASTLETOURSADDRESULT();
                case MSG_CASTLETOURSCSRRESULTS.c_messageID: return new MSG_CASTLETOURSCSRRESULTS();
                case MSG_CASTLETOURSDELETECHARACTER.c_messageID: return new MSG_CASTLETOURSDELETECHARACTER();
                case MSG_CASTLETOURSENABLERATINGDISPLAY.c_messageID: return new MSG_CASTLETOURSENABLERATINGDISPLAY();
                case MSG_CASTLETOURSLEADERBOARDRESPONSE.c_messageID: return new MSG_CASTLETOURSLEADERBOARDRESPONSE();
                case MSG_CASTLETOURSPLAYERBANNED.c_messageID: return new MSG_CASTLETOURSPLAYERBANNED();
                case MSG_CASTLETOURSRATINGDISPLAY.c_messageID: return new MSG_CASTLETOURSRATINGDISPLAY();
                case MSG_CASTLETOURSREMOVE.c_messageID: return new MSG_CASTLETOURSREMOVE();
                case MSG_CASTLETOURSREMOVERESULT.c_messageID: return new MSG_CASTLETOURSREMOVERESULT();
                case MSG_CASTLETOURSREQUEST.c_messageID: return new MSG_CASTLETOURSREQUEST();
                case MSG_CASTLETOURSREQUESTFRIENDS.c_messageID: return new MSG_CASTLETOURSREQUESTFRIENDS();
                case MSG_CASTLETOURSREQUESTLEADERBOARD.c_messageID: return new MSG_CASTLETOURSREQUESTLEADERBOARD();
                case MSG_CASTLETOURSREQUESTMYCASTLEDATA.c_messageID: return new MSG_CASTLETOURSREQUESTMYCASTLEDATA();
                case MSG_CASTLETOURSREQUESTMYCASTLES.c_messageID: return new MSG_CASTLETOURSREQUESTMYCASTLES();
                case MSG_CASTLETOURSSENDRATING.c_messageID: return new MSG_CASTLETOURSSENDRATING();
                case MSG_CASTLETOURSTELEPORTPLAYER.c_messageID: return new MSG_CASTLETOURSTELEPORTPLAYER();
                case MSG_CASTLETOURSTELEPORTREJECTED.c_messageID: return new MSG_CASTLETOURSTELEPORTREJECTED();
                case MSG_CASTLETOURSVISITCASTLE.c_messageID: return new MSG_CASTLETOURSVISITCASTLE();
                case MSG_CATCHFISH.c_messageID: return new MSG_CATCHFISH();
                case MSG_CATCHOFTHEDAYOPEN.c_messageID: return new MSG_CATCHOFTHEDAYOPEN();
                case MSG_CATCHSUCCESS.c_messageID: return new MSG_CATCHSUCCESS();
                case MSG_CHANGEBREADCRUMBREQUEST.c_messageID: return new MSG_CHANGEBREADCRUMBREQUEST();
                case MSG_CREATETESTISLAND.c_messageID: return new MSG_CREATETESTISLAND();
                case MSG_DAILYPVPOPEN.c_messageID: return new MSG_DAILYPVPOPEN();
                case MSG_DAILYQUESTCOMPLETED.c_messageID: return new MSG_DAILYQUESTCOMPLETED();
                case MSG_DAILYQUESTCSRDATA.c_messageID: return new MSG_DAILYQUESTCSRDATA();
                case MSG_DAILYQUESTEXPLORE.c_messageID: return new MSG_DAILYQUESTEXPLORE();
                case MSG_DAILYQUESTOPEN.c_messageID: return new MSG_DAILYQUESTOPEN();
                case MSG_DELETEEQUIPPEDHOUSINGITEM.c_messageID: return new MSG_DELETEEQUIPPEDHOUSINGITEM();
                case MSG_DELETEFISH.c_messageID: return new MSG_DELETEFISH();
                case MSG_DELETEFROMATTIC.c_messageID: return new MSG_DELETEFROMATTIC();
                case MSG_DELETEMUSICLOOP.c_messageID: return new MSG_DELETEMUSICLOOP();
                case MSG_DISPLAYCATCHFISH.c_messageID: return new MSG_DISPLAYCATCHFISH();
                case MSG_DISPLAYCAUGHTFISH.c_messageID: return new MSG_DISPLAYCAUGHTFISH();
                case MSG_DISPOSABLEDUNGEONNOOWNER.c_messageID: return new MSG_DISPOSABLEDUNGEONNOOWNER();
                case MSG_EMPTYLOTCHECK.c_messageID: return new MSG_EMPTYLOTCHECK();
                case MSG_ENDFISHINGCAST.c_messageID: return new MSG_ENDFISHINGCAST();
                case MSG_ENTERTOURNAMENTFISH.c_messageID: return new MSG_ENTERTOURNAMENTFISH();
                case MSG_ENTERTOURNAMENTFISHRESULT.c_messageID: return new MSG_ENTERTOURNAMENTFISHRESULT();
                case MSG_EQUIPHOUSEMUSIC.c_messageID: return new MSG_EQUIPHOUSEMUSIC();
                case MSG_EQUIPMANNEQUINITEM.c_messageID: return new MSG_EQUIPMANNEQUINITEM();
                case MSG_FISHESCAPED.c_messageID: return new MSG_FISHESCAPED();
                case MSG_FISHINGCSRRESULTS.c_messageID: return new MSG_FISHINGCSRRESULTS();
                case MSG_FISHINGSPELLCAST.c_messageID: return new MSG_FISHINGSPELLCAST();
                case MSG_FISHTOURNAMENTLEADERBOARDOPEN.c_messageID: return new MSG_FISHTOURNAMENTLEADERBOARDOPEN();
                case MSG_FISHTOURNAMENTLEADERBOARDREQUEST.c_messageID: return new MSG_FISHTOURNAMENTLEADERBOARDREQUEST();
                case MSG_FISHTOURNAMENTOPEN.c_messageID: return new MSG_FISHTOURNAMENTOPEN();
                case MSG_GARDENINGCASTSPELL.c_messageID: return new MSG_GARDENINGCASTSPELL();
                case MSG_GARDENINGCOMMAND.c_messageID: return new MSG_GARDENINGCOMMAND();
                case MSG_GARDENINGCOMMANDRESPONSE.c_messageID: return new MSG_GARDENINGCOMMANDRESPONSE();
                case MSG_GARDENINGCSRRESULTS.c_messageID: return new MSG_GARDENINGCSRRESULTS();
                case MSG_GARDENINGHARVESTPLANT.c_messageID: return new MSG_GARDENINGHARVESTPLANT();
                case MSG_GARDENINGHARVESTPLANTSECONDSPRING.c_messageID: return new MSG_GARDENINGHARVESTPLANTSECONDSPRING();
                case MSG_GARDENINGPELLFIZZLE.c_messageID: return new MSG_GARDENINGPELLFIZZLE();
                case MSG_GARDENINGSPELLINSPECT.c_messageID: return new MSG_GARDENINGSPELLINSPECT();
                case MSG_GARDENLEVELUP.c_messageID: return new MSG_GARDENLEVELUP();
                case MSG_HIDEHOUSINGOBJECT.c_messageID: return new MSG_HIDEHOUSINGOBJECT();
                case MSG_HOUSINGGAMEREQUESTPOWERUPLOCATIONS.c_messageID: return new MSG_HOUSINGGAMEREQUESTPOWERUPLOCATIONS();
                case MSG_HOUSINGGAMESTATUSUPDATE.c_messageID: return new MSG_HOUSINGGAMESTATUSUPDATE();
                case MSG_HOUSINGGAMEUSEPOWERUP.c_messageID: return new MSG_HOUSINGGAMEUSEPOWERUP();
                case MSG_HOUSINGOBJECTNOPICKUP.c_messageID: return new MSG_HOUSINGOBJECTNOPICKUP();
                case MSG_HOUSINGOBJECTPROXIMITY.c_messageID: return new MSG_HOUSINGOBJECTPROXIMITY();
                case MSG_HOUSINGZONEPLAYER.c_messageID: return new MSG_HOUSINGZONEPLAYER();
                case MSG_HOUSINGZONEPLAYERLIST.c_messageID: return new MSG_HOUSINGZONEPLAYERLIST();
                case MSG_INTERACTIVEMUSICERROR.c_messageID: return new MSG_INTERACTIVEMUSICERROR();
                case MSG_INTERACTIVEMUSICINUSE.c_messageID: return new MSG_INTERACTIVEMUSICINUSE();
                case MSG_INTERACTIVEMUSICINUSE2.c_messageID: return new MSG_INTERACTIVEMUSICINUSE2();
                case MSG_ISLANDSPACEBUYREQUEST.c_messageID: return new MSG_ISLANDSPACEBUYREQUEST();
                case MSG_ISLANDSPACESHOPOPEN.c_messageID: return new MSG_ISLANDSPACESHOPOPEN();
                case MSG_MISSFISH.c_messageID: return new MSG_MISSFISH();
                case MSG_MONSTERMAGICADDMONSTER.c_messageID: return new MSG_MONSTERMAGICADDMONSTER();
                case MSG_MONSTERMAGICERASEMONSTER.c_messageID: return new MSG_MONSTERMAGICERASEMONSTER();
                case MSG_MOVEFROMATTIC.c_messageID: return new MSG_MOVEFROMATTIC();
                case MSG_MOVEGEARFROMGEARVAULT.c_messageID: return new MSG_MOVEGEARFROMGEARVAULT();
                case MSG_MOVEGEARTOGEARVAULT.c_messageID: return new MSG_MOVEGEARTOGEARVAULT();
                case MSG_MOVEJEWELFROMJEWELVAULT.c_messageID: return new MSG_MOVEJEWELFROMJEWELVAULT();
                case MSG_MOVEJEWELTOJEWELVAULT.c_messageID: return new MSG_MOVEJEWELTOJEWELVAULT();
                case MSG_MOVESEEDFROMGARDENINGSHED.c_messageID: return new MSG_MOVESEEDFROMGARDENINGSHED();
                case MSG_MOVESEEDTOGARDENINGSHED.c_messageID: return new MSG_MOVESEEDTOGARDENINGSHED();
                case MSG_MOVETCFROMTCVAULT.c_messageID: return new MSG_MOVETCFROMTCVAULT();
                case MSG_MOVETCTOTCVAULT.c_messageID: return new MSG_MOVETCTOTCVAULT();
                case MSG_MOVETOATTIC.c_messageID: return new MSG_MOVETOATTIC();
                case MSG_NOFISHSPACE.c_messageID: return new MSG_NOFISHSPACE();
                case MSG_PATCHADDATTIC.c_messageID: return new MSG_PATCHADDATTIC();
                case MSG_PATCHADDHOUSINGOBJECT.c_messageID: return new MSG_PATCHADDHOUSINGOBJECT();
                case MSG_PATCHAQUARIUM.c_messageID: return new MSG_PATCHAQUARIUM();
                case MSG_PATCHCASTLEMAGIC.c_messageID: return new MSG_PATCHCASTLEMAGIC();
                case MSG_PATCHDELETEATTIC.c_messageID: return new MSG_PATCHDELETEATTIC();
                case MSG_PATCHDELETEHOUSINGOBJECT.c_messageID: return new MSG_PATCHDELETEHOUSINGOBJECT();
                case MSG_PATCHEQUIPHOUSINGOBJECT.c_messageID: return new MSG_PATCHEQUIPHOUSINGOBJECT();
                case MSG_PATCHGARDENING.c_messageID: return new MSG_PATCHGARDENING();
                case MSG_PATCHHOUSE.c_messageID: return new MSG_PATCHHOUSE();
                case MSG_PATCHHOUSINGBREADCRUMB.c_messageID: return new MSG_PATCHHOUSINGBREADCRUMB();
                case MSG_PATCHHOUSINGGARDENINGSHED.c_messageID: return new MSG_PATCHHOUSINGGARDENINGSHED();
                case MSG_PATCHHOUSINGGEARVAULT.c_messageID: return new MSG_PATCHHOUSINGGEARVAULT();
                case MSG_PATCHHOUSINGJEWELVAULT.c_messageID: return new MSG_PATCHHOUSINGJEWELVAULT();
                case MSG_PATCHHOUSINGMUSICOBJECT.c_messageID: return new MSG_PATCHHOUSINGMUSICOBJECT();
                case MSG_PATCHHOUSINGSIGNOBJECT.c_messageID: return new MSG_PATCHHOUSINGSIGNOBJECT();
                case MSG_PATCHHOUSINGTELEPORTEROBJECT.c_messageID: return new MSG_PATCHHOUSINGTELEPORTEROBJECT();
                case MSG_PATCHMONSTERARENA.c_messageID: return new MSG_PATCHMONSTERARENA();
                case MSG_PATCHMUSICLOOP.c_messageID: return new MSG_PATCHMUSICLOOP();
                case MSG_PATCHREMOVETEXTUREREMAP.c_messageID: return new MSG_PATCHREMOVETEXTUREREMAP();
                case MSG_PATCHTEXTUREREMAP.c_messageID: return new MSG_PATCHTEXTUREREMAP();
                case MSG_PATCHTINTHOUSINGOBJECT.c_messageID: return new MSG_PATCHTINTHOUSINGOBJECT();
                case MSG_PATCHTREASURECARDPOSTER.c_messageID: return new MSG_PATCHTREASURECARDPOSTER();
                case MSG_PATCHTREASURECARDVAULT.c_messageID: return new MSG_PATCHTREASURECARDVAULT();
                case MSG_PATCHUPDATEHOUSINGOBJECT.c_messageID: return new MSG_PATCHUPDATEHOUSINGOBJECT();
                case MSG_PETTOMESCANATTIC.c_messageID: return new MSG_PETTOMESCANATTIC();
                case MSG_PICKUPALL.c_messageID: return new MSG_PICKUPALL();
                case MSG_PICKUPHOUSINGTEXTURE.c_messageID: return new MSG_PICKUPHOUSINGTEXTURE();
                case MSG_PLACEHOUSINGFISH.c_messageID: return new MSG_PLACEHOUSINGFISH();
                case MSG_PLACEHOUSINGOBJECT.c_messageID: return new MSG_PLACEHOUSINGOBJECT();
                case MSG_PLAYERTELEPORTINGTOFRIEND.c_messageID: return new MSG_PLAYERTELEPORTINGTOFRIEND();
                case MSG_PLAYINTERACTIVEMUSIC.c_messageID: return new MSG_PLAYINTERACTIVEMUSIC();
                case MSG_PLAYINTERACTIVEMUSIC2.c_messageID: return new MSG_PLAYINTERACTIVEMUSIC2();
                case MSG_PLAYINTERACTIVEMUSICLOOP.c_messageID: return new MSG_PLAYINTERACTIVEMUSICLOOP();
                case MSG_PLAYINTERACTIVEMUSICLOOPING.c_messageID: return new MSG_PLAYINTERACTIVEMUSICLOOPING();
                case MSG_PLAYINTERACTIVEMUSICLOOPING2.c_messageID: return new MSG_PLAYINTERACTIVEMUSICLOOPING2();
                case MSG_REMOVEFISHFROMAQUARIUM.c_messageID: return new MSG_REMOVEFISHFROMAQUARIUM();
                case MSG_REMOVEHOUSEMUSIC.c_messageID: return new MSG_REMOVEHOUSEMUSIC();
                case MSG_REPORTHOUSE.c_messageID: return new MSG_REPORTHOUSE();
                case MSG_REQUESTALLFISH.c_messageID: return new MSG_REQUESTALLFISH();
                case MSG_REQUESTATTIC.c_messageID: return new MSG_REQUESTATTIC();
                case MSG_REQUESTCATCHSUCCESS.c_messageID: return new MSG_REQUESTCATCHSUCCESS();
                case MSG_REQUESTDEEDZONE.c_messageID: return new MSG_REQUESTDEEDZONE();
                case MSG_REQUESTFISHHISTORY.c_messageID: return new MSG_REQUESTFISHHISTORY();
                case MSG_REQUESTHOUSEOWNERCHARACTERID.c_messageID: return new MSG_REQUESTHOUSEOWNERCHARACTERID();
                case MSG_REQUESTHOUSETRANSFERLIST.c_messageID: return new MSG_REQUESTHOUSETRANSFERLIST();
                case MSG_REQUESTHOUSINGZONE.c_messageID: return new MSG_REQUESTHOUSINGZONE();
                case MSG_REQUESTHOUSINGZONETELEPORT.c_messageID: return new MSG_REQUESTHOUSINGZONETELEPORT();
                case MSG_REQUESTINTERACTIVEMUSIC.c_messageID: return new MSG_REQUESTINTERACTIVEMUSIC();
                case MSG_REQUESTISLANDSWITCH.c_messageID: return new MSG_REQUESTISLANDSWITCH();
                case MSG_REQUESTSENDAWAY.c_messageID: return new MSG_REQUESTSENDAWAY();
                case MSG_REQUESTTELEPORTERHOUSINGCONFIRM.c_messageID: return new MSG_REQUESTTELEPORTERHOUSINGCONFIRM();
                case MSG_REQUESTTELEPORTERHOUSINGZONE.c_messageID: return new MSG_REQUESTTELEPORTERHOUSINGZONE();
                case MSG_REQUEST_BLOBS.c_messageID: return new MSG_REQUEST_BLOBS();
                case MSG_RESPEC.c_messageID: return new MSG_RESPEC();
                case MSG_SELECTHOUSEMUSIC.c_messageID: return new MSG_SELECTHOUSEMUSIC();
                case MSG_SELECTMUSICSTYLE.c_messageID: return new MSG_SELECTMUSICSTYLE();
                case MSG_SELLFISHOPEN.c_messageID: return new MSG_SELLFISHOPEN();
                case MSG_SELLFISHREQUEST.c_messageID: return new MSG_SELLFISHREQUEST();
                case MSG_SENDHOUSINGOBJECTSTATES.c_messageID: return new MSG_SENDHOUSINGOBJECTSTATES();
                case MSG_SENDHOUSINGTEXTUREINFO.c_messageID: return new MSG_SENDHOUSINGTEXTUREINFO();
                case MSG_SEND_BLOB.c_messageID: return new MSG_SEND_BLOB();
                case MSG_SETATTICID.c_messageID: return new MSG_SETATTICID();
                case MSG_SETFISHINGPLAYERS.c_messageID: return new MSG_SETFISHINGPLAYERS();
                case MSG_SETHOUSESIGN.c_messageID: return new MSG_SETHOUSESIGN();
                case MSG_SETHOUSETELEPORTER.c_messageID: return new MSG_SETHOUSETELEPORTER();
                case MSG_SETHOUSINGGAMESTATE.c_messageID: return new MSG_SETHOUSINGGAMESTATE();
                case MSG_SETHOUSINGPALETTE.c_messageID: return new MSG_SETHOUSINGPALETTE();
                case MSG_SETINSTANCEFISH.c_messageID: return new MSG_SETINSTANCEFISH();
                case MSG_SETINVISIBLETOFRIENDS.c_messageID: return new MSG_SETINVISIBLETOFRIENDS();
                case MSG_SETMUSICLOOP.c_messageID: return new MSG_SETMUSICLOOP();
                case MSG_SHOWFISHINGCAST.c_messageID: return new MSG_SHOWFISHINGCAST();
                case MSG_STARTHOUSINGGAME.c_messageID: return new MSG_STARTHOUSINGGAME();
                case MSG_STOPINTERACTIVEMUSICLOOP.c_messageID: return new MSG_STOPINTERACTIVEMUSICLOOP();
                case MSG_SWITCHGOTOCOMMONS.c_messageID: return new MSG_SWITCHGOTOCOMMONS();
                case MSG_TELEPORTEDTODELETEDLOT.c_messageID: return new MSG_TELEPORTEDTODELETEDLOT();
                case MSG_UPDATEATTICCOUNT.c_messageID: return new MSG_UPDATEATTICCOUNT();
                case MSG_UPDATEGARDENINGXP.c_messageID: return new MSG_UPDATEGARDENINGXP();
                case MSG_UPDATEHOUSINGOBJECT.c_messageID: return new MSG_UPDATEHOUSINGOBJECT();
                case MSG_UPDATEHOUSINGPET.c_messageID: return new MSG_UPDATEHOUSINGPET();
                case MSG_UPDATEISLANDSPACE.c_messageID: return new MSG_UPDATEISLANDSPACE();
                case MSG_UPDATEMAXIMUMHOUSINGITEMS.c_messageID: return new MSG_UPDATEMAXIMUMHOUSINGITEMS();
            }
            throw new ArgumentOutOfRangeException(nameof(id));
        }
        
        public interface Handler
        {
            bool NetHandleAddFishToAquarium(MSG_ADDFISHTOAQUARIUM msg) => false;
            bool NetHandleAddInstanceFish(MSG_ADDINSTANCEFISH msg) => false;
            bool NetHandleAddToTreasureCardPoster(MSG_ADDTOTREASURECARDPOSTER msg) => false;
            bool NetHandleAuditAtticResults(MSG_AUDITATTICRESULTS msg) => false;
            bool NetHandleBeginFishingCast(MSG_BEGINFISHINGCAST msg) => false;
            bool NetHandleBlockPetSpawn(MSG_BLOCKPETSPAWN msg) => false;
            bool NetHandleBuyIslandSpaceConfirm(MSG_BUYISLANDSPACECONFIRM msg) => false;
            bool NetHandleCastleGamesRequest(MSG_CASTLEGAMESREQUEST msg) => false;
            bool NetHandleCastleGamesRequestGameData(MSG_CASTLEGAMESREQUESTGAMEDATA msg) => false;
            bool NetHandleCastleGamesTeleportRejected(MSG_CASTLEGAMESTELEPORTREJECTED msg) => false;
            bool NetHandleCastleMagicChangeAction(MSG_CASTLEMAGICCHANGEACTION msg) => false;
            bool NetHandleCastleMagicClear(MSG_CASTLEMAGICCLEAR msg) => false;
            bool NetHandleCastleMagicCurrentState(MSG_CASTLEMAGICCURRENTSTATE msg) => false;
            bool NetHandleCastleMagicOrb(MSG_CASTLEMAGICORB msg) => false;
            bool NetHandleCastleMagicRequestAllowMounts(MSG_CASTLEMAGICREQUESTALLOWMOUNTS msg) => false;
            bool NetHandleCastleMagicRequestAllowPVP(MSG_CASTLEMAGICREQUESTALLOWPVP msg) => false;
            bool NetHandleCastleMagicRequestPlayerTeleport(MSG_CASTLEMAGICREQUESTPLAYERTELEPORT msg) => false;
            bool NetHandleCastleMagicRequestRandom(MSG_CASTLEMAGICREQUESTRANDOM msg) => false;
            bool NetHandleCastleMagicRequestUse(MSG_CASTLEMAGICREQUESTUSE msg) => false;
            bool NetHandleCastleMagicTutorial(MSG_CASTLEMAGICTUTORIAL msg) => false;
            bool NetHandleCastleMagicUpdateState(MSG_CASTLEMAGICUPDATESTATE msg) => false;
            bool NetHandleCastleToursAdd(MSG_CASTLETOURSADD msg) => false;
            bool NetHandleCastleToursAddResult(MSG_CASTLETOURSADDRESULT msg) => false;
            bool NetHandleCastleToursCSRResults(MSG_CASTLETOURSCSRRESULTS msg) => false;
            bool NetHandleCastleToursDeleteCharacter(MSG_CASTLETOURSDELETECHARACTER msg) => false;
            bool NetHandleCastleToursEnableRatingDisplay(MSG_CASTLETOURSENABLERATINGDISPLAY msg) => false;
            bool NetHandleCastleToursLeaderboardResponse(MSG_CASTLETOURSLEADERBOARDRESPONSE msg) => false;
            bool NetHandleCastleToursPlayerBanned(MSG_CASTLETOURSPLAYERBANNED msg) => false;
            bool NetHandleCastleToursRatingDisplay(MSG_CASTLETOURSRATINGDISPLAY msg) => false;
            bool NetHandleCastleToursRemove(MSG_CASTLETOURSREMOVE msg) => false;
            bool NetHandleCastleToursRemoveResult(MSG_CASTLETOURSREMOVERESULT msg) => false;
            bool NetHandleCastleToursRequest(MSG_CASTLETOURSREQUEST msg) => false;
            bool NetHandleCastleToursRequestFriends(MSG_CASTLETOURSREQUESTFRIENDS msg) => false;
            bool NetHandleCastleToursRequestLeaderboard(MSG_CASTLETOURSREQUESTLEADERBOARD msg) => false;
            bool NetHandleCastleToursRequestMyCastleData(MSG_CASTLETOURSREQUESTMYCASTLEDATA msg) => false;
            bool NetHandleCastleToursRequestMyCastles(MSG_CASTLETOURSREQUESTMYCASTLES msg) => false;
            bool NetHandleCastleToursSendRating(MSG_CASTLETOURSSENDRATING msg) => false;
            bool NetHandleCastleToursTeleportPlayer(MSG_CASTLETOURSTELEPORTPLAYER msg) => false;
            bool NetHandleCastleToursTeleportRejected(MSG_CASTLETOURSTELEPORTREJECTED msg) => false;
            bool NetHandleCastleToursVisitCastle(MSG_CASTLETOURSVISITCASTLE msg) => false;
            bool NetHandleCatchFish(MSG_CATCHFISH msg) => false;
            bool NetHandleCatchOfTheDayOpen(MSG_CATCHOFTHEDAYOPEN msg) => false;
            bool NetHandleCatchSuccess(MSG_CATCHSUCCESS msg) => false;
            bool NetHandleChangeBreadCrumbRequest(MSG_CHANGEBREADCRUMBREQUEST msg) => false;
            bool NetHandleCreateTestIsland(MSG_CREATETESTISLAND msg) => false;
            bool NetHandleDailyPvPOpen(MSG_DAILYPVPOPEN msg) => false;
            bool NetHandleDailyQuestCompleted(MSG_DAILYQUESTCOMPLETED msg) => false;
            bool NetHandleDailyQuestCSRData(MSG_DAILYQUESTCSRDATA msg) => false;
            bool NetHandleDailyQuestExplore(MSG_DAILYQUESTEXPLORE msg) => false;
            bool NetHandleDailyQuestOpen(MSG_DAILYQUESTOPEN msg) => false;
            bool NetHandleDeleteEquippedHousingItem(MSG_DELETEEQUIPPEDHOUSINGITEM msg) => false;
            bool NetHandleDeleteFish(MSG_DELETEFISH msg) => false;
            bool NetHandleDeleteFromAttic(MSG_DELETEFROMATTIC msg) => false;
            bool NetHandleDeleteMusicLoop(MSG_DELETEMUSICLOOP msg) => false;
            bool NetHandleDisplayCatchFish(MSG_DISPLAYCATCHFISH msg) => false;
            bool NetHandleDisplayCaughtFish(MSG_DISPLAYCAUGHTFISH msg) => false;
            bool NetHandleDisposableDungeonNoOwner(MSG_DISPOSABLEDUNGEONNOOWNER msg) => false;
            bool NetHandleEmptyLotCheck(MSG_EMPTYLOTCHECK msg) => false;
            bool NetHandleEndFishingCast(MSG_ENDFISHINGCAST msg) => false;
            bool NetHandleEnterTournamentFish(MSG_ENTERTOURNAMENTFISH msg) => false;
            bool NetHandleEnterTournamentFishResult(MSG_ENTERTOURNAMENTFISHRESULT msg) => false;
            bool NetHandleEquipHouseMusic(MSG_EQUIPHOUSEMUSIC msg) => false;
            bool NetHandleEquipMannequinItem(MSG_EQUIPMANNEQUINITEM msg) => false;
            bool NetHandleFishEscaped(MSG_FISHESCAPED msg) => false;
            bool NetHandleFishingCSRResults(MSG_FISHINGCSRRESULTS msg) => false;
            bool NetHandleFishingSpellCast(MSG_FISHINGSPELLCAST msg) => false;
            bool NetHandleFishTournamentLeaderBoardOpen(MSG_FISHTOURNAMENTLEADERBOARDOPEN msg) => false;
            bool NetHandleFishTournamentLeaderBoardRequest(MSG_FISHTOURNAMENTLEADERBOARDREQUEST msg) => false;
            bool NetHandleFishTournamentOpen(MSG_FISHTOURNAMENTOPEN msg) => false;
            bool NetHandleGardeningCastSpell(MSG_GARDENINGCASTSPELL msg) => false;
            bool NetHandleGardeningCommand(MSG_GARDENINGCOMMAND msg) => false;
            bool NetHandleGardeningCommandResponse(MSG_GARDENINGCOMMANDRESPONSE msg) => false;
            bool NetHandleGardeningCSRResults(MSG_GARDENINGCSRRESULTS msg) => false;
            bool NetHandleGardeningHarvestPlant(MSG_GARDENINGHARVESTPLANT msg) => false;
            bool NetHandleGardeningHarvestPlantSecondSpring(MSG_GARDENINGHARVESTPLANTSECONDSPRING msg) => false;
            bool NetHandleGardeningSpellFizzle(MSG_GARDENINGPELLFIZZLE msg) => false;
            bool NetHandleGardeningSpellInspect(MSG_GARDENINGSPELLINSPECT msg) => false;
            bool NetHandleGardenLevelUp(MSG_GARDENLEVELUP msg) => false;
            bool NetHandleHideHousingObject(MSG_HIDEHOUSINGOBJECT msg) => false;
            bool NetHandleHousingGameRequestPoweruplocations(MSG_HOUSINGGAMEREQUESTPOWERUPLOCATIONS msg) => false;
            bool NetHandleHousingGameStatusUpdate(MSG_HOUSINGGAMESTATUSUPDATE msg) => false;
            bool NetHandleHousingGameUsePowerup(MSG_HOUSINGGAMEUSEPOWERUP msg) => false;
            bool NetHandleHousingObjectNoPickup(MSG_HOUSINGOBJECTNOPICKUP msg) => false;
            bool NetHandleHousingObjectProximity(MSG_HOUSINGOBJECTPROXIMITY msg) => false;
            bool NetHandleHousingZonePlayer(MSG_HOUSINGZONEPLAYER msg) => false;
            bool NetHandleHousingZonePlayerList(MSG_HOUSINGZONEPLAYERLIST msg) => false;
            bool NetHandleInteractiveMusicError(MSG_INTERACTIVEMUSICERROR msg) => false;
            bool NetHandleInteractiveMusicInUse(MSG_INTERACTIVEMUSICINUSE msg) => false;
            bool NetHandleInteractiveMusicInUse2(MSG_INTERACTIVEMUSICINUSE2 msg) => false;
            bool NetHandleIslandSpaceBuyRequest(MSG_ISLANDSPACEBUYREQUEST msg) => false;
            bool NetHandleIslandSpaceShopOpen(MSG_ISLANDSPACESHOPOPEN msg) => false;
            bool NetHandleMissFish(MSG_MISSFISH msg) => false;
            bool NetHandleMonsterMagicAddMonster(MSG_MONSTERMAGICADDMONSTER msg) => false;
            bool NetHandleMonsterMagicEraseMonster(MSG_MONSTERMAGICERASEMONSTER msg) => false;
            bool NetHandleMoveFromAttic(MSG_MOVEFROMATTIC msg) => false;
            bool NetHandleMoveGearFromGearVault(MSG_MOVEGEARFROMGEARVAULT msg) => false;
            bool NetHandleMoveGearToGearVault(MSG_MOVEGEARTOGEARVAULT msg) => false;
            bool NetHandleMoveJewelFromJewelVault(MSG_MOVEJEWELFROMJEWELVAULT msg) => false;
            bool NetHandleMoveJewelToJewelVault(MSG_MOVEJEWELTOJEWELVAULT msg) => false;
            bool NetHandleMoveSeedFromGardeningShed(MSG_MOVESEEDFROMGARDENINGSHED msg) => false;
            bool NetHandleMoveSeedToGardeningShed(MSG_MOVESEEDTOGARDENINGSHED msg) => false;
            bool NetHandleMoveTCFromTCVault(MSG_MOVETCFROMTCVAULT msg) => false;
            bool NetHandleMoveTCToTCVault(MSG_MOVETCTOTCVAULT msg) => false;
            bool NetHandleMoveToAttic(MSG_MOVETOATTIC msg) => false;
            bool NetHandleNoFishSpace(MSG_NOFISHSPACE msg) => false;
            bool NetHandlePatchAddAttic(MSG_PATCHADDATTIC msg) => false;
            bool NetHandlePatchAddHousingObject(MSG_PATCHADDHOUSINGOBJECT msg) => false;
            bool NetHandlePatchAquarium(MSG_PATCHAQUARIUM msg) => false;
            bool NetHandlePatchCastleMagic(MSG_PATCHCASTLEMAGIC msg) => false;
            bool NetHandlePatchDeleteAttic(MSG_PATCHDELETEATTIC msg) => false;
            bool NetHandlePatchDeleteHousingObject(MSG_PATCHDELETEHOUSINGOBJECT msg) => false;
            bool NetHandlePatchEquipHousingObject(MSG_PATCHEQUIPHOUSINGOBJECT msg) => false;
            bool NetHandlePatchGardening(MSG_PATCHGARDENING msg) => false;
            bool NetHandlePatchHouse(MSG_PATCHHOUSE msg) => false;
            bool NetHandlePatchHousingBreadCrumb(MSG_PATCHHOUSINGBREADCRUMB msg) => false;
            bool NetHandlePatchHousingGardeningShed(MSG_PATCHHOUSINGGARDENINGSHED msg) => false;
            bool NetHandlePatchHousingGearVault(MSG_PATCHHOUSINGGEARVAULT msg) => false;
            bool NetHandlePatchHousingJewelVault(MSG_PATCHHOUSINGJEWELVAULT msg) => false;
            bool NetHandlePatchHousingMusicObject(MSG_PATCHHOUSINGMUSICOBJECT msg) => false;
            bool NetHandlePatchHousingSignObject(MSG_PATCHHOUSINGSIGNOBJECT msg) => false;
            bool NetHandlePatchHousingTeleporterObject(MSG_PATCHHOUSINGTELEPORTEROBJECT msg) => false;
            bool NetHandlePatchMonsterArena(MSG_PATCHMONSTERARENA msg) => false;
            bool NetHandlePatchMusicLoop(MSG_PATCHMUSICLOOP msg) => false;
            bool NetHandlePatchRemoveTextureRemap(MSG_PATCHREMOVETEXTUREREMAP msg) => false;
            bool NetHandlePatchTextureRemap(MSG_PATCHTEXTUREREMAP msg) => false;
            bool NetHandlePatchTintHousingObject(MSG_PATCHTINTHOUSINGOBJECT msg) => false;
            bool NetHandlePatchTreasureCardPoster(MSG_PATCHTREASURECARDPOSTER msg) => false;
            bool NetHandlePatchTreasureCardVault(MSG_PATCHTREASURECARDVAULT msg) => false;
            bool NetHandlePatchUpdateHousingObject(MSG_PATCHUPDATEHOUSINGOBJECT msg) => false;
            bool NetHandlePetTomeScanAttic(MSG_PETTOMESCANATTIC msg) => false;
            bool NetHandlePickUpAll(MSG_PICKUPALL msg) => false;
            bool NetHandlePickUpHousingTexture(MSG_PICKUPHOUSINGTEXTURE msg) => false;
            bool NetHandlePlaceHousingFish(MSG_PLACEHOUSINGFISH msg) => false;
            bool NetHandlePlaceHousingObject(MSG_PLACEHOUSINGOBJECT msg) => false;
            bool NetHandlePlayerTeleportingToFriend(MSG_PLAYERTELEPORTINGTOFRIEND msg) => false;
            bool NetHandlePlayInteractiveMusic(MSG_PLAYINTERACTIVEMUSIC msg) => false;
            bool NetHandlePlayInteractiveMusic2(MSG_PLAYINTERACTIVEMUSIC2 msg) => false;
            bool NetHandlePlayInteractiveMusicLoop(MSG_PLAYINTERACTIVEMUSICLOOP msg) => false;
            bool NetHandlePlayInteractiveMusicLooping(MSG_PLAYINTERACTIVEMUSICLOOPING msg) => false;
            bool NetHandlePlayInteractiveMusicLooping2(MSG_PLAYINTERACTIVEMUSICLOOPING2 msg) => false;
            bool NetHandleRemoveFishFromAquarium(MSG_REMOVEFISHFROMAQUARIUM msg) => false;
            bool NetHandleRemoveHouseMusic(MSG_REMOVEHOUSEMUSIC msg) => false;
            bool NetHandleReportHouse(MSG_REPORTHOUSE msg) => false;
            bool NetHandleAddRequestAllFish(MSG_REQUESTALLFISH msg) => false;
            bool NetHandleRequestAttic(MSG_REQUESTATTIC msg) => false;
            bool NetHandleRequestCatchSuccess(MSG_REQUESTCATCHSUCCESS msg) => false;
            bool NetHandleRequestDeedZone(MSG_REQUESTDEEDZONE msg) => false;
            bool NetHandleAddRequestFishHistory(MSG_REQUESTFISHHISTORY msg) => false;
            bool NetHandleRequestHouseOwnerCharacterID(MSG_REQUESTHOUSEOWNERCHARACTERID msg) => false;
            bool NetHandleRequestHouseTransferList(MSG_REQUESTHOUSETRANSFERLIST msg) => false;
            bool NetHandleRequestHousingZone(MSG_REQUESTHOUSINGZONE msg) => false;
            bool NetHandleRequestHousingZoneTeleport(MSG_REQUESTHOUSINGZONETELEPORT msg) => false;
            bool NetHandleRequestInteractiveMusic(MSG_REQUESTINTERACTIVEMUSIC msg) => false;
            bool NetHandleRequestIslandSwitch(MSG_REQUESTISLANDSWITCH msg) => false;
            bool NetHandleRequestSendAway(MSG_REQUESTSENDAWAY msg) => false;
            bool NetHandleRequestTeleporterHousingConfirm(MSG_REQUESTTELEPORTERHOUSINGCONFIRM msg) => false;
            bool NetHandleRequestTeleporterHousingZone(MSG_REQUESTTELEPORTERHOUSINGZONE msg) => false;
            bool NetHandleRequestBlobs(MSG_REQUEST_BLOBS msg) => false;
            bool NetHandleRespec(MSG_RESPEC msg) => false;
            bool NetHandleSelectHouseMusic(MSG_SELECTHOUSEMUSIC msg) => false;
            bool NetHandleSelectMusicStyle(MSG_SELECTMUSICSTYLE msg) => false;
            bool NetHandleSellFishOpen(MSG_SELLFISHOPEN msg) => false;
            bool NetHandleSellFishRequest(MSG_SELLFISHREQUEST msg) => false;
            bool NetHandleSendHousingObjectStates(MSG_SENDHOUSINGOBJECTSTATES msg) => false;
            bool NetHandleSendHousingTextureInfo(MSG_SENDHOUSINGTEXTUREINFO msg) => false;
            bool NetHandleSendBlob(MSG_SEND_BLOB msg) => false;
            bool NetHandleSetAtticID(MSG_SETATTICID msg) => false;
            bool NetHandleSetFishingPlayers(MSG_SETFISHINGPLAYERS msg) => false;
            bool NetHandleSetHouseSign(MSG_SETHOUSESIGN msg) => false;
            bool NetHandleSetHouseTeleporter(MSG_SETHOUSETELEPORTER msg) => false;
            bool NetHandleSetHousingGameState(MSG_SETHOUSINGGAMESTATE msg) => false;
            bool NetHandleSetHousingPalette(MSG_SETHOUSINGPALETTE msg) => false;
            bool NetHandleSetInstanceFish(MSG_SETINSTANCEFISH msg) => false;
            bool NetHandleInvisibleToFriends(MSG_SETINVISIBLETOFRIENDS msg) => false;
            bool NetHandleSetMusicLoop(MSG_SETMUSICLOOP msg) => false;
            bool NetHandleShowFishingCast(MSG_SHOWFISHINGCAST msg) => false;
            bool NetHandleStartHousingGame(MSG_STARTHOUSINGGAME msg) => false;
            bool NetHandleStopInteractiveMusicLoop(MSG_STOPINTERACTIVEMUSICLOOP msg) => false;
            bool NetHandleSwitchGotoCommons(MSG_SWITCHGOTOCOMMONS msg) => false;
            bool NetHandleTeleportedToDeletedLot(MSG_TELEPORTEDTODELETEDLOT msg) => false;
            bool NetHandleUpdateAtticCount(MSG_UPDATEATTICCOUNT msg) => false;
            bool NetHandleUpdateGardeningXP(MSG_UPDATEGARDENINGXP msg) => false;
            bool NetHandleUpdateHousingObject(MSG_UPDATEHOUSINGOBJECT msg) => false;
            bool NetHandleUpdateHousingPet(MSG_UPDATEHOUSINGPET msg) => false;
            bool NetHandleUpdateIslandSpace(MSG_UPDATEISLANDSPACE msg) => false;
            bool NetHandleUpdateMaximumHousingItems(MSG_UPDATEMAXIMUMHOUSINGITEMS msg) => false;
        }
    }
    public class MOVEBEHAVIOR_15_Protocol: INetworkService
    {
        public const byte c_serviceID = 15;
        public byte GetID() => c_serviceID;
        
        public class MSG_MB_MOVE : INetworkMessage
        {
            public const byte c_messageID = 1;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("LocationX", DMLType.USHRT)] public ushort m_locationX;
            [DMLField("LocationY", DMLType.USHRT)] public ushort m_locationY;
            [DMLField("LocationZ", DMLType.USHRT)] public ushort m_locationZ;
            [DMLField("Direction", DMLType.UBYT)] public byte m_direction;
            [DMLField("ZoneCounter", DMLType.UBYT)] public byte m_zoneCounter;
            [DMLField("GlobalID", DMLType.GID)] public GID m_globalID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_MB_MOVE>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_MB_MOVE>.Read(buf, this);
            }
        }
        public class MSG_MB_MOVESTATE : INetworkMessage
        {
            public const byte c_messageID = 2;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("GlobalID", DMLType.GID)] public GID m_globalID;
            [DMLField("NewState", DMLType.BYT)] public sbyte m_newState;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_MB_MOVESTATE>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_MB_MOVESTATE>.Read(buf, this);
            }
        }
        public class MSG_MB_MOVE_T : INetworkMessage
        {
            public const byte c_messageID = 3;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("LocationX", DMLType.USHRT)] public ushort m_locationX;
            [DMLField("LocationY", DMLType.USHRT)] public ushort m_locationY;
            [DMLField("LocationZ", DMLType.USHRT)] public ushort m_locationZ;
            [DMLField("Direction", DMLType.UBYT)] public byte m_direction;
            [DMLField("ZoneCounter", DMLType.UBYT)] public byte m_zoneCounter;
            [DMLField("GlobalID", DMLType.GID)] public GID m_globalID;
            [DMLField("Time", DMLType.FLT)] public float m_time;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_MB_MOVE_T>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_MB_MOVE_T>.Read(buf, this);
            }
        }
        public class MSG_MB_TELEPORT : INetworkMessage
        {
            public const byte c_messageID = 4;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("LocationX", DMLType.USHRT)] public ushort m_locationX;
            [DMLField("LocationY", DMLType.USHRT)] public ushort m_locationY;
            [DMLField("LocationZ", DMLType.USHRT)] public ushort m_locationZ;
            [DMLField("Direction", DMLType.UBYT)] public byte m_direction;
            [DMLField("GlobalID", DMLType.GID)] public GID m_globalID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_MB_TELEPORT>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_MB_TELEPORT>.Read(buf, this);
            }
        }
        
        public bool Dispatch(object handlerVoid, INetworkMessage message)
        {
            Debug.Assert(message.GetServiceID() == c_serviceID);
            var handler = (Handler)handlerVoid;
            
            switch (message.GetID())
            {
                case MSG_MB_MOVE.c_messageID:
                    return handler.NetHandleMB_Move((MSG_MB_MOVE)message);
                case MSG_MB_MOVESTATE.c_messageID:
                    return handler.NetHandleMB_MoveState((MSG_MB_MOVESTATE)message);
                case MSG_MB_MOVE_T.c_messageID:
                    return handler.NetHandleMB_Move((MSG_MB_MOVE_T)message);
                case MSG_MB_TELEPORT.c_messageID:
                    return handler.NetHandleMB_Teleport((MSG_MB_TELEPORT)message);
            }
            return false;
        }
        
        public INetworkMessage AllocateMessage(byte id)
        {
            switch (id)
            {
                case MSG_MB_MOVE.c_messageID: return new MSG_MB_MOVE();
                case MSG_MB_MOVESTATE.c_messageID: return new MSG_MB_MOVESTATE();
                case MSG_MB_MOVE_T.c_messageID: return new MSG_MB_MOVE_T();
                case MSG_MB_TELEPORT.c_messageID: return new MSG_MB_TELEPORT();
            }
            throw new ArgumentOutOfRangeException(nameof(id));
        }
        
        public interface Handler
        {
            bool NetHandleMB_Move(MSG_MB_MOVE msg) => false;
            bool NetHandleMB_MoveState(MSG_MB_MOVESTATE msg) => false;
            bool NetHandleMB_Move(MSG_MB_MOVE_T msg) => false;
            bool NetHandleMB_Teleport(MSG_MB_TELEPORT msg) => false;
        }
    }
    public class PHYSICS_16_Protocol: INetworkService
    {
        public const byte c_serviceID = 16;
        public byte GetID() => c_serviceID;
        
        public class MSG_PHYSICS_FORCE : INetworkMessage
        {
            public const byte c_messageID = 1;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("PositionX", DMLType.FLT)] public float m_positionX;
            [DMLField("PositionY", DMLType.FLT)] public float m_positionY;
            [DMLField("PositionZ", DMLType.FLT)] public float m_positionZ;
            [DMLField("RotationX", DMLType.FLT)] public float m_rotationX;
            [DMLField("RotationY", DMLType.FLT)] public float m_rotationY;
            [DMLField("RotationZ", DMLType.FLT)] public float m_rotationZ;
            [DMLField("VelocityX", DMLType.FLT)] public float m_velocityX;
            [DMLField("VelocityY", DMLType.FLT)] public float m_velocityY;
            [DMLField("VelocityZ", DMLType.FLT)] public float m_velocityZ;
            [DMLField("AngularVelocityX", DMLType.FLT)] public float m_angularVelocityX;
            [DMLField("AngularVelocityY", DMLType.FLT)] public float m_angularVelocityY;
            [DMLField("AngularVelocityZ", DMLType.FLT)] public float m_angularVelocityZ;
            [DMLField("ForceX", DMLType.FLT)] public float m_forceX;
            [DMLField("ForceY", DMLType.FLT)] public float m_forceY;
            [DMLField("ForceZ", DMLType.FLT)] public float m_forceZ;
            [DMLField("GlobalID", DMLType.GID)] public GID m_globalID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PHYSICS_FORCE>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PHYSICS_FORCE>.Read(buf, this);
            }
        }
        public class MSG_PHYSICS_FORCE_AT_POS : INetworkMessage
        {
            public const byte c_messageID = 2;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("PositionX", DMLType.FLT)] public float m_positionX;
            [DMLField("PositionY", DMLType.FLT)] public float m_positionY;
            [DMLField("PositionZ", DMLType.FLT)] public float m_positionZ;
            [DMLField("RotationX", DMLType.FLT)] public float m_rotationX;
            [DMLField("RotationY", DMLType.FLT)] public float m_rotationY;
            [DMLField("RotationZ", DMLType.FLT)] public float m_rotationZ;
            [DMLField("VelocityX", DMLType.FLT)] public float m_velocityX;
            [DMLField("VelocityY", DMLType.FLT)] public float m_velocityY;
            [DMLField("VelocityZ", DMLType.FLT)] public float m_velocityZ;
            [DMLField("AngularVelocityX", DMLType.FLT)] public float m_angularVelocityX;
            [DMLField("AngularVelocityY", DMLType.FLT)] public float m_angularVelocityY;
            [DMLField("AngularVelocityZ", DMLType.FLT)] public float m_angularVelocityZ;
            [DMLField("ForceX", DMLType.FLT)] public float m_forceX;
            [DMLField("ForceY", DMLType.FLT)] public float m_forceY;
            [DMLField("ForceZ", DMLType.FLT)] public float m_forceZ;
            [DMLField("ForcePosX", DMLType.FLT)] public float m_forcePosX;
            [DMLField("ForcePosY", DMLType.FLT)] public float m_forcePosY;
            [DMLField("ForcePosZ", DMLType.FLT)] public float m_forcePosZ;
            [DMLField("GlobalID", DMLType.GID)] public GID m_globalID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PHYSICS_FORCE_AT_POS>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PHYSICS_FORCE_AT_POS>.Read(buf, this);
            }
        }
        public class MSG_PHYSICS_GRAB : INetworkMessage
        {
            public const byte c_messageID = 3;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("GlobalID", DMLType.GID)] public GID m_globalID;
            [DMLField("HolderID", DMLType.GID)] public GID m_holderID;
            [DMLField("OffsetX", DMLType.FLT)] public float m_offsetX;
            [DMLField("OffsetY", DMLType.FLT)] public float m_offsetY;
            [DMLField("OffsetZ", DMLType.FLT)] public float m_offsetZ;
            [DMLField("Force", DMLType.FLT)] public float m_force;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PHYSICS_GRAB>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PHYSICS_GRAB>.Read(buf, this);
            }
        }
        public class MSG_PHYSICS_RELEASE : INetworkMessage
        {
            public const byte c_messageID = 4;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("GlobalID", DMLType.GID)] public GID m_globalID;
            [DMLField("HolderID", DMLType.GID)] public GID m_holderID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PHYSICS_RELEASE>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PHYSICS_RELEASE>.Read(buf, this);
            }
        }
        public class MSG_PHYSICS_STATE : INetworkMessage
        {
            public const byte c_messageID = 5;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("PositionX", DMLType.FLT)] public float m_positionX;
            [DMLField("PositionY", DMLType.FLT)] public float m_positionY;
            [DMLField("PositionZ", DMLType.FLT)] public float m_positionZ;
            [DMLField("RotationX", DMLType.FLT)] public float m_rotationX;
            [DMLField("RotationY", DMLType.FLT)] public float m_rotationY;
            [DMLField("RotationZ", DMLType.FLT)] public float m_rotationZ;
            [DMLField("VelocityX", DMLType.FLT)] public float m_velocityX;
            [DMLField("VelocityY", DMLType.FLT)] public float m_velocityY;
            [DMLField("VelocityZ", DMLType.FLT)] public float m_velocityZ;
            [DMLField("AngularVelocityX", DMLType.FLT)] public float m_angularVelocityX;
            [DMLField("AngularVelocityY", DMLType.FLT)] public float m_angularVelocityY;
            [DMLField("AngularVelocityZ", DMLType.FLT)] public float m_angularVelocityZ;
            [DMLField("GlobalID", DMLType.GID)] public GID m_globalID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PHYSICS_STATE>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PHYSICS_STATE>.Read(buf, this);
            }
        }
        public class MSG_PHYSICS_TORQUE : INetworkMessage
        {
            public const byte c_messageID = 6;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("PositionX", DMLType.FLT)] public float m_positionX;
            [DMLField("PositionY", DMLType.FLT)] public float m_positionY;
            [DMLField("PositionZ", DMLType.FLT)] public float m_positionZ;
            [DMLField("RotationX", DMLType.FLT)] public float m_rotationX;
            [DMLField("RotationY", DMLType.FLT)] public float m_rotationY;
            [DMLField("RotationZ", DMLType.FLT)] public float m_rotationZ;
            [DMLField("VelocityX", DMLType.FLT)] public float m_velocityX;
            [DMLField("VelocityY", DMLType.FLT)] public float m_velocityY;
            [DMLField("VelocityZ", DMLType.FLT)] public float m_velocityZ;
            [DMLField("AngularVelocityX", DMLType.FLT)] public float m_angularVelocityX;
            [DMLField("AngularVelocityY", DMLType.FLT)] public float m_angularVelocityY;
            [DMLField("AngularVelocityZ", DMLType.FLT)] public float m_angularVelocityZ;
            [DMLField("TorqueX", DMLType.FLT)] public float m_torqueX;
            [DMLField("TorqueY", DMLType.FLT)] public float m_torqueY;
            [DMLField("TorqueZ", DMLType.FLT)] public float m_torqueZ;
            [DMLField("GlobalID", DMLType.GID)] public GID m_globalID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PHYSICS_TORQUE>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PHYSICS_TORQUE>.Read(buf, this);
            }
        }
        
        public bool Dispatch(object handlerVoid, INetworkMessage message)
        {
            Debug.Assert(message.GetServiceID() == c_serviceID);
            var handler = (Handler)handlerVoid;
            
            switch (message.GetID())
            {
                case MSG_PHYSICS_FORCE.c_messageID:
                    return handler.NetHandlePhysicsForce((MSG_PHYSICS_FORCE)message);
                case MSG_PHYSICS_FORCE_AT_POS.c_messageID:
                    return handler.NetHandlePhysicsForce((MSG_PHYSICS_FORCE_AT_POS)message);
                case MSG_PHYSICS_GRAB.c_messageID:
                    return handler.NetHandlePhysicsGrab((MSG_PHYSICS_GRAB)message);
                case MSG_PHYSICS_RELEASE.c_messageID:
                    return handler.NetHandlePhysicsRelease((MSG_PHYSICS_RELEASE)message);
                case MSG_PHYSICS_STATE.c_messageID:
                    return handler.NetHandlePhysicsState((MSG_PHYSICS_STATE)message);
                case MSG_PHYSICS_TORQUE.c_messageID:
                    return handler.NetHandlePhysicsTorque((MSG_PHYSICS_TORQUE)message);
            }
            return false;
        }
        
        public INetworkMessage AllocateMessage(byte id)
        {
            switch (id)
            {
                case MSG_PHYSICS_FORCE.c_messageID: return new MSG_PHYSICS_FORCE();
                case MSG_PHYSICS_FORCE_AT_POS.c_messageID: return new MSG_PHYSICS_FORCE_AT_POS();
                case MSG_PHYSICS_GRAB.c_messageID: return new MSG_PHYSICS_GRAB();
                case MSG_PHYSICS_RELEASE.c_messageID: return new MSG_PHYSICS_RELEASE();
                case MSG_PHYSICS_STATE.c_messageID: return new MSG_PHYSICS_STATE();
                case MSG_PHYSICS_TORQUE.c_messageID: return new MSG_PHYSICS_TORQUE();
            }
            throw new ArgumentOutOfRangeException(nameof(id));
        }
        
        public interface Handler
        {
            bool NetHandlePhysicsForce(MSG_PHYSICS_FORCE msg) => false;
            bool NetHandlePhysicsForce(MSG_PHYSICS_FORCE_AT_POS msg) => false;
            bool NetHandlePhysicsGrab(MSG_PHYSICS_GRAB msg) => false;
            bool NetHandlePhysicsRelease(MSG_PHYSICS_RELEASE msg) => false;
            bool NetHandlePhysicsState(MSG_PHYSICS_STATE msg) => false;
            bool NetHandlePhysicsTorque(MSG_PHYSICS_TORQUE msg) => false;
        }
    }
    public class MG5_MESSAGES_46_Protocol: INetworkService
    {
        public const byte c_serviceID = 46;
        public byte GetID() => c_serviceID;
        
        public class MSG_MG5_CONNECT : INetworkMessage
        {
            public const byte c_messageID = 1;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_MG5_CONNECT>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_MG5_CONNECT>.Read(buf, this);
            }
        }
        public class MSG_MG5_MOVED : INetworkMessage
        {
            public const byte c_messageID = 2;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_MG5_MOVED>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_MG5_MOVED>.Read(buf, this);
            }
        }
        public class MSG_MG5_REWARDS : INetworkMessage
        {
            public const byte c_messageID = 3;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("score", DMLType.INT)] public int m_score;
            [DMLField("gameName", DMLType.STR)] public ByteString m_gameName;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_MG5_REWARDS>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_MG5_REWARDS>.Read(buf, this);
            }
        }
        
        public bool Dispatch(object handlerVoid, INetworkMessage message)
        {
            Debug.Assert(message.GetServiceID() == c_serviceID);
            var handler = (Handler)handlerVoid;
            
            switch (message.GetID())
            {
                case MSG_MG5_CONNECT.c_messageID:
                    return handler.NetHandleMsg_MG5_Connect((MSG_MG5_CONNECT)message);
                case MSG_MG5_MOVED.c_messageID:
                    return handler.NetHandleMsg_MG5_Moved((MSG_MG5_MOVED)message);
                case MSG_MG5_REWARDS.c_messageID:
                    return handler.NetHandleMsg_MG5_Rewards((MSG_MG5_REWARDS)message);
            }
            return false;
        }
        
        public INetworkMessage AllocateMessage(byte id)
        {
            switch (id)
            {
                case MSG_MG5_CONNECT.c_messageID: return new MSG_MG5_CONNECT();
                case MSG_MG5_MOVED.c_messageID: return new MSG_MG5_MOVED();
                case MSG_MG5_REWARDS.c_messageID: return new MSG_MG5_REWARDS();
            }
            throw new ArgumentOutOfRangeException(nameof(id));
        }
        
        public interface Handler
        {
            bool NetHandleMsg_MG5_Connect(MSG_MG5_CONNECT msg) => false;
            bool NetHandleMsg_MG5_Moved(MSG_MG5_MOVED msg) => false;
            bool NetHandleMsg_MG5_Rewards(MSG_MG5_REWARDS msg) => false;
        }
    }
    public class QUEST_MESSAGES_52_Protocol: INetworkService
    {
        public const byte c_serviceID = 52;
        public byte GetID() => c_serviceID;
        
        public class MSG_ACCEPTQUEST : INetworkMessage
        {
            public const byte c_messageID = 1;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("MobileID", DMLType.GID)] public GID m_mobileID;
            [DMLField("QuestName", DMLType.STR)] public ByteString m_questName;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_ACCEPTQUEST>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_ACCEPTQUEST>.Read(buf, this);
            }
        }
        public class MSG_COMPLETEGOAL : INetworkMessage
        {
            public const byte c_messageID = 2;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("QuestID", DMLType.GID)] public GID m_questID;
            [DMLField("GoalID", DMLType.GID)] public GID m_goalID;
            [DMLField("CompleteText", DMLType.STR)] public ByteString m_completeText;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_COMPLETEGOAL>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_COMPLETEGOAL>.Read(buf, this);
            }
        }
        public class MSG_COMPLETEPERSONA : INetworkMessage
        {
            public const byte c_messageID = 3;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("MobileID", DMLType.GID)] public GID m_mobileID;
            [DMLField("QuestID", DMLType.GID)] public GID m_questID;
            [DMLField("GoalID", DMLType.GID)] public GID m_goalID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_COMPLETEPERSONA>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_COMPLETEPERSONA>.Read(buf, this);
            }
        }
        public class MSG_COMPLETEQUEST : INetworkMessage
        {
            public const byte c_messageID = 4;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("QuestID", DMLType.GID)] public GID m_questID;
            [DMLField("CompleteText", DMLType.STR)] public ByteString m_completeText;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_COMPLETEQUEST>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_COMPLETEQUEST>.Read(buf, this);
            }
        }
        public class MSG_DECLINEQUEST : INetworkMessage
        {
            public const byte c_messageID = 5;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("QuestName", DMLType.STR)] public ByteString m_questName;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_DECLINEQUEST>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_DECLINEQUEST>.Read(buf, this);
            }
        }
        public class MSG_INTERACTNPC : INetworkMessage
        {
            public const byte c_messageID = 6;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("GlobalID", DMLType.GID)] public GID m_globalID;
            [DMLField("ServiceName", DMLType.STR)] public ByteString m_serviceName;
            [DMLField("Reinteract", DMLType.INT)] public int m_reinteract;
            [DMLField("ServiceIndex", DMLType.UINT)] public uint m_serviceIndex;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_INTERACTNPC>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_INTERACTNPC>.Read(buf, this);
            }
        }
        public class MSG_NPCINFO : INetworkMessage
        {
            public const byte c_messageID = 7;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("MobileID", DMLType.GID)] public GID m_mobileID;
            [DMLField("Name", DMLType.STR)] public ByteString m_name;
            [DMLField("Greeting", DMLType.STR)] public ByteString m_greeting;
            [DMLField("PersonaMadlibs", DMLType.STR)] public ByteString m_personaMadlibs;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_NPCINFO>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_NPCINFO>.Read(buf, this);
            }
        }
        public class MSG_PERSONAINFO : INetworkMessage
        {
            public const byte c_messageID = 8;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("MobileID", DMLType.GID)] public GID m_mobileID;
            [DMLField("QuestID", DMLType.GID)] public GID m_questID;
            [DMLField("GoalID", DMLType.GID)] public GID m_goalID;
            [DMLField("GoalHyperlink", DMLType.STR)] public ByteString m_goalHyperlink;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PERSONAINFO>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PERSONAINFO>.Read(buf, this);
            }
        }
        public class MSG_QUESTOFFER : INetworkMessage
        {
            public const byte c_messageID = 9;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("MobileID", DMLType.GID)] public GID m_mobileID;
            [DMLField("QuestName", DMLType.STR)] public ByteString m_questName;
            [DMLField("QuestTitle", DMLType.STR)] public ByteString m_questTitle;
            [DMLField("QuestInfo", DMLType.STR)] public ByteString m_questInfo;
            [DMLField("Level", DMLType.INT)] public int m_level;
            [DMLField("Rewards", DMLType.STR)] public ByteString m_rewards;
            [DMLField("GoalData", DMLType.STR)] public ByteString m_goalData;
            [DMLField("Mainline", DMLType.UBYT)] public byte m_mainline;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_QUESTOFFER>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_QUESTOFFER>.Read(buf, this);
            }
        }
        public class MSG_REMOVEGOAL : INetworkMessage
        {
            public const byte c_messageID = 10;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("QuestID", DMLType.GID)] public GID m_questID;
            [DMLField("GoalID", DMLType.GID)] public GID m_goalID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_REMOVEGOAL>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_REMOVEGOAL>.Read(buf, this);
            }
        }
        public class MSG_REMOVEQUEST : INetworkMessage
        {
            public const byte c_messageID = 11;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("QuestID", DMLType.GID)] public GID m_questID;
            [DMLField("NpcID", DMLType.GID)] public GID m_npcID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_REMOVEQUEST>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_REMOVEQUEST>.Read(buf, this);
            }
        }
        public class MSG_SENDGOAL : INetworkMessage
        {
            public const byte c_messageID = 12;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("QuestID", DMLType.GID)] public GID m_questID;
            [DMLField("GoalID", DMLType.GID)] public GID m_goalID;
            [DMLField("GoalNameID", DMLType.UINT)] public uint m_goalNameID;
            [DMLField("GoalTitle", DMLType.STR)] public ByteString m_goalTitle;
            [DMLField("GoalLocation", DMLType.STR)] public ByteString m_goalLocation;
            [DMLField("GoalImage1", DMLType.STR)] public ByteString m_goalImage1;
            [DMLField("GoalImage2", DMLType.STR)] public ByteString m_goalImage2;
            [DMLField("PersonaName", DMLType.STR)] public ByteString m_personaName;
            [DMLField("GoalType", DMLType.UBYT)] public byte m_goalType;
            [DMLField("GoalStatus", DMLType.UBYT)] public byte m_goalStatus;
            [DMLField("GoalCount", DMLType.INT)] public int m_goalCount;
            [DMLField("GoalTotal", DMLType.INT)] public int m_goalTotal;
            [DMLField("SubscriberGoalTotal", DMLType.INT)] public int m_subscriberGoalTotal;
            [DMLField("UseTally", DMLType.UBYT)] public byte m_useTally;
            [DMLField("TallyText", DMLType.STR)] public ByteString m_tallyText;
            [DMLField("SendType", DMLType.INT)] public int m_sendType;
            [DMLField("GoalMadlibs", DMLType.STR)] public ByteString m_goalMadlibs;
            [DMLField("ClientTags", DMLType.STR)] public ByteString m_clientTags;
            [DMLField("PatronIcon", DMLType.STR)] public ByteString m_patronIcon;
            [DMLField("NoQuestHelper", DMLType.UBYT)] public byte m_noQuestHelper;
            [DMLField("PetOnlyQuest", DMLType.UBYT)] public byte m_petOnlyQuest;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_SENDGOAL>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_SENDGOAL>.Read(buf, this);
            }
        }
        public class MSG_SENDNPCOPTIONS : INetworkMessage
        {
            public const byte c_messageID = 13;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("MobileID", DMLType.GID)] public GID m_mobileID;
            [DMLField("Options", DMLType.STR)] public ByteString m_options;
            [DMLField("Reinteract", DMLType.INT)] public int m_reinteract;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_SENDNPCOPTIONS>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_SENDNPCOPTIONS>.Read(buf, this);
            }
        }
        public class MSG_SENDQUEST : INetworkMessage
        {
            public const byte c_messageID = 14;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("QuestID", DMLType.GID)] public GID m_questID;
            [DMLField("QuestNameID", DMLType.UINT)] public uint m_questNameID;
            [DMLField("QuestType", DMLType.UINT)] public uint m_questType;
            [DMLField("QuestTitle", DMLType.STR)] public ByteString m_questTitle;
            [DMLField("QuestInfo", DMLType.STR)] public ByteString m_questInfo;
            [DMLField("New", DMLType.UBYT)] public byte m_new;
            [DMLField("QuestMadlibs", DMLType.STR)] public ByteString m_questMadlibs;
            [DMLField("GoalData", DMLType.STR)] public ByteString m_goalData;
            [DMLField("Rewards", DMLType.STR)] public ByteString m_rewards;
            [DMLField("ClientTags", DMLType.STR)] public ByteString m_clientTags;
            [DMLField("NoQuestHelper", DMLType.UBYT)] public byte m_noQuestHelper;
            [DMLField("Mainline", DMLType.UBYT)] public byte m_mainline;
            [DMLField("SkipQHAutoSelect", DMLType.UBYT)] public byte m_skipQHAutoSelect;
            [DMLField("PetOnlyQuest", DMLType.UBYT)] public byte m_petOnlyQuest;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_SENDQUEST>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_SENDQUEST>.Read(buf, this);
            }
        }
        
        public bool Dispatch(object handlerVoid, INetworkMessage message)
        {
            Debug.Assert(message.GetServiceID() == c_serviceID);
            var handler = (Handler)handlerVoid;
            
            switch (message.GetID())
            {
                case MSG_ACCEPTQUEST.c_messageID:
                    return handler.NetHandleAcceptQuest((MSG_ACCEPTQUEST)message);
                case MSG_COMPLETEGOAL.c_messageID:
                    return handler.NetHandleCompleteGoal((MSG_COMPLETEGOAL)message);
                case MSG_COMPLETEPERSONA.c_messageID:
                    return handler.NetHandleCompletePersonaGoal((MSG_COMPLETEPERSONA)message);
                case MSG_COMPLETEQUEST.c_messageID:
                    return handler.NetHandleCompleteQuest((MSG_COMPLETEQUEST)message);
                case MSG_DECLINEQUEST.c_messageID:
                    return handler.NetHandleDeclineQuest((MSG_DECLINEQUEST)message);
                case MSG_INTERACTNPC.c_messageID:
                    return handler.NetHandleInteractNPC((MSG_INTERACTNPC)message);
                case MSG_NPCINFO.c_messageID:
                    return handler.NetHandleNPCInfo((MSG_NPCINFO)message);
                case MSG_PERSONAINFO.c_messageID:
                    return handler.NetHandlePersonaComplete((MSG_PERSONAINFO)message);
                case MSG_QUESTOFFER.c_messageID:
                    return handler.NetHandleQuestOffer((MSG_QUESTOFFER)message);
                case MSG_REMOVEGOAL.c_messageID:
                    return handler.NetHandleRemoveGoal((MSG_REMOVEGOAL)message);
                case MSG_REMOVEQUEST.c_messageID:
                    return handler.NetHandleRemoveQuest((MSG_REMOVEQUEST)message);
                case MSG_SENDGOAL.c_messageID:
                    return handler.NetHandleSendGoal((MSG_SENDGOAL)message);
                case MSG_SENDNPCOPTIONS.c_messageID:
                    return handler.NetHandleSendNPCOptions((MSG_SENDNPCOPTIONS)message);
                case MSG_SENDQUEST.c_messageID:
                    return handler.NetHandleSendQuest((MSG_SENDQUEST)message);
            }
            return false;
        }
        
        public INetworkMessage AllocateMessage(byte id)
        {
            switch (id)
            {
                case MSG_ACCEPTQUEST.c_messageID: return new MSG_ACCEPTQUEST();
                case MSG_COMPLETEGOAL.c_messageID: return new MSG_COMPLETEGOAL();
                case MSG_COMPLETEPERSONA.c_messageID: return new MSG_COMPLETEPERSONA();
                case MSG_COMPLETEQUEST.c_messageID: return new MSG_COMPLETEQUEST();
                case MSG_DECLINEQUEST.c_messageID: return new MSG_DECLINEQUEST();
                case MSG_INTERACTNPC.c_messageID: return new MSG_INTERACTNPC();
                case MSG_NPCINFO.c_messageID: return new MSG_NPCINFO();
                case MSG_PERSONAINFO.c_messageID: return new MSG_PERSONAINFO();
                case MSG_QUESTOFFER.c_messageID: return new MSG_QUESTOFFER();
                case MSG_REMOVEGOAL.c_messageID: return new MSG_REMOVEGOAL();
                case MSG_REMOVEQUEST.c_messageID: return new MSG_REMOVEQUEST();
                case MSG_SENDGOAL.c_messageID: return new MSG_SENDGOAL();
                case MSG_SENDNPCOPTIONS.c_messageID: return new MSG_SENDNPCOPTIONS();
                case MSG_SENDQUEST.c_messageID: return new MSG_SENDQUEST();
            }
            throw new ArgumentOutOfRangeException(nameof(id));
        }
        
        public interface Handler
        {
            bool NetHandleAcceptQuest(MSG_ACCEPTQUEST msg) => false;
            bool NetHandleCompleteGoal(MSG_COMPLETEGOAL msg) => false;
            bool NetHandleCompletePersonaGoal(MSG_COMPLETEPERSONA msg) => false;
            bool NetHandleCompleteQuest(MSG_COMPLETEQUEST msg) => false;
            bool NetHandleDeclineQuest(MSG_DECLINEQUEST msg) => false;
            bool NetHandleInteractNPC(MSG_INTERACTNPC msg) => false;
            bool NetHandleNPCInfo(MSG_NPCINFO msg) => false;
            bool NetHandlePersonaComplete(MSG_PERSONAINFO msg) => false;
            bool NetHandleQuestOffer(MSG_QUESTOFFER msg) => false;
            bool NetHandleRemoveGoal(MSG_REMOVEGOAL msg) => false;
            bool NetHandleRemoveQuest(MSG_REMOVEQUEST msg) => false;
            bool NetHandleSendGoal(MSG_SENDGOAL msg) => false;
            bool NetHandleSendNPCOptions(MSG_SENDNPCOPTIONS msg) => false;
            bool NetHandleSendQuest(MSG_SENDQUEST msg) => false;
        }
    }
    public class MG3_MESSAGES_44_Protocol: INetworkService
    {
        public const byte c_serviceID = 44;
        public byte GetID() => c_serviceID;
        
        public class MSG_MG3_CONNECT : INetworkMessage
        {
            public const byte c_messageID = 1;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_MG3_CONNECT>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_MG3_CONNECT>.Read(buf, this);
            }
        }
        public class MSG_MG3_MOVED : INetworkMessage
        {
            public const byte c_messageID = 2;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_MG3_MOVED>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_MG3_MOVED>.Read(buf, this);
            }
        }
        public class MSG_MG3_REWARDS : INetworkMessage
        {
            public const byte c_messageID = 3;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("score", DMLType.INT)] public int m_score;
            [DMLField("gameName", DMLType.STR)] public ByteString m_gameName;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_MG3_REWARDS>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_MG3_REWARDS>.Read(buf, this);
            }
        }
        
        public bool Dispatch(object handlerVoid, INetworkMessage message)
        {
            Debug.Assert(message.GetServiceID() == c_serviceID);
            var handler = (Handler)handlerVoid;
            
            switch (message.GetID())
            {
                case MSG_MG3_CONNECT.c_messageID:
                    return handler.NetHandleMsg_MG3_Connect((MSG_MG3_CONNECT)message);
                case MSG_MG3_MOVED.c_messageID:
                    return handler.NetHandleMsg_MG3_Moved((MSG_MG3_MOVED)message);
                case MSG_MG3_REWARDS.c_messageID:
                    return handler.NetHandleMsg_MG3_Rewards((MSG_MG3_REWARDS)message);
            }
            return false;
        }
        
        public INetworkMessage AllocateMessage(byte id)
        {
            switch (id)
            {
                case MSG_MG3_CONNECT.c_messageID: return new MSG_MG3_CONNECT();
                case MSG_MG3_MOVED.c_messageID: return new MSG_MG3_MOVED();
                case MSG_MG3_REWARDS.c_messageID: return new MSG_MG3_REWARDS();
            }
            throw new ArgumentOutOfRangeException(nameof(id));
        }
        
        public interface Handler
        {
            bool NetHandleMsg_MG3_Connect(MSG_MG3_CONNECT msg) => false;
            bool NetHandleMsg_MG3_Moved(MSG_MG3_MOVED msg) => false;
            bool NetHandleMsg_MG3_Rewards(MSG_MG3_REWARDS msg) => false;
        }
    }
    public class SKULLRIDERS_MESSAGES_40_Protocol: INetworkService
    {
        public const byte c_serviceID = 40;
        public byte GetID() => c_serviceID;
        
        public class MSG_SKULLRIDERS_CONNECT : INetworkMessage
        {
            public const byte c_messageID = 1;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_SKULLRIDERS_CONNECT>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_SKULLRIDERS_CONNECT>.Read(buf, this);
            }
        }
        public class MSG_SKULLRIDERS_MOVED : INetworkMessage
        {
            public const byte c_messageID = 2;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_SKULLRIDERS_MOVED>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_SKULLRIDERS_MOVED>.Read(buf, this);
            }
        }
        public class MSG_SKULLRIDERS_REWARDS : INetworkMessage
        {
            public const byte c_messageID = 3;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("score", DMLType.INT)] public int m_score;
            [DMLField("gameName", DMLType.STR)] public ByteString m_gameName;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_SKULLRIDERS_REWARDS>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_SKULLRIDERS_REWARDS>.Read(buf, this);
            }
        }
        
        public bool Dispatch(object handlerVoid, INetworkMessage message)
        {
            Debug.Assert(message.GetServiceID() == c_serviceID);
            var handler = (Handler)handlerVoid;
            
            switch (message.GetID())
            {
                case MSG_SKULLRIDERS_CONNECT.c_messageID:
                    return handler.NetHandleMsg_SkullRiders_Connect((MSG_SKULLRIDERS_CONNECT)message);
                case MSG_SKULLRIDERS_MOVED.c_messageID:
                    return handler.NetHandleMsg_SkullRiders_Moved((MSG_SKULLRIDERS_MOVED)message);
                case MSG_SKULLRIDERS_REWARDS.c_messageID:
                    return handler.NetHandleMsg_SkullRiders_Rewards((MSG_SKULLRIDERS_REWARDS)message);
            }
            return false;
        }
        
        public INetworkMessage AllocateMessage(byte id)
        {
            switch (id)
            {
                case MSG_SKULLRIDERS_CONNECT.c_messageID: return new MSG_SKULLRIDERS_CONNECT();
                case MSG_SKULLRIDERS_MOVED.c_messageID: return new MSG_SKULLRIDERS_MOVED();
                case MSG_SKULLRIDERS_REWARDS.c_messageID: return new MSG_SKULLRIDERS_REWARDS();
            }
            throw new ArgumentOutOfRangeException(nameof(id));
        }
        
        public interface Handler
        {
            bool NetHandleMsg_SkullRiders_Connect(MSG_SKULLRIDERS_CONNECT msg) => false;
            bool NetHandleMsg_SkullRiders_Moved(MSG_SKULLRIDERS_MOVED msg) => false;
            bool NetHandleMsg_SkullRiders_Rewards(MSG_SKULLRIDERS_REWARDS msg) => false;
        }
    }
    public class SOBLOCKS_MESSAGES_25_Protocol: INetworkService
    {
        public const byte c_serviceID = 25;
        public byte GetID() => c_serviceID;
        
        public class MSG_SOBLOCKS_ADVANCEOFF : INetworkMessage
        {
            public const byte c_messageID = 1;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_SOBLOCKS_ADVANCEOFF>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_SOBLOCKS_ADVANCEOFF>.Read(buf, this);
            }
        }
        public class MSG_SOBLOCKS_ADVANCEON : INetworkMessage
        {
            public const byte c_messageID = 2;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_SOBLOCKS_ADVANCEON>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_SOBLOCKS_ADVANCEON>.Read(buf, this);
            }
        }
        public class MSG_SOBLOCKS_ATTACK : INetworkMessage
        {
            public const byte c_messageID = 3;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("Index1", DMLType.INT)] public int m_index1;
            [DMLField("Index2", DMLType.INT)] public int m_index2;
            [DMLField("Index3", DMLType.INT)] public int m_index3;
            [DMLField("Index4", DMLType.INT)] public int m_index4;
            [DMLField("Index5", DMLType.INT)] public int m_index5;
            [DMLField("Index6", DMLType.INT)] public int m_index6;
            [DMLField("Index7", DMLType.INT)] public int m_index7;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_SOBLOCKS_ATTACK>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_SOBLOCKS_ATTACK>.Read(buf, this);
            }
        }
        public class MSG_SOBLOCKS_COUNTDOWN : INetworkMessage
        {
            public const byte c_messageID = 4;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("Number", DMLType.INT)] public int m_number;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_SOBLOCKS_COUNTDOWN>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_SOBLOCKS_COUNTDOWN>.Read(buf, this);
            }
        }
        public class MSG_SOBLOCKS_ENDGAME : INetworkMessage
        {
            public const byte c_messageID = 5;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("Score", DMLType.INT)] public int m_score;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_SOBLOCKS_ENDGAME>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_SOBLOCKS_ENDGAME>.Read(buf, this);
            }
        }
        public class MSG_SOBLOCKS_FREEZEBLOCKS : INetworkMessage
        {
            public const byte c_messageID = 6;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("Amount", DMLType.INT)] public int m_amount;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_SOBLOCKS_FREEZEBLOCKS>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_SOBLOCKS_FREEZEBLOCKS>.Read(buf, this);
            }
        }
        public class MSG_SOBLOCKS_INFO : INetworkMessage
        {
            public const byte c_messageID = 7;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("Name", DMLType.STR)] public ByteString m_name;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_SOBLOCKS_INFO>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_SOBLOCKS_INFO>.Read(buf, this);
            }
        }
        public class MSG_SOBLOCKS_LEVELUP : INetworkMessage
        {
            public const byte c_messageID = 8;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_SOBLOCKS_LEVELUP>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_SOBLOCKS_LEVELUP>.Read(buf, this);
            }
        }
        public class MSG_SOBLOCKS_LOSS : INetworkMessage
        {
            public const byte c_messageID = 9;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_SOBLOCKS_LOSS>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_SOBLOCKS_LOSS>.Read(buf, this);
            }
        }
        public class MSG_SOBLOCKS_PAUSE : INetworkMessage
        {
            public const byte c_messageID = 10;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_SOBLOCKS_PAUSE>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_SOBLOCKS_PAUSE>.Read(buf, this);
            }
        }
        public class MSG_SOBLOCKS_PAUSEOFF : INetworkMessage
        {
            public const byte c_messageID = 11;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_SOBLOCKS_PAUSEOFF>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_SOBLOCKS_PAUSEOFF>.Read(buf, this);
            }
        }
        public class MSG_SOBLOCKS_PAUSEON : INetworkMessage
        {
            public const byte c_messageID = 12;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_SOBLOCKS_PAUSEON>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_SOBLOCKS_PAUSEON>.Read(buf, this);
            }
        }
        public class MSG_SOBLOCKS_READY : INetworkMessage
        {
            public const byte c_messageID = 13;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_SOBLOCKS_READY>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_SOBLOCKS_READY>.Read(buf, this);
            }
        }
        public class MSG_SOBLOCKS_REQUESTROW : INetworkMessage
        {
            public const byte c_messageID = 14;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_SOBLOCKS_REQUESTROW>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_SOBLOCKS_REQUESTROW>.Read(buf, this);
            }
        }
        public class MSG_SOBLOCKS_RESETGAME : INetworkMessage
        {
            public const byte c_messageID = 15;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_SOBLOCKS_RESETGAME>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_SOBLOCKS_RESETGAME>.Read(buf, this);
            }
        }
        public class MSG_SOBLOCKS_ROCKDROP : INetworkMessage
        {
            public const byte c_messageID = 16;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_SOBLOCKS_ROCKDROP>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_SOBLOCKS_ROCKDROP>.Read(buf, this);
            }
        }
        public class MSG_SOBLOCKS_ROWINFO : INetworkMessage
        {
            public const byte c_messageID = 17;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("Index1", DMLType.INT)] public int m_index1;
            [DMLField("Index2", DMLType.INT)] public int m_index2;
            [DMLField("Index3", DMLType.INT)] public int m_index3;
            [DMLField("Index4", DMLType.INT)] public int m_index4;
            [DMLField("Index5", DMLType.INT)] public int m_index5;
            [DMLField("Index6", DMLType.INT)] public int m_index6;
            [DMLField("Index7", DMLType.INT)] public int m_index7;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_SOBLOCKS_ROWINFO>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_SOBLOCKS_ROWINFO>.Read(buf, this);
            }
        }
        public class MSG_SOBLOCKS_SELECTGAME : INetworkMessage
        {
            public const byte c_messageID = 18;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("GameType", DMLType.INT)] public int m_gameType;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_SOBLOCKS_SELECTGAME>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_SOBLOCKS_SELECTGAME>.Read(buf, this);
            }
        }
        public class MSG_SOBLOCKS_SENDROW : INetworkMessage
        {
            public const byte c_messageID = 19;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("Index1", DMLType.INT)] public int m_index1;
            [DMLField("Index2", DMLType.INT)] public int m_index2;
            [DMLField("Index3", DMLType.INT)] public int m_index3;
            [DMLField("Index4", DMLType.INT)] public int m_index4;
            [DMLField("Index5", DMLType.INT)] public int m_index5;
            [DMLField("Index6", DMLType.INT)] public int m_index6;
            [DMLField("Index7", DMLType.INT)] public int m_index7;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_SOBLOCKS_SENDROW>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_SOBLOCKS_SENDROW>.Read(buf, this);
            }
        }
        public class MSG_SOBLOCKS_SETLEVEL : INetworkMessage
        {
            public const byte c_messageID = 20;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("Speed", DMLType.INT)] public int m_speed;
            [DMLField("SpeedUp", DMLType.INT)] public int m_speedUp;
            [DMLField("FallSpeed", DMLType.INT)] public int m_fallSpeed;
            [DMLField("RemoveSpeed", DMLType.INT)] public int m_removeSpeed;
            [DMLField("Bonus", DMLType.INT)] public int m_bonus;
            [DMLField("ComboTime", DMLType.INT)] public int m_comboTime;
            [DMLField("MultiTime", DMLType.INT)] public int m_multiTime;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_SOBLOCKS_SETLEVEL>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_SOBLOCKS_SETLEVEL>.Read(buf, this);
            }
        }
        public class MSG_SOBLOCKS_STARTSWAP : INetworkMessage
        {
            public const byte c_messageID = 21;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_SOBLOCKS_STARTSWAP>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_SOBLOCKS_STARTSWAP>.Read(buf, this);
            }
        }
        public class MSG_SOBLOCKS_TIMEDDROP : INetworkMessage
        {
            public const byte c_messageID = 22;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("Index1", DMLType.INT)] public int m_index1;
            [DMLField("Index2", DMLType.INT)] public int m_index2;
            [DMLField("Index3", DMLType.INT)] public int m_index3;
            [DMLField("Index4", DMLType.INT)] public int m_index4;
            [DMLField("Index5", DMLType.INT)] public int m_index5;
            [DMLField("Index6", DMLType.INT)] public int m_index6;
            [DMLField("Index7", DMLType.INT)] public int m_index7;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_SOBLOCKS_TIMEDDROP>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_SOBLOCKS_TIMEDDROP>.Read(buf, this);
            }
        }
        public class MSG_SOBLOCKS_WIN : INetworkMessage
        {
            public const byte c_messageID = 23;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_SOBLOCKS_WIN>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_SOBLOCKS_WIN>.Read(buf, this);
            }
        }
        
        public bool Dispatch(object handlerVoid, INetworkMessage message)
        {
            Debug.Assert(message.GetServiceID() == c_serviceID);
            var handler = (Handler)handlerVoid;
            
            switch (message.GetID())
            {
                case MSG_SOBLOCKS_ADVANCEOFF.c_messageID:
                    return handler.NetHandleMsg_Soblocks_AdvanceOff((MSG_SOBLOCKS_ADVANCEOFF)message);
                case MSG_SOBLOCKS_ADVANCEON.c_messageID:
                    return handler.NetHandleMsg_Soblocks_AdvanceOn((MSG_SOBLOCKS_ADVANCEON)message);
                case MSG_SOBLOCKS_ATTACK.c_messageID:
                    return handler.NetHandleMsg_Soblocks_Attack((MSG_SOBLOCKS_ATTACK)message);
                case MSG_SOBLOCKS_COUNTDOWN.c_messageID:
                    return handler.NetHandleMsg_Soblocks_Countdown((MSG_SOBLOCKS_COUNTDOWN)message);
                case MSG_SOBLOCKS_ENDGAME.c_messageID:
                    return handler.NetHandleMsg_Soblocks_EndGame((MSG_SOBLOCKS_ENDGAME)message);
                case MSG_SOBLOCKS_FREEZEBLOCKS.c_messageID:
                    return handler.NetHandleMsg_Soblocks_FreezeBlocks((MSG_SOBLOCKS_FREEZEBLOCKS)message);
                case MSG_SOBLOCKS_INFO.c_messageID:
                    return handler.NetHandleMsg_Soblocks_Info((MSG_SOBLOCKS_INFO)message);
                case MSG_SOBLOCKS_LEVELUP.c_messageID:
                    return handler.NetHandleMsg_Soblocks_LevelUp((MSG_SOBLOCKS_LEVELUP)message);
                case MSG_SOBLOCKS_LOSS.c_messageID:
                    return handler.NetHandleMsg_Soblocks_Loss((MSG_SOBLOCKS_LOSS)message);
                case MSG_SOBLOCKS_PAUSE.c_messageID:
                    return handler.NetHandleMsg_Soblocks_Pause((MSG_SOBLOCKS_PAUSE)message);
                case MSG_SOBLOCKS_PAUSEOFF.c_messageID:
                    return handler.NetHandleMsg_Soblocks_PauseOff((MSG_SOBLOCKS_PAUSEOFF)message);
                case MSG_SOBLOCKS_PAUSEON.c_messageID:
                    return handler.NetHandleMsg_Soblocks_PauseOn((MSG_SOBLOCKS_PAUSEON)message);
                case MSG_SOBLOCKS_READY.c_messageID:
                    return handler.NetHandleMsg_Soblocks_Ready((MSG_SOBLOCKS_READY)message);
                case MSG_SOBLOCKS_REQUESTROW.c_messageID:
                    return handler.NetHandleMsg_Soblocks_RequestRow((MSG_SOBLOCKS_REQUESTROW)message);
                case MSG_SOBLOCKS_RESETGAME.c_messageID:
                    return handler.NetHandleMsg_Soblocks_ResetGame((MSG_SOBLOCKS_RESETGAME)message);
                case MSG_SOBLOCKS_ROCKDROP.c_messageID:
                    return handler.NetHandleMsg_Soblocks_RockDrop((MSG_SOBLOCKS_ROCKDROP)message);
                case MSG_SOBLOCKS_ROWINFO.c_messageID:
                    return handler.NetHandleMsg_Soblocks_RowInfo((MSG_SOBLOCKS_ROWINFO)message);
                case MSG_SOBLOCKS_SELECTGAME.c_messageID:
                    return handler.NetHandleMsg_Soblocks_SelectGame((MSG_SOBLOCKS_SELECTGAME)message);
                case MSG_SOBLOCKS_SENDROW.c_messageID:
                    return handler.NetHandleMsg_Soblocks_SendRow((MSG_SOBLOCKS_SENDROW)message);
                case MSG_SOBLOCKS_SETLEVEL.c_messageID:
                    return handler.NetHandleMsg_Soblocks_SetLevel((MSG_SOBLOCKS_SETLEVEL)message);
                case MSG_SOBLOCKS_STARTSWAP.c_messageID:
                    return handler.NetHandleMsg_Soblocks_StartSwap((MSG_SOBLOCKS_STARTSWAP)message);
                case MSG_SOBLOCKS_TIMEDDROP.c_messageID:
                    return handler.NetHandleMsg_Soblocks_TimedDrop((MSG_SOBLOCKS_TIMEDDROP)message);
                case MSG_SOBLOCKS_WIN.c_messageID:
                    return handler.NetHandleMsg_Soblocks_Win((MSG_SOBLOCKS_WIN)message);
            }
            return false;
        }
        
        public INetworkMessage AllocateMessage(byte id)
        {
            switch (id)
            {
                case MSG_SOBLOCKS_ADVANCEOFF.c_messageID: return new MSG_SOBLOCKS_ADVANCEOFF();
                case MSG_SOBLOCKS_ADVANCEON.c_messageID: return new MSG_SOBLOCKS_ADVANCEON();
                case MSG_SOBLOCKS_ATTACK.c_messageID: return new MSG_SOBLOCKS_ATTACK();
                case MSG_SOBLOCKS_COUNTDOWN.c_messageID: return new MSG_SOBLOCKS_COUNTDOWN();
                case MSG_SOBLOCKS_ENDGAME.c_messageID: return new MSG_SOBLOCKS_ENDGAME();
                case MSG_SOBLOCKS_FREEZEBLOCKS.c_messageID: return new MSG_SOBLOCKS_FREEZEBLOCKS();
                case MSG_SOBLOCKS_INFO.c_messageID: return new MSG_SOBLOCKS_INFO();
                case MSG_SOBLOCKS_LEVELUP.c_messageID: return new MSG_SOBLOCKS_LEVELUP();
                case MSG_SOBLOCKS_LOSS.c_messageID: return new MSG_SOBLOCKS_LOSS();
                case MSG_SOBLOCKS_PAUSE.c_messageID: return new MSG_SOBLOCKS_PAUSE();
                case MSG_SOBLOCKS_PAUSEOFF.c_messageID: return new MSG_SOBLOCKS_PAUSEOFF();
                case MSG_SOBLOCKS_PAUSEON.c_messageID: return new MSG_SOBLOCKS_PAUSEON();
                case MSG_SOBLOCKS_READY.c_messageID: return new MSG_SOBLOCKS_READY();
                case MSG_SOBLOCKS_REQUESTROW.c_messageID: return new MSG_SOBLOCKS_REQUESTROW();
                case MSG_SOBLOCKS_RESETGAME.c_messageID: return new MSG_SOBLOCKS_RESETGAME();
                case MSG_SOBLOCKS_ROCKDROP.c_messageID: return new MSG_SOBLOCKS_ROCKDROP();
                case MSG_SOBLOCKS_ROWINFO.c_messageID: return new MSG_SOBLOCKS_ROWINFO();
                case MSG_SOBLOCKS_SELECTGAME.c_messageID: return new MSG_SOBLOCKS_SELECTGAME();
                case MSG_SOBLOCKS_SENDROW.c_messageID: return new MSG_SOBLOCKS_SENDROW();
                case MSG_SOBLOCKS_SETLEVEL.c_messageID: return new MSG_SOBLOCKS_SETLEVEL();
                case MSG_SOBLOCKS_STARTSWAP.c_messageID: return new MSG_SOBLOCKS_STARTSWAP();
                case MSG_SOBLOCKS_TIMEDDROP.c_messageID: return new MSG_SOBLOCKS_TIMEDDROP();
                case MSG_SOBLOCKS_WIN.c_messageID: return new MSG_SOBLOCKS_WIN();
            }
            throw new ArgumentOutOfRangeException(nameof(id));
        }
        
        public interface Handler
        {
            bool NetHandleMsg_Soblocks_AdvanceOff(MSG_SOBLOCKS_ADVANCEOFF msg) => false;
            bool NetHandleMsg_Soblocks_AdvanceOn(MSG_SOBLOCKS_ADVANCEON msg) => false;
            bool NetHandleMsg_Soblocks_Attack(MSG_SOBLOCKS_ATTACK msg) => false;
            bool NetHandleMsg_Soblocks_Countdown(MSG_SOBLOCKS_COUNTDOWN msg) => false;
            bool NetHandleMsg_Soblocks_EndGame(MSG_SOBLOCKS_ENDGAME msg) => false;
            bool NetHandleMsg_Soblocks_FreezeBlocks(MSG_SOBLOCKS_FREEZEBLOCKS msg) => false;
            bool NetHandleMsg_Soblocks_Info(MSG_SOBLOCKS_INFO msg) => false;
            bool NetHandleMsg_Soblocks_LevelUp(MSG_SOBLOCKS_LEVELUP msg) => false;
            bool NetHandleMsg_Soblocks_Loss(MSG_SOBLOCKS_LOSS msg) => false;
            bool NetHandleMsg_Soblocks_Pause(MSG_SOBLOCKS_PAUSE msg) => false;
            bool NetHandleMsg_Soblocks_PauseOff(MSG_SOBLOCKS_PAUSEOFF msg) => false;
            bool NetHandleMsg_Soblocks_PauseOn(MSG_SOBLOCKS_PAUSEON msg) => false;
            bool NetHandleMsg_Soblocks_Ready(MSG_SOBLOCKS_READY msg) => false;
            bool NetHandleMsg_Soblocks_RequestRow(MSG_SOBLOCKS_REQUESTROW msg) => false;
            bool NetHandleMsg_Soblocks_ResetGame(MSG_SOBLOCKS_RESETGAME msg) => false;
            bool NetHandleMsg_Soblocks_RockDrop(MSG_SOBLOCKS_ROCKDROP msg) => false;
            bool NetHandleMsg_Soblocks_RowInfo(MSG_SOBLOCKS_ROWINFO msg) => false;
            bool NetHandleMsg_Soblocks_SelectGame(MSG_SOBLOCKS_SELECTGAME msg) => false;
            bool NetHandleMsg_Soblocks_SendRow(MSG_SOBLOCKS_SENDROW msg) => false;
            bool NetHandleMsg_Soblocks_SetLevel(MSG_SOBLOCKS_SETLEVEL msg) => false;
            bool NetHandleMsg_Soblocks_StartSwap(MSG_SOBLOCKS_STARTSWAP msg) => false;
            bool NetHandleMsg_Soblocks_TimedDrop(MSG_SOBLOCKS_TIMEDDROP msg) => false;
            bool NetHandleMsg_Soblocks_Win(MSG_SOBLOCKS_WIN msg) => false;
        }
    }
    public class WIZARDCOMBAT_MESSAGES_51_Protocol: INetworkService
    {
        public const byte c_serviceID = 51;
        public byte GetID() => c_serviceID;
        
        public class MSG_ALLOWLEAVEPVP : INetworkMessage
        {
            public const byte c_messageID = 1;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_ALLOWLEAVEPVP>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_ALLOWLEAVEPVP>.Read(buf, this);
            }
        }
        public class MSG_COMBATACTIONS : INetworkMessage
        {
            public const byte c_messageID = 2;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("DuelID", DMLType.GID)] public GID m_duelID;
            [DMLField("ActionData", DMLType.STR)] public ByteString m_actionData;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_COMBATACTIONS>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_COMBATACTIONS>.Read(buf, this);
            }
        }
        public class MSG_COMBATADD : INetworkMessage
        {
            public const byte c_messageID = 3;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("DuelID", DMLType.GID)] public GID m_duelID;
            [DMLField("ParticipantData", DMLType.STR)] public ByteString m_participantData;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_COMBATADD>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_COMBATADD>.Read(buf, this);
            }
        }
        public class MSG_COMBATAFK : INetworkMessage
        {
            public const byte c_messageID = 4;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("DuelID", DMLType.GID)] public GID m_duelID;
            [DMLField("IsCombatAFK", DMLType.UBYT)] public byte m_isCombatAFK;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_COMBATAFK>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_COMBATAFK>.Read(buf, this);
            }
        }
        public class MSG_COMBATCHEAT : INetworkMessage
        {
            public const byte c_messageID = 5;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("CheatFlags", DMLType.UINT)] public uint m_cheatFlags;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_COMBATCHEAT>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_COMBATCHEAT>.Read(buf, this);
            }
        }
        public class MSG_COMBATDRAW : INetworkMessage
        {
            public const byte c_messageID = 6;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_COMBATDRAW>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_COMBATDRAW>.Read(buf, this);
            }
        }
        public class MSG_COMBATFLEE : INetworkMessage
        {
            public const byte c_messageID = 7;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("ParticipantID", DMLType.GID)] public GID m_participantID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_COMBATFLEE>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_COMBATFLEE>.Read(buf, this);
            }
        }
        public class MSG_COMBATHAND : INetworkMessage
        {
            public const byte c_messageID = 8;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("HandData", DMLType.STR)] public ByteString m_handData;
            [DMLField("DeckCount", DMLType.USHRT)] public ushort m_deckCount;
            [DMLField("TotalDeckCount", DMLType.USHRT)] public ushort m_totalDeckCount;
            [DMLField("TreasureCardCount", DMLType.USHRT)] public ushort m_treasureCardCount;
            [DMLField("ParticipantID", DMLType.GID)] public GID m_participantID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_COMBATHAND>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_COMBATHAND>.Read(buf, this);
            }
        }
        public class MSG_COMBATHEALTH : INetworkMessage
        {
            public const byte c_messageID = 9;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("DuelID", DMLType.GID)] public GID m_duelID;
            [DMLField("HealthData", DMLType.STR)] public ByteString m_healthData;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_COMBATHEALTH>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_COMBATHEALTH>.Read(buf, this);
            }
        }
        public class MSG_COMBATLOADED : INetworkMessage
        {
            public const byte c_messageID = 10;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("DuelID", DMLType.GID)] public GID m_duelID;
            [DMLField("RoundNum", DMLType.INT)] public int m_roundNum;
            [DMLField("FirstTeamToAct", DMLType.INT)] public int m_firstTeamToAct;
            [DMLField("ParticipantList", DMLType.STR)] public ByteString m_participantList;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_COMBATLOADED>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_COMBATLOADED>.Read(buf, this);
            }
        }
        public class MSG_COMBATMATCHRESULT : INetworkMessage
        {
            public const byte c_messageID = 11;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("DuelID", DMLType.GID)] public GID m_duelID;
            [DMLField("WinningTeam", DMLType.INT)] public int m_winningTeam;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_COMBATMATCHRESULT>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_COMBATMATCHRESULT>.Read(buf, this);
            }
        }
        public class MSG_COMBATMOVE : INetworkMessage
        {
            public const byte c_messageID = 12;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("MoveType", DMLType.UBYT)] public byte m_moveType;
            [DMLField("SpellSelection", DMLType.UBYT)] public byte m_spellSelection;
            [DMLField("SpellTarget", DMLType.UBYT)] public byte m_spellTarget;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_COMBATMOVE>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_COMBATMOVE>.Read(buf, this);
            }
        }
        public class MSG_COMBATMOVESELECTION : INetworkMessage
        {
            public const byte c_messageID = 13;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("DuelID", DMLType.GID)] public GID m_duelID;
            [DMLField("ParticipantID", DMLType.GID)] public GID m_participantID;
            [DMLField("MoveType", DMLType.UBYT)] public byte m_moveType;
            [DMLField("SpellID", DMLType.INT)] public int m_spellID;
            [DMLField("SpellTargetIndex", DMLType.BYT)] public sbyte m_spellTargetIndex;
            [DMLField("EnchantmentID", DMLType.INT)] public int m_enchantmentID;
            [DMLField("IsItemCard", DMLType.UBYT)] public byte m_isItemCard;
            [DMLField("IsTreasureCard", DMLType.UBYT)] public byte m_isTreasureCard;
            [DMLField("IsBattleCard", DMLType.UBYT)] public byte m_isBattleCard;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_COMBATMOVESELECTION>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_COMBATMOVESELECTION>.Read(buf, this);
            }
        }
        public class MSG_COMBATPAUSED : INetworkMessage
        {
            public const byte c_messageID = 14;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("Paused", DMLType.BYT)] public sbyte m_paused;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_COMBATPAUSED>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_COMBATPAUSED>.Read(buf, this);
            }
        }
        public class MSG_COMBATPHASE : INetworkMessage
        {
            public const byte c_messageID = 15;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("DuelID", DMLType.GID)] public GID m_duelID;
            [DMLField("NewPhase", DMLType.UBYT)] public byte m_newPhase;
            [DMLField("Data", DMLType.STR)] public ByteString m_data;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_COMBATPHASE>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_COMBATPHASE>.Read(buf, this);
            }
        }
        public class MSG_COMBATPHASEFORSPECTATORS : INetworkMessage
        {
            public const byte c_messageID = 16;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("DuelID", DMLType.GID)] public GID m_duelID;
            [DMLField("NewPhase", DMLType.UBYT)] public byte m_newPhase;
            [DMLField("Time", DMLType.UBYT)] public byte m_time;
            [DMLField("ParticipantName1", DMLType.STR)] public ByteString m_participantName1;
            [DMLField("ParticipantName2", DMLType.STR)] public ByteString m_participantName2;
            [DMLField("ParticipantName3", DMLType.STR)] public ByteString m_participantName3;
            [DMLField("ParticipantName4", DMLType.STR)] public ByteString m_participantName4;
            [DMLField("ParticipantName5", DMLType.STR)] public ByteString m_participantName5;
            [DMLField("ParticipantName6", DMLType.STR)] public ByteString m_participantName6;
            [DMLField("ParticipantName7", DMLType.STR)] public ByteString m_participantName7;
            [DMLField("ParticipantName8", DMLType.STR)] public ByteString m_participantName8;
            [DMLField("Subcircles", DMLType.UINT)] public uint m_subcircles;
            [DMLField("TeamName0", DMLType.UINT)] public uint m_teamName0;
            [DMLField("TeamName1", DMLType.UINT)] public uint m_teamName1;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_COMBATPHASEFORSPECTATORS>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_COMBATPHASEFORSPECTATORS>.Read(buf, this);
            }
        }
        public class MSG_COMBATPIPS : INetworkMessage
        {
            public const byte c_messageID = 17;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("DuelID", DMLType.GID)] public GID m_duelID;
            [DMLField("PipData", DMLType.STR)] public ByteString m_pipData;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_COMBATPIPS>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_COMBATPIPS>.Read(buf, this);
            }
        }
        public class MSG_COMBATREMOVE : INetworkMessage
        {
            public const byte c_messageID = 18;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("DuelID", DMLType.GID)] public GID m_duelID;
            [DMLField("ParticipantID", DMLType.GID)] public GID m_participantID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_COMBATREMOVE>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_COMBATREMOVE>.Read(buf, this);
            }
        }
        public class MSG_COMBATREVEALHANGING : INetworkMessage
        {
            public const byte c_messageID = 19;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("ParticipantID", DMLType.GID)] public GID m_participantID;
            [DMLField("CloakEffectType", DMLType.INT)] public int m_cloakEffectType;
            [DMLField("SpellTemplateID", DMLType.INT)] public int m_spellTemplateID;
            [DMLField("EffectType", DMLType.INT)] public int m_effectType;
            [DMLField("EffectAmount", DMLType.INT)] public int m_effectAmount;
            [DMLField("DamageType", DMLType.INT)] public int m_damageType;
            [DMLField("ActNum", DMLType.UBYT)] public byte m_actNum;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_COMBATREVEALHANGING>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_COMBATREVEALHANGING>.Read(buf, this);
            }
        }
        public class MSG_COMBATSTATS : INetworkMessage
        {
            public const byte c_messageID = 20;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("DuelID", DMLType.GID)] public GID m_duelID;
            [DMLField("PartID", DMLType.GID)] public GID m_partID;
            [DMLField("StatsData", DMLType.STR)] public ByteString m_statsData;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_COMBATSTATS>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_COMBATSTATS>.Read(buf, this);
            }
        }
        public class MSG_COMBATUPFIRST : INetworkMessage
        {
            public const byte c_messageID = 21;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("DuelID", DMLType.GID)] public GID m_duelID;
            [DMLField("UpFirst", DMLType.UBYT)] public byte m_upFirst;
            [DMLField("RoundNum", DMLType.USHRT)] public ushort m_roundNum;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_COMBATUPFIRST>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_COMBATUPFIRST>.Read(buf, this);
            }
        }
        public class MSG_COMBATVICTORY : INetworkMessage
        {
            public const byte c_messageID = 22;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_COMBATVICTORY>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_COMBATVICTORY>.Read(buf, this);
            }
        }
        public class MSG_DUEL : INetworkMessage
        {
            public const byte c_messageID = 23;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("Data", DMLType.STR)] public ByteString m_data;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_DUEL>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_DUEL>.Read(buf, this);
            }
        }
        public class MSG_ENDDUEL : INetworkMessage
        {
            public const byte c_messageID = 24;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("DuelID", DMLType.GID)] public GID m_duelID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_ENDDUEL>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_ENDDUEL>.Read(buf, this);
            }
        }
        public class MSG_PETWILLCAST : INetworkMessage
        {
            public const byte c_messageID = 25;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("Target", DMLType.INT)] public int m_target;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PETWILLCAST>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PETWILLCAST>.Read(buf, this);
            }
        }
        public class MSG_SETPLANNINGPHASETIMER : INetworkMessage
        {
            public const byte c_messageID = 26;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("DuelID", DMLType.GID)] public GID m_duelID;
            [DMLField("Time", DMLType.INT)] public int m_time;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_SETPLANNINGPHASETIMER>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_SETPLANNINGPHASETIMER>.Read(buf, this);
            }
        }
        public class MSG_SHOWCOMBATUI : INetworkMessage
        {
            public const byte c_messageID = 27;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("DuelID", DMLType.GID)] public GID m_duelID;
            [DMLField("AltTurn", DMLType.INT)] public int m_altTurn;
            [DMLField("AltTurnTeam", DMLType.INT)] public int m_altTurnTeam;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_SHOWCOMBATUI>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_SHOWCOMBATUI>.Read(buf, this);
            }
        }
        public class MSG_SHOWPETCARD : INetworkMessage
        {
            public const byte c_messageID = 28;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("PetData", DMLType.STR)] public ByteString m_petData;
            [DMLField("Cooldown", DMLType.INT)] public int m_cooldown;
            [DMLField("RequirementFailed", DMLType.INT)] public int m_requirementFailed;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_SHOWPETCARD>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_SHOWPETCARD>.Read(buf, this);
            }
        }
        public class MSG_UPDATECOMBATPARTICIPANT : INetworkMessage
        {
            public const byte c_messageID = 29;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("ObjectID", DMLType.GID)] public GID m_objectID;
            [DMLField("HidePVPEnemyChat", DMLType.UBYT)] public byte m_hidePVPEnemyChat;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_UPDATECOMBATPARTICIPANT>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_UPDATECOMBATPARTICIPANT>.Read(buf, this);
            }
        }
        public class MSG_UPDATEDUELTIMER : INetworkMessage
        {
            public const byte c_messageID = 30;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("DuelID", DMLType.GID)] public GID m_duelID;
            [DMLField("RemainingTime", DMLType.UINT)] public uint m_remainingTime;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_UPDATEDUELTIMER>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_UPDATEDUELTIMER>.Read(buf, this);
            }
        }
        
        public bool Dispatch(object handlerVoid, INetworkMessage message)
        {
            Debug.Assert(message.GetServiceID() == c_serviceID);
            var handler = (Handler)handlerVoid;
            
            switch (message.GetID())
            {
                case MSG_ALLOWLEAVEPVP.c_messageID:
                    return handler.NetHandleAllowLeavePvP((MSG_ALLOWLEAVEPVP)message);
                case MSG_COMBATACTIONS.c_messageID:
                    return handler.NetHandleCombatActions((MSG_COMBATACTIONS)message);
                case MSG_COMBATADD.c_messageID:
                    return handler.NetHandleCombatAdd((MSG_COMBATADD)message);
                case MSG_COMBATAFK.c_messageID:
                    return handler.NetHandleCombatAFK((MSG_COMBATAFK)message);
                case MSG_COMBATCHEAT.c_messageID:
                    return handler.NetHandleCombatCheat((MSG_COMBATCHEAT)message);
                case MSG_COMBATDRAW.c_messageID:
                    return handler.NetHandleCombatDraw((MSG_COMBATDRAW)message);
                case MSG_COMBATFLEE.c_messageID:
                    return handler.NetHandleCombatFlee((MSG_COMBATFLEE)message);
                case MSG_COMBATHAND.c_messageID:
                    return handler.NetHandleCombatHand((MSG_COMBATHAND)message);
                case MSG_COMBATHEALTH.c_messageID:
                    return handler.NetHandleCombatHealth((MSG_COMBATHEALTH)message);
                case MSG_COMBATLOADED.c_messageID:
                    return handler.NetHandleCombatLoaded((MSG_COMBATLOADED)message);
                case MSG_COMBATMATCHRESULT.c_messageID:
                    return handler.NetHandleCombatMatchResult((MSG_COMBATMATCHRESULT)message);
                case MSG_COMBATMOVE.c_messageID:
                    return handler.NetHandleCombatMove((MSG_COMBATMOVE)message);
                case MSG_COMBATMOVESELECTION.c_messageID:
                    return handler.NetHandleCombatMoveSelection((MSG_COMBATMOVESELECTION)message);
                case MSG_COMBATPAUSED.c_messageID:
                    return handler.NetHandleCombatPaused((MSG_COMBATPAUSED)message);
                case MSG_COMBATPHASE.c_messageID:
                    return handler.NetHandleCombatPhase((MSG_COMBATPHASE)message);
                case MSG_COMBATPHASEFORSPECTATORS.c_messageID:
                    return handler.NetHandleCombatPhaseForSpectators((MSG_COMBATPHASEFORSPECTATORS)message);
                case MSG_COMBATPIPS.c_messageID:
                    return handler.NetHandleCombatPips((MSG_COMBATPIPS)message);
                case MSG_COMBATREMOVE.c_messageID:
                    return handler.NetHandleCombatRemove((MSG_COMBATREMOVE)message);
                case MSG_COMBATREVEALHANGING.c_messageID:
                    return handler.NetHandleCombatRevealHanging((MSG_COMBATREVEALHANGING)message);
                case MSG_COMBATSTATS.c_messageID:
                    return handler.NetHandleCombatStats((MSG_COMBATSTATS)message);
                case MSG_COMBATUPFIRST.c_messageID:
                    return handler.NetHandleCombatUpFirst((MSG_COMBATUPFIRST)message);
                case MSG_COMBATVICTORY.c_messageID:
                    return handler.NetHandleCombatVictory((MSG_COMBATVICTORY)message);
                case MSG_DUEL.c_messageID:
                    return handler.NetHandleDuel((MSG_DUEL)message);
                case MSG_ENDDUEL.c_messageID:
                    return handler.NetHandleEndDuel((MSG_ENDDUEL)message);
                case MSG_PETWILLCAST.c_messageID:
                    return handler.NetHandlePetWillCast((MSG_PETWILLCAST)message);
                case MSG_SETPLANNINGPHASETIMER.c_messageID:
                    return handler.NetHandleSetPlanningPhaseTimer((MSG_SETPLANNINGPHASETIMER)message);
                case MSG_SHOWCOMBATUI.c_messageID:
                    return handler.NetHandleShowCombatUI((MSG_SHOWCOMBATUI)message);
                case MSG_SHOWPETCARD.c_messageID:
                    return handler.NetHandleShowPetCard((MSG_SHOWPETCARD)message);
                case MSG_UPDATECOMBATPARTICIPANT.c_messageID:
                    return handler.NetHandleUpdateCombatParticipant((MSG_UPDATECOMBATPARTICIPANT)message);
                case MSG_UPDATEDUELTIMER.c_messageID:
                    return handler.NetHandleUpdateDuelTimer((MSG_UPDATEDUELTIMER)message);
            }
            return false;
        }
        
        public INetworkMessage AllocateMessage(byte id)
        {
            switch (id)
            {
                case MSG_ALLOWLEAVEPVP.c_messageID: return new MSG_ALLOWLEAVEPVP();
                case MSG_COMBATACTIONS.c_messageID: return new MSG_COMBATACTIONS();
                case MSG_COMBATADD.c_messageID: return new MSG_COMBATADD();
                case MSG_COMBATAFK.c_messageID: return new MSG_COMBATAFK();
                case MSG_COMBATCHEAT.c_messageID: return new MSG_COMBATCHEAT();
                case MSG_COMBATDRAW.c_messageID: return new MSG_COMBATDRAW();
                case MSG_COMBATFLEE.c_messageID: return new MSG_COMBATFLEE();
                case MSG_COMBATHAND.c_messageID: return new MSG_COMBATHAND();
                case MSG_COMBATHEALTH.c_messageID: return new MSG_COMBATHEALTH();
                case MSG_COMBATLOADED.c_messageID: return new MSG_COMBATLOADED();
                case MSG_COMBATMATCHRESULT.c_messageID: return new MSG_COMBATMATCHRESULT();
                case MSG_COMBATMOVE.c_messageID: return new MSG_COMBATMOVE();
                case MSG_COMBATMOVESELECTION.c_messageID: return new MSG_COMBATMOVESELECTION();
                case MSG_COMBATPAUSED.c_messageID: return new MSG_COMBATPAUSED();
                case MSG_COMBATPHASE.c_messageID: return new MSG_COMBATPHASE();
                case MSG_COMBATPHASEFORSPECTATORS.c_messageID: return new MSG_COMBATPHASEFORSPECTATORS();
                case MSG_COMBATPIPS.c_messageID: return new MSG_COMBATPIPS();
                case MSG_COMBATREMOVE.c_messageID: return new MSG_COMBATREMOVE();
                case MSG_COMBATREVEALHANGING.c_messageID: return new MSG_COMBATREVEALHANGING();
                case MSG_COMBATSTATS.c_messageID: return new MSG_COMBATSTATS();
                case MSG_COMBATUPFIRST.c_messageID: return new MSG_COMBATUPFIRST();
                case MSG_COMBATVICTORY.c_messageID: return new MSG_COMBATVICTORY();
                case MSG_DUEL.c_messageID: return new MSG_DUEL();
                case MSG_ENDDUEL.c_messageID: return new MSG_ENDDUEL();
                case MSG_PETWILLCAST.c_messageID: return new MSG_PETWILLCAST();
                case MSG_SETPLANNINGPHASETIMER.c_messageID: return new MSG_SETPLANNINGPHASETIMER();
                case MSG_SHOWCOMBATUI.c_messageID: return new MSG_SHOWCOMBATUI();
                case MSG_SHOWPETCARD.c_messageID: return new MSG_SHOWPETCARD();
                case MSG_UPDATECOMBATPARTICIPANT.c_messageID: return new MSG_UPDATECOMBATPARTICIPANT();
                case MSG_UPDATEDUELTIMER.c_messageID: return new MSG_UPDATEDUELTIMER();
            }
            throw new ArgumentOutOfRangeException(nameof(id));
        }
        
        public interface Handler
        {
            bool NetHandleAllowLeavePvP(MSG_ALLOWLEAVEPVP msg) => false;
            bool NetHandleCombatActions(MSG_COMBATACTIONS msg) => false;
            bool NetHandleCombatAdd(MSG_COMBATADD msg) => false;
            bool NetHandleCombatAFK(MSG_COMBATAFK msg) => false;
            bool NetHandleCombatCheat(MSG_COMBATCHEAT msg) => false;
            bool NetHandleCombatDraw(MSG_COMBATDRAW msg) => false;
            bool NetHandleCombatFlee(MSG_COMBATFLEE msg) => false;
            bool NetHandleCombatHand(MSG_COMBATHAND msg) => false;
            bool NetHandleCombatHealth(MSG_COMBATHEALTH msg) => false;
            bool NetHandleCombatLoaded(MSG_COMBATLOADED msg) => false;
            bool NetHandleCombatMatchResult(MSG_COMBATMATCHRESULT msg) => false;
            bool NetHandleCombatMove(MSG_COMBATMOVE msg) => false;
            bool NetHandleCombatMoveSelection(MSG_COMBATMOVESELECTION msg) => false;
            bool NetHandleCombatPaused(MSG_COMBATPAUSED msg) => false;
            bool NetHandleCombatPhase(MSG_COMBATPHASE msg) => false;
            bool NetHandleCombatPhaseForSpectators(MSG_COMBATPHASEFORSPECTATORS msg) => false;
            bool NetHandleCombatPips(MSG_COMBATPIPS msg) => false;
            bool NetHandleCombatRemove(MSG_COMBATREMOVE msg) => false;
            bool NetHandleCombatRevealHanging(MSG_COMBATREVEALHANGING msg) => false;
            bool NetHandleCombatStats(MSG_COMBATSTATS msg) => false;
            bool NetHandleCombatUpFirst(MSG_COMBATUPFIRST msg) => false;
            bool NetHandleCombatVictory(MSG_COMBATVICTORY msg) => false;
            bool NetHandleDuel(MSG_DUEL msg) => false;
            bool NetHandleEndDuel(MSG_ENDDUEL msg) => false;
            bool NetHandlePetWillCast(MSG_PETWILLCAST msg) => false;
            bool NetHandleSetPlanningPhaseTimer(MSG_SETPLANNINGPHASETIMER msg) => false;
            bool NetHandleShowCombatUI(MSG_SHOWCOMBATUI msg) => false;
            bool NetHandleShowPetCard(MSG_SHOWPETCARD msg) => false;
            bool NetHandleUpdateCombatParticipant(MSG_UPDATECOMBATPARTICIPANT msg) => false;
            bool NetHandleUpdateDuelTimer(MSG_UPDATEDUELTIMER msg) => false;
        }
    }
    public class PATCH_8_Protocol: INetworkService
    {
        public const byte c_serviceID = 8;
        public byte GetID() => c_serviceID;
        
        public class MSG_LATEST_FILE_LIST : INetworkMessage
        {
            public const byte c_messageID = 1;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("LatestVersion", DMLType.UINT)] public uint m_latestVersion;
            [DMLField("ListFileName", DMLType.STR)] public ByteString m_listFileName;
            [DMLField("ListFileType", DMLType.UINT)] public uint m_listFileType;
            [DMLField("ListFileTime", DMLType.UINT)] public uint m_listFileTime;
            [DMLField("ListFileSize", DMLType.UINT)] public uint m_listFileSize;
            [DMLField("ListFileCRC", DMLType.UINT)] public uint m_listFileCRC;
            [DMLField("ListFileURL", DMLType.STR)] public ByteString m_listFileURL;
            [DMLField("URLPrefix", DMLType.STR)] public ByteString m_URLPrefix;
            [DMLField("URLSuffix", DMLType.STR)] public ByteString m_URLSuffix;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_LATEST_FILE_LIST>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_LATEST_FILE_LIST>.Read(buf, this);
            }
        }
        public class MSG_LATEST_FILE_LIST_V2 : INetworkMessage
        {
            public const byte c_messageID = 2;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("LatestVersion", DMLType.UINT)] public uint m_latestVersion;
            [DMLField("ListFileName", DMLType.STR)] public ByteString m_listFileName;
            [DMLField("ListFileType", DMLType.UINT)] public uint m_listFileType;
            [DMLField("ListFileTime", DMLType.UINT)] public uint m_listFileTime;
            [DMLField("ListFileSize", DMLType.UINT)] public uint m_listFileSize;
            [DMLField("ListFileCRC", DMLType.UINT)] public uint m_listFileCRC;
            [DMLField("ListFileURL", DMLType.STR)] public ByteString m_listFileURL;
            [DMLField("URLPrefix", DMLType.STR)] public ByteString m_URLPrefix;
            [DMLField("URLSuffix", DMLType.STR)] public ByteString m_URLSuffix;
            [DMLField("Locale", DMLType.STR)] public ByteString m_locale;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_LATEST_FILE_LIST_V2>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_LATEST_FILE_LIST_V2>.Read(buf, this);
            }
        }
        public class MSG_NEXT_VERSION : INetworkMessage
        {
            public const byte c_messageID = 3;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("PkgName", DMLType.STR)] public ByteString m_pkgName;
            [DMLField("Version", DMLType.INT)] public int m_version;
            [DMLField("URLPrefix", DMLType.STR)] public ByteString m_URLPrefix;
            [DMLField("FileName", DMLType.STR)] public ByteString m_fileName;
            [DMLField("FileType", DMLType.INT)] public int m_fileType;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_NEXT_VERSION>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_NEXT_VERSION>.Read(buf, this);
            }
        }
        
        public bool Dispatch(object handlerVoid, INetworkMessage message)
        {
            Debug.Assert(message.GetServiceID() == c_serviceID);
            var handler = (Handler)handlerVoid;
            
            switch (message.GetID())
            {
                case MSG_LATEST_FILE_LIST.c_messageID:
                    return handler.NetHandleLatestFileList((MSG_LATEST_FILE_LIST)message);
                case MSG_LATEST_FILE_LIST_V2.c_messageID:
                    return handler.NetHandleLatestFileListV2((MSG_LATEST_FILE_LIST_V2)message);
                case MSG_NEXT_VERSION.c_messageID:
                    return handler.NetHandleNextVersion((MSG_NEXT_VERSION)message);
            }
            return false;
        }
        
        public INetworkMessage AllocateMessage(byte id)
        {
            switch (id)
            {
                case MSG_LATEST_FILE_LIST.c_messageID: return new MSG_LATEST_FILE_LIST();
                case MSG_LATEST_FILE_LIST_V2.c_messageID: return new MSG_LATEST_FILE_LIST_V2();
                case MSG_NEXT_VERSION.c_messageID: return new MSG_NEXT_VERSION();
            }
            throw new ArgumentOutOfRangeException(nameof(id));
        }
        
        public interface Handler
        {
            bool NetHandleLatestFileList(MSG_LATEST_FILE_LIST msg) => false;
            bool NetHandleLatestFileListV2(MSG_LATEST_FILE_LIST_V2 msg) => false;
            bool NetHandleNextVersion(MSG_NEXT_VERSION msg) => false;
        }
    }
    public class PET_9_Protocol: INetworkService
    {
        public const byte c_serviceID = 9;
        public byte GetID() => c_serviceID;
        
        public class MSG_CHEERCOSTMAPUPDATE : INetworkMessage
        {
            public const byte c_messageID = 1;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("CheerCostMods", DMLType.STR)] public ByteString m_cheerCostMods;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_CHEERCOSTMAPUPDATE>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_CHEERCOSTMAPUPDATE>.Read(buf, this);
            }
        }
        public class MSG_DERBYEFFECTAPPLY : INetworkMessage
        {
            public const byte c_messageID = 2;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("Game", DMLType.STR)] public ByteString m_game;
            [DMLField("Data", DMLType.STR)] public ByteString m_data;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_DERBYEFFECTAPPLY>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_DERBYEFFECTAPPLY>.Read(buf, this);
            }
        }
        public class MSG_DERBYEFFECTREMOVE : INetworkMessage
        {
            public const byte c_messageID = 3;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("Game", DMLType.STR)] public ByteString m_game;
            [DMLField("ID", DMLType.INT)] public int m_iD;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_DERBYEFFECTREMOVE>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_DERBYEFFECTREMOVE>.Read(buf, this);
            }
        }
        public class MSG_DERBYEFFECTSLISTUPDATE : INetworkMessage
        {
            public const byte c_messageID = 4;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("Data", DMLType.STR)] public ByteString m_data;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_DERBYEFFECTSLISTUPDATE>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_DERBYEFFECTSLISTUPDATE>.Read(buf, this);
            }
        }
        public class MSG_DERBYLOCATION : INetworkMessage
        {
            public const byte c_messageID = 5;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("RacerId", DMLType.INT)] public int m_racerId;
            [DMLField("TargetId", DMLType.INT)] public int m_targetId;
            [DMLField("XLoc", DMLType.FLT)] public float m_xLoc;
            [DMLField("YLoc", DMLType.FLT)] public float m_yLoc;
            [DMLField("ZLoc", DMLType.FLT)] public float m_zLoc;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_DERBYLOCATION>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_DERBYLOCATION>.Read(buf, this);
            }
        }
        public class MSG_DERBYPETENERGYINFO : INetworkMessage
        {
            public const byte c_messageID = 6;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("Cost", DMLType.INT)] public int m_cost;
            [DMLField("Current", DMLType.INT)] public int m_current;
            [DMLField("Maximum", DMLType.INT)] public int m_maximum;
            [DMLField("GID", DMLType.GID)] public GID m_gID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_DERBYPETENERGYINFO>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_DERBYPETENERGYINFO>.Read(buf, this);
            }
        }
        public class MSG_DERBYSTATMOD : INetworkMessage
        {
            public const byte c_messageID = 7;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("Data", DMLType.STR)] public ByteString m_data;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_DERBYSTATMOD>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_DERBYSTATMOD>.Read(buf, this);
            }
        }
        public class MSG_DERBYSYNC : INetworkMessage
        {
            public const byte c_messageID = 8;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("RacerId", DMLType.GID)] public GID m_racerId;
            [DMLField("RacePositionX", DMLType.FLT)] public float m_racePositionX;
            [DMLField("RacePositionY", DMLType.FLT)] public float m_racePositionY;
            [DMLField("RacePositionZ", DMLType.FLT)] public float m_racePositionZ;
            [DMLField("Lane", DMLType.UBYT)] public byte m_lane;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_DERBYSYNC>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_DERBYSYNC>.Read(buf, this);
            }
        }
        public class MSG_HATCHEGGNOW : INetworkMessage
        {
            public const byte c_messageID = 9;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("EggGID", DMLType.GID)] public GID m_eggGID;
            [DMLField("Gold", DMLType.INT)] public int m_gold;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_HATCHEGGNOW>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_HATCHEGGNOW>.Read(buf, this);
            }
        }
        public class MSG_PETDERBYBUFF : INetworkMessage
        {
            public const byte c_messageID = 10;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("Add", DMLType.UBYT)] public byte m_add;
            [DMLField("Type", DMLType.INT)] public int m_type;
            [DMLField("PetID", DMLType.GID)] public GID m_petID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PETDERBYBUFF>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PETDERBYBUFF>.Read(buf, this);
            }
        }
        public class MSG_PETDERBYCHEER : INetworkMessage
        {
            public const byte c_messageID = 11;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("PetIndex", DMLType.UBYT)] public byte m_petIndex;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PETDERBYCHEER>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PETDERBYCHEER>.Read(buf, this);
            }
        }
        public class MSG_PETDERBYJUMPDUCK : INetworkMessage
        {
            public const byte c_messageID = 12;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("PetIndex", DMLType.UBYT)] public byte m_petIndex;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PETDERBYJUMPDUCK>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PETDERBYJUMPDUCK>.Read(buf, this);
            }
        }
        public class MSG_PETDERBYLAP : INetworkMessage
        {
            public const byte c_messageID = 13;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("PetIndex", DMLType.UBYT)] public byte m_petIndex;
            [DMLField("Count", DMLType.INT)] public int m_count;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PETDERBYLAP>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PETDERBYLAP>.Read(buf, this);
            }
        }
        public class MSG_PETDERBYMODIFYSTAT : INetworkMessage
        {
            public const byte c_messageID = 14;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("Name", DMLType.UBYT)] public byte m_name;
            [DMLField("Value", DMLType.INT)] public int m_value;
            [DMLField("Type", DMLType.UBYT)] public byte m_type;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PETDERBYMODIFYSTAT>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PETDERBYMODIFYSTAT>.Read(buf, this);
            }
        }
        public class MSG_PETDERBYMORALE : INetworkMessage
        {
            public const byte c_messageID = 15;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("PetIndex", DMLType.UBYT)] public byte m_petIndex;
            [DMLField("Morale", DMLType.INT)] public int m_morale;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PETDERBYMORALE>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PETDERBYMORALE>.Read(buf, this);
            }
        }
        public class MSG_PETDERBYPHOTOFINISH : INetworkMessage
        {
            public const byte c_messageID = 16;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("Rank", DMLType.INT)] public int m_rank;
            [DMLField("PetIndex", DMLType.UBYT)] public byte m_petIndex;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PETDERBYPHOTOFINISH>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PETDERBYPHOTOFINISH>.Read(buf, this);
            }
        }
        public class MSG_PETDERBYPLAYERLEFT : INetworkMessage
        {
            public const byte c_messageID = 17;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("PetIndex", DMLType.UBYT)] public byte m_petIndex;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PETDERBYPLAYERLEFT>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PETDERBYPLAYERLEFT>.Read(buf, this);
            }
        }
        public class MSG_PETDERBYSLOW : INetworkMessage
        {
            public const byte c_messageID = 18;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("PetIndex", DMLType.UBYT)] public byte m_petIndex;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PETDERBYSLOW>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PETDERBYSLOW>.Read(buf, this);
            }
        }
        public class MSG_PETDERBYSPEED : INetworkMessage
        {
            public const byte c_messageID = 19;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("PetIndex", DMLType.UBYT)] public byte m_petIndex;
            [DMLField("Speed", DMLType.INT)] public int m_speed;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PETDERBYSPEED>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PETDERBYSPEED>.Read(buf, this);
            }
        }
        public class MSG_PETDERBYSTART : INetworkMessage
        {
            public const byte c_messageID = 20;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("GoGoGo", DMLType.UBYT)] public byte m_goGoGo;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PETDERBYSTART>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PETDERBYSTART>.Read(buf, this);
            }
        }
        public class MSG_PETDERBYSWITCHLANE : INetworkMessage
        {
            public const byte c_messageID = 21;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("PetIndex", DMLType.UBYT)] public byte m_petIndex;
            [DMLField("Lane", DMLType.UBYT)] public byte m_lane;
            [DMLField("MsgID", DMLType.INT)] public int m_msgID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PETDERBYSWITCHLANE>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PETDERBYSWITCHLANE>.Read(buf, this);
            }
        }
        public class MSG_PETDERBYSWITCHLANEFAIL : INetworkMessage
        {
            public const byte c_messageID = 22;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PETDERBYSWITCHLANEFAIL>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PETDERBYSWITCHLANEFAIL>.Read(buf, this);
            }
        }
        public class MSG_PETDERBYUSETALENT : INetworkMessage
        {
            public const byte c_messageID = 23;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("TalentID", DMLType.UINT)] public uint m_talentID;
            [DMLField("Used", DMLType.UBYT)] public byte m_used;
            [DMLField("PetIndex", DMLType.UBYT)] public byte m_petIndex;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PETDERBYUSETALENT>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PETDERBYUSETALENT>.Read(buf, this);
            }
        }
        public class MSG_PETEGGMORPHED : INetworkMessage
        {
            public const byte c_messageID = 24;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("PetTemplateGID", DMLType.GID)] public GID m_petTemplateGID;
            [DMLField("PetName", DMLType.UINT)] public uint m_petName;
            [DMLField("HatchTime", DMLType.UINT)] public uint m_hatchTime;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PETEGGMORPHED>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PETEGGMORPHED>.Read(buf, this);
            }
        }
        public class MSG_PETENERGYMAX : INetworkMessage
        {
            public const byte c_messageID = 25;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("MaxEnergy", DMLType.INT)] public int m_maxEnergy;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PETENERGYMAX>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PETENERGYMAX>.Read(buf, this);
            }
        }
        public class MSG_PETENERGYTICK : INetworkMessage
        {
            public const byte c_messageID = 26;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("GlobalID", DMLType.GID)] public GID m_globalID;
            [DMLField("Energy", DMLType.INT)] public int m_energy;
            [DMLField("MaxEnergy", DMLType.INT)] public int m_maxEnergy;
            [DMLField("TickTime", DMLType.INT)] public int m_tickTime;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PETENERGYTICK>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PETENERGYTICK>.Read(buf, this);
            }
        }
        public class MSG_PETGAMEDANCE : INetworkMessage
        {
            public const byte c_messageID = 27;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("Moves", DMLType.STR)] public ByteString m_moves;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PETGAMEDANCE>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PETGAMEDANCE>.Read(buf, this);
            }
        }
        public class MSG_PETGAMEDATA : INetworkMessage
        {
            public const byte c_messageID = 28;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("Game", DMLType.STR)] public ByteString m_game;
            [DMLField("Data", DMLType.STR)] public ByteString m_data;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PETGAMEDATA>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PETGAMEDATA>.Read(buf, this);
            }
        }
        public class MSG_PETGAMEDERBYRESULTS : INetworkMessage
        {
            public const byte c_messageID = 29;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("Data", DMLType.STR)] public ByteString m_data;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PETGAMEDERBYRESULTS>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PETGAMEDERBYRESULTS>.Read(buf, this);
            }
        }
        public class MSG_PETGAMEDROPBONUS : INetworkMessage
        {
            public const byte c_messageID = 30;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("GameCommand", DMLType.UBYT)] public byte m_gameCommand;
            [DMLField("Bonus", DMLType.INT)] public int m_bonus;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PETGAMEDROPBONUS>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PETGAMEDROPBONUS>.Read(buf, this);
            }
        }
        public class MSG_PETGAMEDROPOBJECT : INetworkMessage
        {
            public const byte c_messageID = 31;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("GameCommand", DMLType.UBYT)] public byte m_gameCommand;
            [DMLField("GID", DMLType.GID)] public GID m_gID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PETGAMEDROPOBJECT>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PETGAMEDROPOBJECT>.Read(buf, this);
            }
        }
        public class MSG_PETGAMEEND : INetworkMessage
        {
            public const byte c_messageID = 32;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("Game", DMLType.STR)] public ByteString m_game;
            [DMLField("Data", DMLType.STR)] public ByteString m_data;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PETGAMEEND>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PETGAMEEND>.Read(buf, this);
            }
        }
        public class MSG_PETGAMEENDING : INetworkMessage
        {
            public const byte c_messageID = 33;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("Game", DMLType.STR)] public ByteString m_game;
            [DMLField("GlobalID", DMLType.GID)] public GID m_globalID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PETGAMEENDING>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PETGAMEENDING>.Read(buf, this);
            }
        }
        public class MSG_PETGAMEINDIVIDUALRESULTS : INetworkMessage
        {
            public const byte c_messageID = 34;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("Data", DMLType.STR)] public ByteString m_data;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PETGAMEINDIVIDUALRESULTS>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PETGAMEINDIVIDUALRESULTS>.Read(buf, this);
            }
        }
        public class MSG_PETGAMEINIT : INetworkMessage
        {
            public const byte c_messageID = 35;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("Game", DMLType.STR)] public ByteString m_game;
            [DMLField("Data", DMLType.STR)] public ByteString m_data;
            [DMLField("MinLevel", DMLType.UBYT)] public byte m_minLevel;
            [DMLField("Track", DMLType.UBYT)] public byte m_track;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PETGAMEINIT>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PETGAMEINIT>.Read(buf, this);
            }
        }
        public class MSG_PETGAMEJOIN : INetworkMessage
        {
            public const byte c_messageID = 36;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("Game", DMLType.STR)] public ByteString m_game;
            [DMLField("Track", DMLType.STR)] public ByteString m_track;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PETGAMEJOIN>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PETGAMEJOIN>.Read(buf, this);
            }
        }
        public class MSG_PETGAMEJOINRSP : INetworkMessage
        {
            public const byte c_messageID = 37;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("Game", DMLType.STR)] public ByteString m_game;
            [DMLField("Success", DMLType.UBYT)] public byte m_success;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PETGAMEJOINRSP>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PETGAMEJOINRSP>.Read(buf, this);
            }
        }
        public class MSG_PETGAMEJUMP : INetworkMessage
        {
            public const byte c_messageID = 38;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PETGAMEJUMP>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PETGAMEJUMP>.Read(buf, this);
            }
        }
        public class MSG_PETGAMEMAZE : INetworkMessage
        {
            public const byte c_messageID = 39;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("GameCommand", DMLType.UBYT)] public byte m_gameCommand;
            [DMLField("GameData", DMLType.UBYT)] public byte m_gameData;
            [DMLField("ObjectID", DMLType.GID)] public GID m_objectID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PETGAMEMAZE>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PETGAMEMAZE>.Read(buf, this);
            }
        }
        public class MSG_PETGAMEREADY : INetworkMessage
        {
            public const byte c_messageID = 40;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PETGAMEREADY>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PETGAMEREADY>.Read(buf, this);
            }
        }
        public class MSG_PETGAMESNACKFEEDFAILED : INetworkMessage
        {
            public const byte c_messageID = 41;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PETGAMESNACKFEEDFAILED>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PETGAMESNACKFEEDFAILED>.Read(buf, this);
            }
        }
        public class MSG_PETGAMESNACKFEEDSUCCESS : INetworkMessage
        {
            public const byte c_messageID = 42;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("Data", DMLType.STR)] public ByteString m_data;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PETGAMESNACKFEEDSUCCESS>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PETGAMESNACKFEEDSUCCESS>.Read(buf, this);
            }
        }
        public class MSG_PETGAMESTART : INetworkMessage
        {
            public const byte c_messageID = 43;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("Game", DMLType.STR)] public ByteString m_game;
            [DMLField("Data", DMLType.STR)] public ByteString m_data;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PETGAMESTART>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PETGAMESTART>.Read(buf, this);
            }
        }
        public class MSG_PETHATCHED : INetworkMessage
        {
            public const byte c_messageID = 44;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("GlobalID", DMLType.GID)] public GID m_globalID;
            [DMLField("TemplateID", DMLType.GID)] public GID m_templateID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PETHATCHED>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PETHATCHED>.Read(buf, this);
            }
        }
        public class MSG_PETLEVELUP : INetworkMessage
        {
            public const byte c_messageID = 45;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("GlobalID", DMLType.GID)] public GID m_globalID;
            [DMLField("OverallRating", DMLType.UBYT)] public byte m_overallRating;
            [DMLField("ActiveRating", DMLType.UBYT)] public byte m_activeRating;
            [DMLField("PetLevel", DMLType.UBYT)] public byte m_petLevel;
            [DMLField("NewTalent", DMLType.UINT)] public uint m_newTalent;
            [DMLField("NewDerbyPower", DMLType.UINT)] public uint m_newDerbyPower;
            [DMLField("NewJewel", DMLType.UINT)] public uint m_newJewel;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PETLEVELUP>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PETLEVELUP>.Read(buf, this);
            }
        }
        public class MSG_PETMORPHCANAFFORD : INetworkMessage
        {
            public const byte c_messageID = 46;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("CanAfford", DMLType.BYT)] public sbyte m_canAfford;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PETMORPHCANAFFORD>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PETMORPHCANAFFORD>.Read(buf, this);
            }
        }
        public class MSG_PETMORPHINGSLOT : INetworkMessage
        {
            public const byte c_messageID = 47;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("GlobalID", DMLType.GID)] public GID m_globalID;
            [DMLField("Removed", DMLType.UBYT)] public byte m_removed;
            [DMLField("ExpireTimeCount", DMLType.UINT)] public uint m_expireTimeCount;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PETMORPHINGSLOT>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PETMORPHINGSLOT>.Read(buf, this);
            }
        }
        public class MSG_PETMORPHREADY : INetworkMessage
        {
            public const byte c_messageID = 48;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("Confirmed", DMLType.BYT)] public sbyte m_confirmed;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PETMORPHREADY>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PETMORPHREADY>.Read(buf, this);
            }
        }
        public class MSG_PETMORPHSET : INetworkMessage
        {
            public const byte c_messageID = 49;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("PetID", DMLType.GID)] public GID m_petID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PETMORPHSET>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PETMORPHSET>.Read(buf, this);
            }
        }
        public class MSG_PETSNACKADD : INetworkMessage
        {
            public const byte c_messageID = 50;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("GlobalID", DMLType.GID)] public GID m_globalID;
            [DMLField("Data", DMLType.STR)] public ByteString m_data;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PETSNACKADD>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PETSNACKADD>.Read(buf, this);
            }
        }
        public class MSG_PETSNACKREMOVE : INetworkMessage
        {
            public const byte c_messageID = 51;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("GlobalID", DMLType.GID)] public GID m_globalID;
            [DMLField("ItemID", DMLType.GID)] public GID m_itemID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PETSNACKREMOVE>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PETSNACKREMOVE>.Read(buf, this);
            }
        }
        public class MSG_PETSNACKREMOVEREQUEST : INetworkMessage
        {
            public const byte c_messageID = 52;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("GlobalID", DMLType.GID)] public GID m_globalID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PETSNACKREMOVEREQUEST>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PETSNACKREMOVEREQUEST>.Read(buf, this);
            }
        }
        public class MSG_PETSNACKUPDATE : INetworkMessage
        {
            public const byte c_messageID = 53;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("GlobalID", DMLType.GID)] public GID m_globalID;
            [DMLField("ItemID", DMLType.GID)] public GID m_itemID;
            [DMLField("Quantity", DMLType.INT)] public int m_quantity;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PETSNACKUPDATE>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PETSNACKUPDATE>.Read(buf, this);
            }
        }
        public class MSG_PETUPDATEBEHAVIOR : INetworkMessage
        {
            public const byte c_messageID = 54;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("GlobalID", DMLType.GID)] public GID m_globalID;
            [DMLField("Data", DMLType.STR)] public ByteString m_data;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PETUPDATEBEHAVIOR>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PETUPDATEBEHAVIOR>.Read(buf, this);
            }
        }
        
        public bool Dispatch(object handlerVoid, INetworkMessage message)
        {
            Debug.Assert(message.GetServiceID() == c_serviceID);
            var handler = (Handler)handlerVoid;
            
            switch (message.GetID())
            {
                case MSG_CHEERCOSTMAPUPDATE.c_messageID:
                    return handler.NetHandleCheerCostMapUpdate((MSG_CHEERCOSTMAPUPDATE)message);
                case MSG_DERBYEFFECTAPPLY.c_messageID:
                    return handler.NetHandleDerbyEffectApply((MSG_DERBYEFFECTAPPLY)message);
                case MSG_DERBYEFFECTREMOVE.c_messageID:
                    return handler.NetHandleDerbyEffectRemove((MSG_DERBYEFFECTREMOVE)message);
                case MSG_DERBYEFFECTSLISTUPDATE.c_messageID:
                    return handler.NetHandleDerbyEffectsListUpdate((MSG_DERBYEFFECTSLISTUPDATE)message);
                case MSG_DERBYLOCATION.c_messageID:
                    return handler.NetHandleDerbyLocation((MSG_DERBYLOCATION)message);
                case MSG_DERBYPETENERGYINFO.c_messageID:
                    return handler.NetHandleDerbyPetEnergyInfo((MSG_DERBYPETENERGYINFO)message);
                case MSG_DERBYSTATMOD.c_messageID:
                    return handler.NetHandleDerbyStatMod((MSG_DERBYSTATMOD)message);
                case MSG_DERBYSYNC.c_messageID:
                    return handler.NetHandleDerbySync((MSG_DERBYSYNC)message);
                case MSG_HATCHEGGNOW.c_messageID:
                    return handler.NetHandleHatchEggNow((MSG_HATCHEGGNOW)message);
                case MSG_PETDERBYBUFF.c_messageID:
                    return handler.NetHandlePetDerbyBuff((MSG_PETDERBYBUFF)message);
                case MSG_PETDERBYCHEER.c_messageID:
                    return handler.NetHandlePetDerbyCheer((MSG_PETDERBYCHEER)message);
                case MSG_PETDERBYJUMPDUCK.c_messageID:
                    return handler.NetHandlePetDerbyJumpDuck((MSG_PETDERBYJUMPDUCK)message);
                case MSG_PETDERBYLAP.c_messageID:
                    return handler.NetHandlePetDerbyLap((MSG_PETDERBYLAP)message);
                case MSG_PETDERBYMODIFYSTAT.c_messageID:
                    return handler.NetHandlePetDerbyModifyStat((MSG_PETDERBYMODIFYSTAT)message);
                case MSG_PETDERBYMORALE.c_messageID:
                    return handler.NetHandlePetDerbyMorale((MSG_PETDERBYMORALE)message);
                case MSG_PETDERBYPHOTOFINISH.c_messageID:
                    return handler.NetHandlePetDerbyPhotoFinish((MSG_PETDERBYPHOTOFINISH)message);
                case MSG_PETDERBYPLAYERLEFT.c_messageID:
                    return handler.NetHandlePetDerbyPlayerLeft((MSG_PETDERBYPLAYERLEFT)message);
                case MSG_PETDERBYSLOW.c_messageID:
                    return handler.NetHandlePetDerbySlow((MSG_PETDERBYSLOW)message);
                case MSG_PETDERBYSPEED.c_messageID:
                    return handler.NetHandlePetDerbySpeed((MSG_PETDERBYSPEED)message);
                case MSG_PETDERBYSTART.c_messageID:
                    return handler.NetHandlePetDerbyStart((MSG_PETDERBYSTART)message);
                case MSG_PETDERBYSWITCHLANE.c_messageID:
                    return handler.NetHandlePetDerbySwitchLane((MSG_PETDERBYSWITCHLANE)message);
                case MSG_PETDERBYSWITCHLANEFAIL.c_messageID:
                    return handler.NetHandlePetDerbySwitchLaneFail((MSG_PETDERBYSWITCHLANEFAIL)message);
                case MSG_PETDERBYUSETALENT.c_messageID:
                    return handler.NetHandlePetDerbyUseTalent((MSG_PETDERBYUSETALENT)message);
                case MSG_PETEGGMORPHED.c_messageID:
                    return handler.NetHandlePetEggMorphed((MSG_PETEGGMORPHED)message);
                case MSG_PETENERGYMAX.c_messageID:
                    return handler.NetHandlePetEnergyMax((MSG_PETENERGYMAX)message);
                case MSG_PETENERGYTICK.c_messageID:
                    return handler.NetHandlePetEnergyTick((MSG_PETENERGYTICK)message);
                case MSG_PETGAMEDANCE.c_messageID:
                    return handler.NetHandlePetGameDance((MSG_PETGAMEDANCE)message);
                case MSG_PETGAMEDATA.c_messageID:
                    return handler.NetHandlePetGameData((MSG_PETGAMEDATA)message);
                case MSG_PETGAMEDERBYRESULTS.c_messageID:
                    return handler.NetHandlePetGameDerbyResults((MSG_PETGAMEDERBYRESULTS)message);
                case MSG_PETGAMEDROPBONUS.c_messageID:
                    return handler.NetHandlePetGameDropBonus((MSG_PETGAMEDROPBONUS)message);
                case MSG_PETGAMEDROPOBJECT.c_messageID:
                    return handler.NetHandlePetGameDropObject((MSG_PETGAMEDROPOBJECT)message);
                case MSG_PETGAMEEND.c_messageID:
                    return handler.NetHandlePetGameEnd((MSG_PETGAMEEND)message);
                case MSG_PETGAMEENDING.c_messageID:
                    return handler.NetHandlePetGameEnding((MSG_PETGAMEENDING)message);
                case MSG_PETGAMEINDIVIDUALRESULTS.c_messageID:
                    return handler.NetHandlePetGameIndividualResults((MSG_PETGAMEINDIVIDUALRESULTS)message);
                case MSG_PETGAMEINIT.c_messageID:
                    return handler.NetHandlePetGameInit((MSG_PETGAMEINIT)message);
                case MSG_PETGAMEJOIN.c_messageID:
                    return handler.NetHandlePetGameJoin((MSG_PETGAMEJOIN)message);
                case MSG_PETGAMEJOINRSP.c_messageID:
                    return handler.NetHandlePetGameJoinRsp((MSG_PETGAMEJOINRSP)message);
                case MSG_PETGAMEJUMP.c_messageID:
                    return handler.NetHandlePetGameJump((MSG_PETGAMEJUMP)message);
                case MSG_PETGAMEMAZE.c_messageID:
                    return handler.NetHandlePetGameMaze((MSG_PETGAMEMAZE)message);
                case MSG_PETGAMEREADY.c_messageID:
                    return handler.NetHandlePetGameReady((MSG_PETGAMEREADY)message);
                case MSG_PETGAMESNACKFEEDFAILED.c_messageID:
                    return handler.NetHandlePetGameSnackFeedFailed((MSG_PETGAMESNACKFEEDFAILED)message);
                case MSG_PETGAMESNACKFEEDSUCCESS.c_messageID:
                    return handler.NetHandlePetGameSnackFeedSuccess((MSG_PETGAMESNACKFEEDSUCCESS)message);
                case MSG_PETGAMESTART.c_messageID:
                    return handler.NetHandlePetGameStart((MSG_PETGAMESTART)message);
                case MSG_PETHATCHED.c_messageID:
                    return handler.NetHandlePetHatched((MSG_PETHATCHED)message);
                case MSG_PETLEVELUP.c_messageID:
                    return handler.NetHandlePetLevelUp((MSG_PETLEVELUP)message);
                case MSG_PETMORPHCANAFFORD.c_messageID:
                    return handler.NetHandlePetMorphCanAfford((MSG_PETMORPHCANAFFORD)message);
                case MSG_PETMORPHINGSLOT.c_messageID:
                    return handler.NetHandlePetMorphingSlot((MSG_PETMORPHINGSLOT)message);
                case MSG_PETMORPHREADY.c_messageID:
                    return handler.NetHandlePetMorphReady((MSG_PETMORPHREADY)message);
                case MSG_PETMORPHSET.c_messageID:
                    return handler.NetHandlePetMorphSet((MSG_PETMORPHSET)message);
                case MSG_PETSNACKADD.c_messageID:
                    return handler.NetHandlePetSnackAdd((MSG_PETSNACKADD)message);
                case MSG_PETSNACKREMOVE.c_messageID:
                    return handler.NetHandlePetSnackRemove((MSG_PETSNACKREMOVE)message);
                case MSG_PETSNACKREMOVEREQUEST.c_messageID:
                    return handler.NetHandlePetSnackRemoveRequest((MSG_PETSNACKREMOVEREQUEST)message);
                case MSG_PETSNACKUPDATE.c_messageID:
                    return handler.NetHandlePetSnackUpdate((MSG_PETSNACKUPDATE)message);
                case MSG_PETUPDATEBEHAVIOR.c_messageID:
                    return handler.NetHandlePetUpdateBehavior((MSG_PETUPDATEBEHAVIOR)message);
            }
            return false;
        }
        
        public INetworkMessage AllocateMessage(byte id)
        {
            switch (id)
            {
                case MSG_CHEERCOSTMAPUPDATE.c_messageID: return new MSG_CHEERCOSTMAPUPDATE();
                case MSG_DERBYEFFECTAPPLY.c_messageID: return new MSG_DERBYEFFECTAPPLY();
                case MSG_DERBYEFFECTREMOVE.c_messageID: return new MSG_DERBYEFFECTREMOVE();
                case MSG_DERBYEFFECTSLISTUPDATE.c_messageID: return new MSG_DERBYEFFECTSLISTUPDATE();
                case MSG_DERBYLOCATION.c_messageID: return new MSG_DERBYLOCATION();
                case MSG_DERBYPETENERGYINFO.c_messageID: return new MSG_DERBYPETENERGYINFO();
                case MSG_DERBYSTATMOD.c_messageID: return new MSG_DERBYSTATMOD();
                case MSG_DERBYSYNC.c_messageID: return new MSG_DERBYSYNC();
                case MSG_HATCHEGGNOW.c_messageID: return new MSG_HATCHEGGNOW();
                case MSG_PETDERBYBUFF.c_messageID: return new MSG_PETDERBYBUFF();
                case MSG_PETDERBYCHEER.c_messageID: return new MSG_PETDERBYCHEER();
                case MSG_PETDERBYJUMPDUCK.c_messageID: return new MSG_PETDERBYJUMPDUCK();
                case MSG_PETDERBYLAP.c_messageID: return new MSG_PETDERBYLAP();
                case MSG_PETDERBYMODIFYSTAT.c_messageID: return new MSG_PETDERBYMODIFYSTAT();
                case MSG_PETDERBYMORALE.c_messageID: return new MSG_PETDERBYMORALE();
                case MSG_PETDERBYPHOTOFINISH.c_messageID: return new MSG_PETDERBYPHOTOFINISH();
                case MSG_PETDERBYPLAYERLEFT.c_messageID: return new MSG_PETDERBYPLAYERLEFT();
                case MSG_PETDERBYSLOW.c_messageID: return new MSG_PETDERBYSLOW();
                case MSG_PETDERBYSPEED.c_messageID: return new MSG_PETDERBYSPEED();
                case MSG_PETDERBYSTART.c_messageID: return new MSG_PETDERBYSTART();
                case MSG_PETDERBYSWITCHLANE.c_messageID: return new MSG_PETDERBYSWITCHLANE();
                case MSG_PETDERBYSWITCHLANEFAIL.c_messageID: return new MSG_PETDERBYSWITCHLANEFAIL();
                case MSG_PETDERBYUSETALENT.c_messageID: return new MSG_PETDERBYUSETALENT();
                case MSG_PETEGGMORPHED.c_messageID: return new MSG_PETEGGMORPHED();
                case MSG_PETENERGYMAX.c_messageID: return new MSG_PETENERGYMAX();
                case MSG_PETENERGYTICK.c_messageID: return new MSG_PETENERGYTICK();
                case MSG_PETGAMEDANCE.c_messageID: return new MSG_PETGAMEDANCE();
                case MSG_PETGAMEDATA.c_messageID: return new MSG_PETGAMEDATA();
                case MSG_PETGAMEDERBYRESULTS.c_messageID: return new MSG_PETGAMEDERBYRESULTS();
                case MSG_PETGAMEDROPBONUS.c_messageID: return new MSG_PETGAMEDROPBONUS();
                case MSG_PETGAMEDROPOBJECT.c_messageID: return new MSG_PETGAMEDROPOBJECT();
                case MSG_PETGAMEEND.c_messageID: return new MSG_PETGAMEEND();
                case MSG_PETGAMEENDING.c_messageID: return new MSG_PETGAMEENDING();
                case MSG_PETGAMEINDIVIDUALRESULTS.c_messageID: return new MSG_PETGAMEINDIVIDUALRESULTS();
                case MSG_PETGAMEINIT.c_messageID: return new MSG_PETGAMEINIT();
                case MSG_PETGAMEJOIN.c_messageID: return new MSG_PETGAMEJOIN();
                case MSG_PETGAMEJOINRSP.c_messageID: return new MSG_PETGAMEJOINRSP();
                case MSG_PETGAMEJUMP.c_messageID: return new MSG_PETGAMEJUMP();
                case MSG_PETGAMEMAZE.c_messageID: return new MSG_PETGAMEMAZE();
                case MSG_PETGAMEREADY.c_messageID: return new MSG_PETGAMEREADY();
                case MSG_PETGAMESNACKFEEDFAILED.c_messageID: return new MSG_PETGAMESNACKFEEDFAILED();
                case MSG_PETGAMESNACKFEEDSUCCESS.c_messageID: return new MSG_PETGAMESNACKFEEDSUCCESS();
                case MSG_PETGAMESTART.c_messageID: return new MSG_PETGAMESTART();
                case MSG_PETHATCHED.c_messageID: return new MSG_PETHATCHED();
                case MSG_PETLEVELUP.c_messageID: return new MSG_PETLEVELUP();
                case MSG_PETMORPHCANAFFORD.c_messageID: return new MSG_PETMORPHCANAFFORD();
                case MSG_PETMORPHINGSLOT.c_messageID: return new MSG_PETMORPHINGSLOT();
                case MSG_PETMORPHREADY.c_messageID: return new MSG_PETMORPHREADY();
                case MSG_PETMORPHSET.c_messageID: return new MSG_PETMORPHSET();
                case MSG_PETSNACKADD.c_messageID: return new MSG_PETSNACKADD();
                case MSG_PETSNACKREMOVE.c_messageID: return new MSG_PETSNACKREMOVE();
                case MSG_PETSNACKREMOVEREQUEST.c_messageID: return new MSG_PETSNACKREMOVEREQUEST();
                case MSG_PETSNACKUPDATE.c_messageID: return new MSG_PETSNACKUPDATE();
                case MSG_PETUPDATEBEHAVIOR.c_messageID: return new MSG_PETUPDATEBEHAVIOR();
            }
            throw new ArgumentOutOfRangeException(nameof(id));
        }
        
        public interface Handler
        {
            bool NetHandleCheerCostMapUpdate(MSG_CHEERCOSTMAPUPDATE msg) => false;
            bool NetHandleDerbyEffectApply(MSG_DERBYEFFECTAPPLY msg) => false;
            bool NetHandleDerbyEffectRemove(MSG_DERBYEFFECTREMOVE msg) => false;
            bool NetHandleDerbyEffectsListUpdate(MSG_DERBYEFFECTSLISTUPDATE msg) => false;
            bool NetHandleDerbyLocation(MSG_DERBYLOCATION msg) => false;
            bool NetHandleDerbyPetEnergyInfo(MSG_DERBYPETENERGYINFO msg) => false;
            bool NetHandleDerbyStatMod(MSG_DERBYSTATMOD msg) => false;
            bool NetHandleDerbySync(MSG_DERBYSYNC msg) => false;
            bool NetHandleHatchEggNow(MSG_HATCHEGGNOW msg) => false;
            bool NetHandlePetDerbyBuff(MSG_PETDERBYBUFF msg) => false;
            bool NetHandlePetDerbyCheer(MSG_PETDERBYCHEER msg) => false;
            bool NetHandlePetDerbyJumpDuck(MSG_PETDERBYJUMPDUCK msg) => false;
            bool NetHandlePetDerbyLap(MSG_PETDERBYLAP msg) => false;
            bool NetHandlePetDerbyModifyStat(MSG_PETDERBYMODIFYSTAT msg) => false;
            bool NetHandlePetDerbyMorale(MSG_PETDERBYMORALE msg) => false;
            bool NetHandlePetDerbyPhotoFinish(MSG_PETDERBYPHOTOFINISH msg) => false;
            bool NetHandlePetDerbyPlayerLeft(MSG_PETDERBYPLAYERLEFT msg) => false;
            bool NetHandlePetDerbySlow(MSG_PETDERBYSLOW msg) => false;
            bool NetHandlePetDerbySpeed(MSG_PETDERBYSPEED msg) => false;
            bool NetHandlePetDerbyStart(MSG_PETDERBYSTART msg) => false;
            bool NetHandlePetDerbySwitchLane(MSG_PETDERBYSWITCHLANE msg) => false;
            bool NetHandlePetDerbySwitchLaneFail(MSG_PETDERBYSWITCHLANEFAIL msg) => false;
            bool NetHandlePetDerbyUseTalent(MSG_PETDERBYUSETALENT msg) => false;
            bool NetHandlePetEggMorphed(MSG_PETEGGMORPHED msg) => false;
            bool NetHandlePetEnergyMax(MSG_PETENERGYMAX msg) => false;
            bool NetHandlePetEnergyTick(MSG_PETENERGYTICK msg) => false;
            bool NetHandlePetGameDance(MSG_PETGAMEDANCE msg) => false;
            bool NetHandlePetGameData(MSG_PETGAMEDATA msg) => false;
            bool NetHandlePetGameDerbyResults(MSG_PETGAMEDERBYRESULTS msg) => false;
            bool NetHandlePetGameDropBonus(MSG_PETGAMEDROPBONUS msg) => false;
            bool NetHandlePetGameDropObject(MSG_PETGAMEDROPOBJECT msg) => false;
            bool NetHandlePetGameEnd(MSG_PETGAMEEND msg) => false;
            bool NetHandlePetGameEnding(MSG_PETGAMEENDING msg) => false;
            bool NetHandlePetGameIndividualResults(MSG_PETGAMEINDIVIDUALRESULTS msg) => false;
            bool NetHandlePetGameInit(MSG_PETGAMEINIT msg) => false;
            bool NetHandlePetGameJoin(MSG_PETGAMEJOIN msg) => false;
            bool NetHandlePetGameJoinRsp(MSG_PETGAMEJOINRSP msg) => false;
            bool NetHandlePetGameJump(MSG_PETGAMEJUMP msg) => false;
            bool NetHandlePetGameMaze(MSG_PETGAMEMAZE msg) => false;
            bool NetHandlePetGameReady(MSG_PETGAMEREADY msg) => false;
            bool NetHandlePetGameSnackFeedFailed(MSG_PETGAMESNACKFEEDFAILED msg) => false;
            bool NetHandlePetGameSnackFeedSuccess(MSG_PETGAMESNACKFEEDSUCCESS msg) => false;
            bool NetHandlePetGameStart(MSG_PETGAMESTART msg) => false;
            bool NetHandlePetHatched(MSG_PETHATCHED msg) => false;
            bool NetHandlePetLevelUp(MSG_PETLEVELUP msg) => false;
            bool NetHandlePetMorphCanAfford(MSG_PETMORPHCANAFFORD msg) => false;
            bool NetHandlePetMorphingSlot(MSG_PETMORPHINGSLOT msg) => false;
            bool NetHandlePetMorphReady(MSG_PETMORPHREADY msg) => false;
            bool NetHandlePetMorphSet(MSG_PETMORPHSET msg) => false;
            bool NetHandlePetSnackAdd(MSG_PETSNACKADD msg) => false;
            bool NetHandlePetSnackRemove(MSG_PETSNACKREMOVE msg) => false;
            bool NetHandlePetSnackRemoveRequest(MSG_PETSNACKREMOVEREQUEST msg) => false;
            bool NetHandlePetSnackUpdate(MSG_PETSNACKUPDATE msg) => false;
            bool NetHandlePetUpdateBehavior(MSG_PETUPDATEBEHAVIOR msg) => false;
        }
    }
    public class SCRIPT_10_Protocol: INetworkService
    {
        public const byte c_serviceID = 10;
        public byte GetID() => c_serviceID;
        
        public class MSG_ADD_BREAKPOINT : INetworkMessage
        {
            public const byte c_messageID = 1;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("File", DMLType.STR)] public ByteString m_file;
            [DMLField("Line", DMLType.UINT)] public uint m_line;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_ADD_BREAKPOINT>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_ADD_BREAKPOINT>.Read(buf, this);
            }
        }
        public class MSG_ADD_MESSAGE : INetworkMessage
        {
            public const byte c_messageID = 2;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("Message", DMLType.STR)] public ByteString m_message;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_ADD_MESSAGE>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_ADD_MESSAGE>.Read(buf, this);
            }
        }
        public class MSG_ADD_PROCESS : INetworkMessage
        {
            public const byte c_messageID = 3;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("PID", DMLType.UINT)] public uint m_pID;
            [DMLField("Root", DMLType.STR)] public ByteString m_root;
            [DMLField("Zone", DMLType.STR)] public ByteString m_zone;
            [DMLField("Name", DMLType.STR)] public ByteString m_name;
            [DMLField("Status", DMLType.STR)] public ByteString m_status;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_ADD_PROCESS>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_ADD_PROCESS>.Read(buf, this);
            }
        }
        public class MSG_ADD_WATCH : INetworkMessage
        {
            public const byte c_messageID = 4;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("Variable", DMLType.STR)] public ByteString m_variable;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_ADD_WATCH>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_ADD_WATCH>.Read(buf, this);
            }
        }
        public class MSG_ATTACH_PROCESS : INetworkMessage
        {
            public const byte c_messageID = 5;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("PID", DMLType.UINT)] public uint m_pID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_ATTACH_PROCESS>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_ATTACH_PROCESS>.Read(buf, this);
            }
        }
        public class MSG_BREAK_PROCESS : INetworkMessage
        {
            public const byte c_messageID = 6;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_BREAK_PROCESS>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_BREAK_PROCESS>.Read(buf, this);
            }
        }
        public class MSG_DEL_BREAKPOINT : INetworkMessage
        {
            public const byte c_messageID = 7;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("File", DMLType.STR)] public ByteString m_file;
            [DMLField("Line", DMLType.UINT)] public uint m_line;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_DEL_BREAKPOINT>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_DEL_BREAKPOINT>.Read(buf, this);
            }
        }
        public class MSG_DEL_WATCH : INetworkMessage
        {
            public const byte c_messageID = 8;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("Variable", DMLType.STR)] public ByteString m_variable;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_DEL_WATCH>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_DEL_WATCH>.Read(buf, this);
            }
        }
        public class MSG_DETACH_PROCESS : INetworkMessage
        {
            public const byte c_messageID = 9;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("PID", DMLType.UINT)] public uint m_pID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_DETACH_PROCESS>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_DETACH_PROCESS>.Read(buf, this);
            }
        }
        public class MSG_ENUM_PROCESS : INetworkMessage
        {
            public const byte c_messageID = 10;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_ENUM_PROCESS>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_ENUM_PROCESS>.Read(buf, this);
            }
        }
        public class MSG_KILL_PROCESS : INetworkMessage
        {
            public const byte c_messageID = 11;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("PID", DMLType.UINT)] public uint m_pID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_KILL_PROCESS>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_KILL_PROCESS>.Read(buf, this);
            }
        }
        public class MSG_PROCESS_STATE : INetworkMessage
        {
            public const byte c_messageID = 12;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("PID", DMLType.UINT)] public uint m_pID;
            [DMLField("State", DMLType.STR)] public ByteString m_state;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PROCESS_STATE>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PROCESS_STATE>.Read(buf, this);
            }
        }
        public class MSG_PROCESS_STATUS : INetworkMessage
        {
            public const byte c_messageID = 13;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("PID", DMLType.UINT)] public uint m_pID;
            [DMLField("Status", DMLType.STR)] public ByteString m_status;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PROCESS_STATUS>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PROCESS_STATUS>.Read(buf, this);
            }
        }
        public class MSG_REMOVE_PROCESS : INetworkMessage
        {
            public const byte c_messageID = 14;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("PID", DMLType.UINT)] public uint m_pID;
            [DMLField("Name", DMLType.STR)] public ByteString m_name;
            [DMLField("Status", DMLType.STR)] public ByteString m_status;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_REMOVE_PROCESS>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_REMOVE_PROCESS>.Read(buf, this);
            }
        }
        public class MSG_RUN_PROCESS : INetworkMessage
        {
            public const byte c_messageID = 15;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_RUN_PROCESS>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_RUN_PROCESS>.Read(buf, this);
            }
        }
        public class MSG_SEND_STATE : INetworkMessage
        {
            public const byte c_messageID = 16;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_SEND_STATE>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_SEND_STATE>.Read(buf, this);
            }
        }
        public class MSG_SET_VARIABLE : INetworkMessage
        {
            public const byte c_messageID = 17;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("Variable", DMLType.STR)] public ByteString m_variable;
            [DMLField("Value", DMLType.STR)] public ByteString m_value;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_SET_VARIABLE>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_SET_VARIABLE>.Read(buf, this);
            }
        }
        public class MSG_START_PROCESS : INetworkMessage
        {
            public const byte c_messageID = 18;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("DataRoot", DMLType.STR)] public ByteString m_dataRoot;
            [DMLField("Zone", DMLType.STR)] public ByteString m_zone;
            [DMLField("Script", DMLType.STR)] public ByteString m_script;
            [DMLField("StartAttached", DMLType.INT)] public int m_startAttached;
            [DMLField("StartRunning", DMLType.INT)] public int m_startRunning;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_START_PROCESS>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_START_PROCESS>.Read(buf, this);
            }
        }
        public class MSG_STEPOVER_PROCESS : INetworkMessage
        {
            public const byte c_messageID = 19;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_STEPOVER_PROCESS>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_STEPOVER_PROCESS>.Read(buf, this);
            }
        }
        public class MSG_STEP_PROCESS : INetworkMessage
        {
            public const byte c_messageID = 20;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_STEP_PROCESS>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_STEP_PROCESS>.Read(buf, this);
            }
        }
        
        public bool Dispatch(object handlerVoid, INetworkMessage message)
        {
            Debug.Assert(message.GetServiceID() == c_serviceID);
            var handler = (Handler)handlerVoid;
            
            switch (message.GetID())
            {
                case MSG_ADD_BREAKPOINT.c_messageID:
                    return handler.NetHandleADD_BREAKPOINT((MSG_ADD_BREAKPOINT)message);
                case MSG_ADD_MESSAGE.c_messageID:
                    return handler.NetHandleADD_MESSAGE((MSG_ADD_MESSAGE)message);
                case MSG_ADD_PROCESS.c_messageID:
                    return handler.NetHandleADD_PROCESS((MSG_ADD_PROCESS)message);
                case MSG_ADD_WATCH.c_messageID:
                    return handler.NetHandleADD_WATCH((MSG_ADD_WATCH)message);
                case MSG_ATTACH_PROCESS.c_messageID:
                    return handler.NetHandleATTACH_PROCESS((MSG_ATTACH_PROCESS)message);
                case MSG_BREAK_PROCESS.c_messageID:
                    return handler.NetHandleBREAK_PROCESS((MSG_BREAK_PROCESS)message);
                case MSG_DEL_BREAKPOINT.c_messageID:
                    return handler.NetHandleDEL_BREAKPOINT((MSG_DEL_BREAKPOINT)message);
                case MSG_DEL_WATCH.c_messageID:
                    return handler.NetHandleDEL_WATCH((MSG_DEL_WATCH)message);
                case MSG_DETACH_PROCESS.c_messageID:
                    return handler.NetHandleDETACH_PROCESS((MSG_DETACH_PROCESS)message);
                case MSG_ENUM_PROCESS.c_messageID:
                    return handler.NetHandleENUM_PROCESS((MSG_ENUM_PROCESS)message);
                case MSG_KILL_PROCESS.c_messageID:
                    return handler.NetHandleKILL_PROCESS((MSG_KILL_PROCESS)message);
                case MSG_PROCESS_STATE.c_messageID:
                    return handler.NetHandlePROCESS_STATE((MSG_PROCESS_STATE)message);
                case MSG_PROCESS_STATUS.c_messageID:
                    return handler.NetHandlePROCESS_STATUS((MSG_PROCESS_STATUS)message);
                case MSG_REMOVE_PROCESS.c_messageID:
                    return handler.NetHandleREMOVE_PROCESS((MSG_REMOVE_PROCESS)message);
                case MSG_RUN_PROCESS.c_messageID:
                    return handler.NetHandleRUN_PROCESS((MSG_RUN_PROCESS)message);
                case MSG_SEND_STATE.c_messageID:
                    return handler.NetHandleSEND_STATE((MSG_SEND_STATE)message);
                case MSG_SET_VARIABLE.c_messageID:
                    return handler.NetHandleSET_VARIABLE((MSG_SET_VARIABLE)message);
                case MSG_START_PROCESS.c_messageID:
                    return handler.NetHandleSTART_PROCESS((MSG_START_PROCESS)message);
                case MSG_STEPOVER_PROCESS.c_messageID:
                    return handler.NetHandleSTEPOVER_PROCESS((MSG_STEPOVER_PROCESS)message);
                case MSG_STEP_PROCESS.c_messageID:
                    return handler.NetHandleSTEP_PROCESS((MSG_STEP_PROCESS)message);
            }
            return false;
        }
        
        public INetworkMessage AllocateMessage(byte id)
        {
            switch (id)
            {
                case MSG_ADD_BREAKPOINT.c_messageID: return new MSG_ADD_BREAKPOINT();
                case MSG_ADD_MESSAGE.c_messageID: return new MSG_ADD_MESSAGE();
                case MSG_ADD_PROCESS.c_messageID: return new MSG_ADD_PROCESS();
                case MSG_ADD_WATCH.c_messageID: return new MSG_ADD_WATCH();
                case MSG_ATTACH_PROCESS.c_messageID: return new MSG_ATTACH_PROCESS();
                case MSG_BREAK_PROCESS.c_messageID: return new MSG_BREAK_PROCESS();
                case MSG_DEL_BREAKPOINT.c_messageID: return new MSG_DEL_BREAKPOINT();
                case MSG_DEL_WATCH.c_messageID: return new MSG_DEL_WATCH();
                case MSG_DETACH_PROCESS.c_messageID: return new MSG_DETACH_PROCESS();
                case MSG_ENUM_PROCESS.c_messageID: return new MSG_ENUM_PROCESS();
                case MSG_KILL_PROCESS.c_messageID: return new MSG_KILL_PROCESS();
                case MSG_PROCESS_STATE.c_messageID: return new MSG_PROCESS_STATE();
                case MSG_PROCESS_STATUS.c_messageID: return new MSG_PROCESS_STATUS();
                case MSG_REMOVE_PROCESS.c_messageID: return new MSG_REMOVE_PROCESS();
                case MSG_RUN_PROCESS.c_messageID: return new MSG_RUN_PROCESS();
                case MSG_SEND_STATE.c_messageID: return new MSG_SEND_STATE();
                case MSG_SET_VARIABLE.c_messageID: return new MSG_SET_VARIABLE();
                case MSG_START_PROCESS.c_messageID: return new MSG_START_PROCESS();
                case MSG_STEPOVER_PROCESS.c_messageID: return new MSG_STEPOVER_PROCESS();
                case MSG_STEP_PROCESS.c_messageID: return new MSG_STEP_PROCESS();
            }
            throw new ArgumentOutOfRangeException(nameof(id));
        }
        
        public interface Handler
        {
            bool NetHandleADD_BREAKPOINT(MSG_ADD_BREAKPOINT msg) => false;
            bool NetHandleADD_MESSAGE(MSG_ADD_MESSAGE msg) => false;
            bool NetHandleADD_PROCESS(MSG_ADD_PROCESS msg) => false;
            bool NetHandleADD_WATCH(MSG_ADD_WATCH msg) => false;
            bool NetHandleATTACH_PROCESS(MSG_ATTACH_PROCESS msg) => false;
            bool NetHandleBREAK_PROCESS(MSG_BREAK_PROCESS msg) => false;
            bool NetHandleDEL_BREAKPOINT(MSG_DEL_BREAKPOINT msg) => false;
            bool NetHandleDEL_WATCH(MSG_DEL_WATCH msg) => false;
            bool NetHandleDETACH_PROCESS(MSG_DETACH_PROCESS msg) => false;
            bool NetHandleENUM_PROCESS(MSG_ENUM_PROCESS msg) => false;
            bool NetHandleKILL_PROCESS(MSG_KILL_PROCESS msg) => false;
            bool NetHandlePROCESS_STATE(MSG_PROCESS_STATE msg) => false;
            bool NetHandlePROCESS_STATUS(MSG_PROCESS_STATUS msg) => false;
            bool NetHandleREMOVE_PROCESS(MSG_REMOVE_PROCESS msg) => false;
            bool NetHandleRUN_PROCESS(MSG_RUN_PROCESS msg) => false;
            bool NetHandleSEND_STATE(MSG_SEND_STATE msg) => false;
            bool NetHandleSET_VARIABLE(MSG_SET_VARIABLE msg) => false;
            bool NetHandleSTART_PROCESS(MSG_START_PROCESS msg) => false;
            bool NetHandleSTEPOVER_PROCESS(MSG_STEPOVER_PROCESS msg) => false;
            bool NetHandleSTEP_PROCESS(MSG_STEP_PROCESS msg) => false;
        }
    }
    public class TESTMANAGER_11_Protocol: INetworkService
    {
        public const byte c_serviceID = 11;
        public byte GetID() => c_serviceID;
        
        public class MSG_LOGIN : INetworkMessage
        {
            public const byte c_messageID = 1;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("Username", DMLType.STR)] public ByteString m_username;
            [DMLField("Password", DMLType.STR)] public ByteString m_password;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_LOGIN>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_LOGIN>.Read(buf, this);
            }
        }
        public class MSG_LOGINRESPONSE : INetworkMessage
        {
            public const byte c_messageID = 2;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("Success", DMLType.INT)] public int m_success;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_LOGINRESPONSE>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_LOGINRESPONSE>.Read(buf, this);
            }
        }
        
        public bool Dispatch(object handlerVoid, INetworkMessage message)
        {
            Debug.Assert(message.GetServiceID() == c_serviceID);
            var handler = (Handler)handlerVoid;
            
            switch (message.GetID())
            {
                case MSG_LOGIN.c_messageID:
                    return handler.NetHandleLogin((MSG_LOGIN)message);
                case MSG_LOGINRESPONSE.c_messageID:
                    return handler.NetHandleLoginResponse((MSG_LOGINRESPONSE)message);
            }
            return false;
        }
        
        public INetworkMessage AllocateMessage(byte id)
        {
            switch (id)
            {
                case MSG_LOGIN.c_messageID: return new MSG_LOGIN();
                case MSG_LOGINRESPONSE.c_messageID: return new MSG_LOGINRESPONSE();
            }
            throw new ArgumentOutOfRangeException(nameof(id));
        }
        
        public interface Handler
        {
            bool NetHandleLogin(MSG_LOGIN msg) => false;
            bool NetHandleLoginResponse(MSG_LOGINRESPONSE msg) => false;
        }
    }
    public class WIZARD_12_Protocol: INetworkService
    {
        public const byte c_serviceID = 12;
        public byte GetID() => c_serviceID;
        
        public class MSG_ACCEPTQUESTBOGUS : INetworkMessage
        {
            public const byte c_messageID = 1;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("MobileID", DMLType.GID)] public GID m_mobileID;
            [DMLField("QuestName", DMLType.STR)] public ByteString m_questName;
            [DMLField("QuestID", DMLType.GID)] public GID m_questID;
            [DMLField("GoalID", DMLType.GID)] public GID m_goalID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_ACCEPTQUESTBOGUS>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_ACCEPTQUESTBOGUS>.Read(buf, this);
            }
        }
        public class MSG_ACCESSPASSBUYCONFIRM : INetworkMessage
        {
            public const byte c_messageID = 2;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("Failure", DMLType.BYT)] public sbyte m_failure;
            [DMLField("WebFailure", DMLType.BYT)] public sbyte m_webFailure;
            [DMLField("Credits", DMLType.INT)] public int m_credits;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_ACCESSPASSBUYCONFIRM>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_ACCESSPASSBUYCONFIRM>.Read(buf, this);
            }
        }
        public class MSG_ACCESSPASSBUYREQUEST : INetworkMessage
        {
            public const byte c_messageID = 3;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("AccessPass", DMLType.STR)] public ByteString m_accessPass;
            [DMLField("TransactionID", DMLType.GID)] public GID m_transactionID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_ACCESSPASSBUYREQUEST>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_ACCESSPASSBUYREQUEST>.Read(buf, this);
            }
        }
        public class MSG_ACCESSPASSDECLINED : INetworkMessage
        {
            public const byte c_messageID = 4;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("TempQuestGID", DMLType.GID)] public GID m_tempQuestGID;
            [DMLField("PreReqComplete", DMLType.UINT)] public uint m_preReqComplete;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_ACCESSPASSDECLINED>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_ACCESSPASSDECLINED>.Read(buf, this);
            }
        }
        public class MSG_ACCESSPASSINFOREQUEST : INetworkMessage
        {
            public const byte c_messageID = 5;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("AccessPass", DMLType.STR)] public ByteString m_accessPass;
            [DMLField("TargetLoc", DMLType.STR)] public ByteString m_targetLoc;
            [DMLField("ZoneID", DMLType.GID)] public GID m_zoneID;
            [DMLField("ZoneName", DMLType.STR)] public ByteString m_zoneName;
            [DMLField("ClusterID", DMLType.GID)] public GID m_clusterID;
            [DMLField("ClusterName", DMLType.STR)] public ByteString m_clusterName;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_ACCESSPASSINFOREQUEST>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_ACCESSPASSINFOREQUEST>.Read(buf, this);
            }
        }
        public class MSG_ACCESSPASSOFFER : INetworkMessage
        {
            public const byte c_messageID = 6;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("Data", DMLType.STR)] public ByteString m_data;
            [DMLField("TransactionID", DMLType.GID)] public GID m_transactionID;
            [DMLField("TotalCrowns", DMLType.INT)] public int m_totalCrowns;
            [DMLField("WebFailure", DMLType.BYT)] public sbyte m_webFailure;
            [DMLField("Failure", DMLType.BYT)] public sbyte m_failure;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_ACCESSPASSOFFER>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_ACCESSPASSOFFER>.Read(buf, this);
            }
        }
        public class MSG_ACCESSPASSREJECTED : INetworkMessage
        {
            public const byte c_messageID = 7;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("AccessPass", DMLType.STR)] public ByteString m_accessPass;
            [DMLField("RequestedZoneDisplayName", DMLType.STR)] public ByteString m_requestedZoneDisplayName;
            [DMLField("PayToPlayStyle", DMLType.STR)] public ByteString m_payToPlayStyle;
            [DMLField("TargetLoc", DMLType.STR)] public ByteString m_targetLoc;
            [DMLField("ZoneID", DMLType.GID)] public GID m_zoneID;
            [DMLField("ZoneName", DMLType.STR)] public ByteString m_zoneName;
            [DMLField("ClusterID", DMLType.GID)] public GID m_clusterID;
            [DMLField("ClusterName", DMLType.STR)] public ByteString m_clusterName;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_ACCESSPASSREJECTED>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_ACCESSPASSREJECTED>.Read(buf, this);
            }
        }
        public class MSG_ACTORDIALOG : INetworkMessage
        {
            public const byte c_messageID = 8;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("MobileID", DMLType.GID)] public GID m_mobileID;
            [DMLField("QuestID", DMLType.GID)] public GID m_questID;
            [DMLField("GoalID", DMLType.GID)] public GID m_goalID;
            [DMLField("CompletionType", DMLType.STR)] public ByteString m_completionType;
            [DMLField("ActorDialog", DMLType.STR)] public ByteString m_actorDialog;
            [DMLField("Persona", DMLType.STR)] public ByteString m_persona;
            [DMLField("PersonaName", DMLType.STR)] public ByteString m_personaName;
            [DMLField("PersonaIcon", DMLType.STR)] public ByteString m_personaIcon;
            [DMLField("RangeCheck", DMLType.UBYT)] public byte m_rangeCheck;
            [DMLField("IsEncounter", DMLType.UBYT)] public byte m_isEncounter;
            [DMLField("DefaultDialogAnimation", DMLType.STR)] public ByteString m_defaultDialogAnimation;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_ACTORDIALOG>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_ACTORDIALOG>.Read(buf, this);
            }
        }
        public class MSG_ADDQUESTFINDER : INetworkMessage
        {
            public const byte c_messageID = 9;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("QuestID", DMLType.GID)] public GID m_questID;
            [DMLField("GoalID", DMLType.GID)] public GID m_goalID;
            [DMLField("NPCList", DMLType.STR)] public ByteString m_nPCList;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_ADDQUESTFINDER>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_ADDQUESTFINDER>.Read(buf, this);
            }
        }
        public class MSG_ADDSPELLTOBOOK : INetworkMessage
        {
            public const byte c_messageID = 10;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("SpellID", DMLType.INT)] public int m_spellID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_ADDSPELLTOBOOK>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_ADDSPELLTOBOOK>.Read(buf, this);
            }
        }
        public class MSG_ADDSPELLTODECK : INetworkMessage
        {
            public const byte c_messageID = 11;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("SpellID", DMLType.INT)] public int m_spellID;
            [DMLField("DeckID", DMLType.GID)] public GID m_deckID;
            [DMLField("Success", DMLType.UBYT)] public byte m_success;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_ADDSPELLTODECK>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_ADDSPELLTODECK>.Read(buf, this);
            }
        }
        public class MSG_ADDTREASURESPELLTOBOOK : INetworkMessage
        {
            public const byte c_messageID = 12;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("SpellID", DMLType.INT)] public int m_spellID;
            [DMLField("EnchantmentID", DMLType.INT)] public int m_enchantmentID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_ADDTREASURESPELLTOBOOK>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_ADDTREASURESPELLTOBOOK>.Read(buf, this);
            }
        }
        public class MSG_ADDTREASURESPELLTODECK : INetworkMessage
        {
            public const byte c_messageID = 13;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("SpellID", DMLType.INT)] public int m_spellID;
            [DMLField("EnchantmentID", DMLType.INT)] public int m_enchantmentID;
            [DMLField("DeckID", DMLType.GID)] public GID m_deckID;
            [DMLField("NewSpell", DMLType.UBYT)] public byte m_newSpell;
            [DMLField("Success", DMLType.UBYT)] public byte m_success;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_ADDTREASURESPELLTODECK>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_ADDTREASURESPELLTODECK>.Read(buf, this);
            }
        }
        public class MSG_AGGRO : INetworkMessage
        {
            public const byte c_messageID = 14;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("GlobalID", DMLType.GID)] public GID m_globalID;
            [DMLField("LocX", DMLType.FLT)] public float m_locX;
            [DMLField("LocY", DMLType.FLT)] public float m_locY;
            [DMLField("LocZ", DMLType.FLT)] public float m_locZ;
            [DMLField("Yaw", DMLType.FLT)] public float m_yaw;
            [DMLField("SigilGID", DMLType.GID)] public GID m_sigilGID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_AGGRO>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_AGGRO>.Read(buf, this);
            }
        }
        public class MSG_ALCHEMYSTATION : INetworkMessage
        {
            public const byte c_messageID = 15;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("AllowedRecipes", DMLType.STR)] public ByteString m_allowedRecipes;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_ALCHEMYSTATION>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_ALCHEMYSTATION>.Read(buf, this);
            }
        }
        public class MSG_ARENAERROR : INetworkMessage
        {
            public const byte c_messageID = 16;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("Error", DMLType.UINT)] public uint m_error;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_ARENAERROR>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_ARENAERROR>.Read(buf, this);
            }
        }
        public class MSG_AUCTIONHOUSECONTENTS : INetworkMessage
        {
            public const byte c_messageID = 17;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("GlobalID", DMLType.GID)] public GID m_globalID;
            [DMLField("Contents", DMLType.STR)] public ByteString m_contents;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_AUCTIONHOUSECONTENTS>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_AUCTIONHOUSECONTENTS>.Read(buf, this);
            }
        }
        public class MSG_AUCTIONHOUSEMOREACKNOWLEDGEMENT : INetworkMessage
        {
            public const byte c_messageID = 18;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("ItemTemplateID", DMLType.GID)] public GID m_itemTemplateID;
            [DMLField("IsSell", DMLType.BYT)] public sbyte m_isSell;
            [DMLField("TotalPrice", DMLType.INT)] public int m_totalPrice;
            [DMLField("QuantityPurchased", DMLType.INT)] public int m_quantityPurchased;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_AUCTIONHOUSEMOREACKNOWLEDGEMENT>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_AUCTIONHOUSEMOREACKNOWLEDGEMENT>.Read(buf, this);
            }
        }
        public class MSG_AUCTIONHOUSEREQUEST : INetworkMessage
        {
            public const byte c_messageID = 19;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("Command", DMLType.BYT)] public sbyte m_command;
            [DMLField("npcGlobalID", DMLType.GID)] public GID m_npcGlobalID;
            [DMLField("itemTemplateID", DMLType.GID)] public GID m_itemTemplateID;
            [DMLField("itemGlobalID", DMLType.GID)] public GID m_itemGlobalID;
            [DMLField("texture", DMLType.INT)] public int m_texture;
            [DMLField("decal", DMLType.INT)] public int m_decal;
            [DMLField("decal2", DMLType.INT)] public int m_decal2;
            [DMLField("petName", DMLType.UINT)] public uint m_petName;
            [DMLField("itemType", DMLType.BYT)] public sbyte m_itemType;
            [DMLField("category", DMLType.UINT)] public uint m_category;
            [DMLField("quantity", DMLType.UINT)] public uint m_quantity;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_AUCTIONHOUSEREQUEST>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_AUCTIONHOUSEREQUEST>.Read(buf, this);
            }
        }
        public class MSG_AUCTIONREQUESTBANK : INetworkMessage
        {
            public const byte c_messageID = 20;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_AUCTIONREQUESTBANK>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_AUCTIONREQUESTBANK>.Read(buf, this);
            }
        }
        public class MSG_AUCTIONRESPONSE : INetworkMessage
        {
            public const byte c_messageID = 21;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("Command", DMLType.BYT)] public sbyte m_command;
            [DMLField("ItemTemplateID", DMLType.GID)] public GID m_itemTemplateID;
            [DMLField("Cost", DMLType.INT)] public int m_cost;
            [DMLField("ReturnCode", DMLType.BYT)] public sbyte m_returnCode;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_AUCTIONRESPONSE>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_AUCTIONRESPONSE>.Read(buf, this);
            }
        }
        public class MSG_BANKDELETE : INetworkMessage
        {
            public const byte c_messageID = 22;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("GlobalID", DMLType.GID)] public GID m_globalID;
            [DMLField("UseShared", DMLType.BYT)] public sbyte m_useShared;
            [DMLField("FromInventory", DMLType.BYT)] public sbyte m_fromInventory;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_BANKDELETE>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_BANKDELETE>.Read(buf, this);
            }
        }
        public class MSG_BANKDELETECONFIRM : INetworkMessage
        {
            public const byte c_messageID = 23;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("Failure", DMLType.BYT)] public sbyte m_failure;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_BANKDELETECONFIRM>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_BANKDELETECONFIRM>.Read(buf, this);
            }
        }
        public class MSG_BANKTOINVCONFIRM : INetworkMessage
        {
            public const byte c_messageID = 24;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("Failure", DMLType.BYT)] public sbyte m_failure;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_BANKTOINVCONFIRM>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_BANKTOINVCONFIRM>.Read(buf, this);
            }
        }
        public class MSG_BOOSTERDISTRIBUTIONRESULTS : INetworkMessage
        {
            public const byte c_messageID = 25;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("LootList", DMLType.STR)] public ByteString m_lootList;
            [DMLField("Error", DMLType.STR)] public ByteString m_error;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_BOOSTERDISTRIBUTIONRESULTS>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_BOOSTERDISTRIBUTIONRESULTS>.Read(buf, this);
            }
        }
        public class MSG_BRACKETREPORT : INetworkMessage
        {
            public const byte c_messageID = 26;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("Report", DMLType.STR)] public ByteString m_report;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_BRACKETREPORT>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_BRACKETREPORT>.Read(buf, this);
            }
        }
        public class MSG_BUYENERGYCONFIRM : INetworkMessage
        {
            public const byte c_messageID = 27;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("Failure", DMLType.BYT)] public sbyte m_failure;
            [DMLField("WebFailure", DMLType.BYT)] public sbyte m_webFailure;
            [DMLField("Credits", DMLType.INT)] public int m_credits;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_BUYENERGYCONFIRM>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_BUYENERGYCONFIRM>.Read(buf, this);
            }
        }
        public class MSG_CHATFILTERBLACK : INetworkMessage
        {
            public const byte c_messageID = 28;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("GlobalID", DMLType.GID)] public GID m_globalID;
            [DMLField("Blacklist", DMLType.STR)] public ByteString m_blacklist;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_CHATFILTERBLACK>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_CHATFILTERBLACK>.Read(buf, this);
            }
        }
        public class MSG_CHATFILTERWHITE : INetworkMessage
        {
            public const byte c_messageID = 29;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("GlobalID", DMLType.GID)] public GID m_globalID;
            [DMLField("Whitelist", DMLType.STR)] public ByteString m_whitelist;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_CHATFILTERWHITE>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_CHATFILTERWHITE>.Read(buf, this);
            }
        }
        public class MSG_CHOOSEFOCUS : INetworkMessage
        {
            public const byte c_messageID = 30;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("MobileID", DMLType.GID)] public GID m_mobileID;
            [DMLField("SchoolNameID", DMLType.INT)] public int m_schoolNameID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_CHOOSEFOCUS>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_CHOOSEFOCUS>.Read(buf, this);
            }
        }
        public class MSG_CLEARALLCRAFTINGSLOTS : INetworkMessage
        {
            public const byte c_messageID = 31;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("GlobalID", DMLType.GID)] public GID m_globalID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_CLEARALLCRAFTINGSLOTS>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_CLEARALLCRAFTINGSLOTS>.Read(buf, this);
            }
        }
        public class MSG_CLEAR_EQUIPPED_DECK : INetworkMessage
        {
            public const byte c_messageID = 32;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_CLEAR_EQUIPPED_DECK>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_CLEAR_EQUIPPED_DECK>.Read(buf, this);
            }
        }
        public class MSG_COMPLETEDIALOG : INetworkMessage
        {
            public const byte c_messageID = 33;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("MobileID", DMLType.GID)] public GID m_mobileID;
            [DMLField("CompletionType", DMLType.STR)] public ByteString m_completionType;
            [DMLField("EntryEvent", DMLType.STR)] public ByteString m_entryEvent;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_COMPLETEDIALOG>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_COMPLETEDIALOG>.Read(buf, this);
            }
        }
        public class MSG_CONTROLMUSIC : INetworkMessage
        {
            public const byte c_messageID = 34;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("Action", DMLType.INT)] public int m_action;
            [DMLField("FadeTime", DMLType.FLT)] public float m_fadeTime;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_CONTROLMUSIC>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_CONTROLMUSIC>.Read(buf, this);
            }
        }
        public class MSG_CRAFTINGSLOTADD : INetworkMessage
        {
            public const byte c_messageID = 35;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("GlobalID", DMLType.GID)] public GID m_globalID;
            [DMLField("Data", DMLType.STR)] public ByteString m_data;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_CRAFTINGSLOTADD>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_CRAFTINGSLOTADD>.Read(buf, this);
            }
        }
        public class MSG_CRAFTINGSLOTCOUNT : INetworkMessage
        {
            public const byte c_messageID = 36;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("GlobalID", DMLType.GID)] public GID m_globalID;
            [DMLField("BonusSlots", DMLType.INT)] public int m_bonusSlots;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_CRAFTINGSLOTCOUNT>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_CRAFTINGSLOTCOUNT>.Read(buf, this);
            }
        }
        public class MSG_CRAFTINGSLOTREMOVE : INetworkMessage
        {
            public const byte c_messageID = 37;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("GlobalID", DMLType.GID)] public GID m_globalID;
            [DMLField("ItemID", DMLType.GID)] public GID m_itemID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_CRAFTINGSLOTREMOVE>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_CRAFTINGSLOTREMOVE>.Read(buf, this);
            }
        }
        public class MSG_CREATEBOOSTERDISTRIBUTION : INetworkMessage
        {
            public const byte c_messageID = 38;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("BoosterTemplateID", DMLType.UINT)] public uint m_boosterTemplateID;
            [DMLField("LootTableName", DMLType.STR)] public ByteString m_lootTableName;
            [DMLField("PlayerLevel", DMLType.UINT)] public uint m_playerLevel;
            [DMLField("PlayerSchool", DMLType.STR)] public ByteString m_playerSchool;
            [DMLField("PlayerGender", DMLType.STR)] public ByteString m_playerGender;
            [DMLField("Samples", DMLType.UINT)] public uint m_samples;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_CREATEBOOSTERDISTRIBUTION>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_CREATEBOOSTERDISTRIBUTION>.Read(buf, this);
            }
        }
        public class MSG_CROWNBALANCE : INetworkMessage
        {
            public const byte c_messageID = 39;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("Failure", DMLType.UBYT)] public byte m_failure;
            [DMLField("TotalCrowns", DMLType.INT)] public int m_totalCrowns;
            [DMLField("CharacterID", DMLType.GID)] public GID m_characterID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_CROWNBALANCE>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_CROWNBALANCE>.Read(buf, this);
            }
        }
        public class MSG_CROWNSBUYCONFIRM : INetworkMessage
        {
            public const byte c_messageID = 40;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("Failure", DMLType.BYT)] public sbyte m_failure;
            [DMLField("WebFailure", DMLType.BYT)] public sbyte m_webFailure;
            [DMLField("Credits", DMLType.INT)] public int m_credits;
            [DMLField("Data", DMLType.STR)] public ByteString m_data;
            [DMLField("TemplateID", DMLType.GID)] public GID m_templateID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_CROWNSBUYCONFIRM>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_CROWNSBUYCONFIRM>.Read(buf, this);
            }
        }
        public class MSG_CROWNSBUYREQUEST : INetworkMessage
        {
            public const byte c_messageID = 41;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("npcGlobalID", DMLType.GID)] public GID m_npcGlobalID;
            [DMLField("AmountEnum", DMLType.INT)] public int m_amountEnum;
            [DMLField("ItemIndex", DMLType.INT)] public int m_itemIndex;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_CROWNSBUYREQUEST>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_CROWNSBUYREQUEST>.Read(buf, this);
            }
        }
        public class MSG_CROWNSERVICESOPEN : INetworkMessage
        {
            public const byte c_messageID = 42;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("GlobalID", DMLType.GID)] public GID m_globalID;
            [DMLField("ShopTitle", DMLType.STR)] public ByteString m_shopTitle;
            [DMLField("Credits", DMLType.INT)] public int m_credits;
            [DMLField("WebFailure", DMLType.BYT)] public sbyte m_webFailure;
            [DMLField("Data", DMLType.STR)] public ByteString m_data;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_CROWNSERVICESOPEN>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_CROWNSERVICESOPEN>.Read(buf, this);
            }
        }
        public class MSG_CSRCROWNBALANCE : INetworkMessage
        {
            public const byte c_messageID = 43;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("Success", DMLType.UBYT)] public byte m_success;
            [DMLField("Balance", DMLType.INT)] public int m_balance;
            [DMLField("CharacterID", DMLType.GID)] public GID m_characterID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_CSRCROWNBALANCE>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_CSRCROWNBALANCE>.Read(buf, this);
            }
        }
        public class MSG_CSR_REQUEST_BLOBS : INetworkMessage
        {
            public const byte c_messageID = 44;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("ContainerGID", DMLType.GID)] public GID m_containerGID;
            [DMLField("Data", DMLType.STR)] public ByteString m_data;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_CSR_REQUEST_BLOBS>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_CSR_REQUEST_BLOBS>.Read(buf, this);
            }
        }
        public class MSG_DISMISSTUTORIALTIP : INetworkMessage
        {
            public const byte c_messageID = 45;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("TipID", DMLType.STR)] public ByteString m_tipID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_DISMISSTUTORIALTIP>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_DISMISSTUTORIALTIP>.Read(buf, this);
            }
        }
        public class MSG_DONESHOPPING : INetworkMessage
        {
            public const byte c_messageID = 46;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("TransactionID", DMLType.GID)] public GID m_transactionID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_DONESHOPPING>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_DONESHOPPING>.Read(buf, this);
            }
        }
        public class MSG_DUELSIMRESULT : INetworkMessage
        {
            public const byte c_messageID = 47;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("DuelID", DMLType.GID)] public GID m_duelID;
            [DMLField("WinningTeamID", DMLType.INT)] public int m_winningTeamID;
            [DMLField("Confidence", DMLType.FLT)] public float m_confidence;
            [DMLField("Sims", DMLType.UINT)] public uint m_sims;
            [DMLField("Results", DMLType.UINT)] public uint m_results;
            [DMLField("Time", DMLType.UINT)] public uint m_time;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_DUELSIMRESULT>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_DUELSIMRESULT>.Read(buf, this);
            }
        }
        public class MSG_DYECONFIRM : INetworkMessage
        {
            public const byte c_messageID = 48;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("Failure", DMLType.BYT)] public sbyte m_failure;
            [DMLField("itemGID", DMLType.GID)] public GID m_itemGID;
            [DMLField("firstLayer", DMLType.INT)] public int m_firstLayer;
            [DMLField("secondLayer", DMLType.INT)] public int m_secondLayer;
            [DMLField("thirdLayer", DMLType.INT)] public int m_thirdLayer;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_DYECONFIRM>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_DYECONFIRM>.Read(buf, this);
            }
        }
        public class MSG_DYEREQUEST : INetworkMessage
        {
            public const byte c_messageID = 49;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("itemGlobalID", DMLType.GID)] public GID m_itemGlobalID;
            [DMLField("texture", DMLType.INT)] public int m_texture;
            [DMLField("decal", DMLType.INT)] public int m_decal;
            [DMLField("decal2", DMLType.INT)] public int m_decal2;
            [DMLField("npcGlobalID", DMLType.GID)] public GID m_npcGlobalID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_DYEREQUEST>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_DYEREQUEST>.Read(buf, this);
            }
        }
        public class MSG_DYESHOPOPEN : INetworkMessage
        {
            public const byte c_messageID = 50;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("GlobalID", DMLType.GID)] public GID m_globalID;
            [DMLField("Title", DMLType.STR)] public ByteString m_title;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_DYESHOPOPEN>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_DYESHOPOPEN>.Read(buf, this);
            }
        }
        public class MSG_ELIXIRSTATECHANGE : INetworkMessage
        {
            public const byte c_messageID = 51;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("parentID", DMLType.GID)] public GID m_parentID;
            [DMLField("EffectEnabled", DMLType.BYT)] public sbyte m_effectEnabled;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_ELIXIRSTATECHANGE>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_ELIXIRSTATECHANGE>.Read(buf, this);
            }
        }
        public class MSG_ENCOUNTERDIALOG : INetworkMessage
        {
            public const byte c_messageID = 52;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("MobileID", DMLType.GID)] public GID m_mobileID;
            [DMLField("QuestID", DMLType.GID)] public GID m_questID;
            [DMLField("GoalID", DMLType.GID)] public GID m_goalID;
            [DMLField("CompletionType", DMLType.STR)] public ByteString m_completionType;
            [DMLField("ActorDialog", DMLType.STR)] public ByteString m_actorDialog;
            [DMLField("Persona", DMLType.STR)] public ByteString m_persona;
            [DMLField("PersonaName", DMLType.STR)] public ByteString m_personaName;
            [DMLField("PersonaIcon", DMLType.STR)] public ByteString m_personaIcon;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_ENCOUNTERDIALOG>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_ENCOUNTERDIALOG>.Read(buf, this);
            }
        }
        public class MSG_ENERGYBUYREQUEST : INetworkMessage
        {
            public const byte c_messageID = 53;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("GlobalID", DMLType.GID)] public GID m_globalID;
            [DMLField("WebFailure", DMLType.BYT)] public sbyte m_webFailure;
            [DMLField("Credits", DMLType.INT)] public int m_credits;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_ENERGYBUYREQUEST>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_ENERGYBUYREQUEST>.Read(buf, this);
            }
        }
        public class MSG_ENERGYSHOPOPEN : INetworkMessage
        {
            public const byte c_messageID = 54;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("GlobalID", DMLType.GID)] public GID m_globalID;
            [DMLField("WebFailure", DMLType.BYT)] public sbyte m_webFailure;
            [DMLField("Credits", DMLType.INT)] public int m_credits;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_ENERGYSHOPOPEN>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_ENERGYSHOPOPEN>.Read(buf, this);
            }
        }
        public class MSG_ENTERMINIGAME : INetworkMessage
        {
            public const byte c_messageID = 55;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("GlobalID", DMLType.GID)] public GID m_globalID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_ENTERMINIGAME>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_ENTERMINIGAME>.Read(buf, this);
            }
        }
        public class MSG_EXITCONFIRMTELEPORT : INetworkMessage
        {
            public const byte c_messageID = 56;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("ZoneCRC", DMLType.UINT)] public uint m_zoneCRC;
            [DMLField("PromptKey", DMLType.STR)] public ByteString m_promptKey;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_EXITCONFIRMTELEPORT>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_EXITCONFIRMTELEPORT>.Read(buf, this);
            }
        }
        public class MSG_EXPANDPVPSEARCH : INetworkMessage
        {
            public const byte c_messageID = 57;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("ExpandTeammateSearch", DMLType.UBYT)] public byte m_expandTeammateSearch;
            [DMLField("ExpandMatchSearch", DMLType.UBYT)] public byte m_expandMatchSearch;
            [DMLField("TournamentNameID", DMLType.UINT)] public uint m_tournamentNameID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_EXPANDPVPSEARCH>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_EXPANDPVPSEARCH>.Read(buf, this);
            }
        }
        public class MSG_FREETOURNEYCREDITINFO : INetworkMessage
        {
            public const byte c_messageID = 58;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("HasFreeCredit", DMLType.UINT)] public uint m_hasFreeCredit;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_FREETOURNEYCREDITINFO>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_FREETOURNEYCREDITINFO>.Read(buf, this);
            }
        }
        public class MSG_GETSNACKLIST : INetworkMessage
        {
            public const byte c_messageID = 59;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("InvisibleToFriends", DMLType.UBYT)] public byte m_invisibleToFriends;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_GETSNACKLIST>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_GETSNACKLIST>.Read(buf, this);
            }
        }
        public class MSG_GETSUBSCRIBERONLYITEMS : INetworkMessage
        {
            public const byte c_messageID = 60;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_GETSUBSCRIBERONLYITEMS>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_GETSUBSCRIBERONLYITEMS>.Read(buf, this);
            }
        }
        public class MSG_GETTIMEDACCESSPASSES : INetworkMessage
        {
            public const byte c_messageID = 61;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_GETTIMEDACCESSPASSES>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_GETTIMEDACCESSPASSES>.Read(buf, this);
            }
        }
        public class MSG_GOHOME : INetworkMessage
        {
            public const byte c_messageID = 62;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_GOHOME>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_GOHOME>.Read(buf, this);
            }
        }
        public class MSG_GOTODORM : INetworkMessage
        {
            public const byte c_messageID = 63;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_GOTODORM>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_GOTODORM>.Read(buf, this);
            }
        }
        public class MSG_INTERACTAVAILABLEQUEST : INetworkMessage
        {
            public const byte c_messageID = 64;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("MobileID", DMLType.GID)] public GID m_mobileID;
            [DMLField("QuestName", DMLType.STR)] public ByteString m_questName;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_INTERACTAVAILABLEQUEST>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_INTERACTAVAILABLEQUEST>.Read(buf, this);
            }
        }
        public class MSG_INTERACTCOMPLETEGOAL : INetworkMessage
        {
            public const byte c_messageID = 65;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("MobileID", DMLType.GID)] public GID m_mobileID;
            [DMLField("QuestID", DMLType.GID)] public GID m_questID;
            [DMLField("GoalID", DMLType.GID)] public GID m_goalID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_INTERACTCOMPLETEGOAL>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_INTERACTCOMPLETEGOAL>.Read(buf, this);
            }
        }
        public class MSG_INTERACTUNDERWAYQUEST : INetworkMessage
        {
            public const byte c_messageID = 66;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("MobileID", DMLType.GID)] public GID m_mobileID;
            [DMLField("QuestID", DMLType.GID)] public GID m_questID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_INTERACTUNDERWAYQUEST>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_INTERACTUNDERWAYQUEST>.Read(buf, this);
            }
        }
        public class MSG_INVTOBANKCONFIRM : INetworkMessage
        {
            public const byte c_messageID = 67;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("Failure", DMLType.BYT)] public sbyte m_failure;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_INVTOBANKCONFIRM>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_INVTOBANKCONFIRM>.Read(buf, this);
            }
        }
        public class MSG_ITEMDROP : INetworkMessage
        {
            public const byte c_messageID = 68;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("TemplateID", DMLType.GID)] public GID m_templateID;
            [DMLField("ErrorID", DMLType.UINT)] public uint m_errorID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_ITEMDROP>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_ITEMDROP>.Read(buf, this);
            }
        }
        public class MSG_ITEMLOCK : INetworkMessage
        {
            public const byte c_messageID = 69;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("ItemLock", DMLType.UBYT)] public byte m_itemLock;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_ITEMLOCK>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_ITEMLOCK>.Read(buf, this);
            }
        }
        public class MSG_ITEMOVERFLOWTOBANK : INetworkMessage
        {
            public const byte c_messageID = 70;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("ItemID", DMLType.GID)] public GID m_itemID;
            [DMLField("CountInBank", DMLType.INT)] public int m_countInBank;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_ITEMOVERFLOWTOBANK>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_ITEMOVERFLOWTOBANK>.Read(buf, this);
            }
        }
        public class MSG_LEADERBOARDFRIENDREQUEST : INetworkMessage
        {
            public const byte c_messageID = 71;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("LeaderboardType", DMLType.UINT)] public uint m_leaderboardType;
            [DMLField("Page", DMLType.BYT)] public sbyte m_page;
            [DMLField("SortType", DMLType.UINT)] public uint m_sortType;
            [DMLField("Contents", DMLType.STR)] public ByteString m_contents;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_LEADERBOARDFRIENDREQUEST>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_LEADERBOARDFRIENDREQUEST>.Read(buf, this);
            }
        }
        public class MSG_LEADERBOARDREQUEST : INetworkMessage
        {
            public const byte c_messageID = 72;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("LeaderboardType", DMLType.UINT)] public uint m_leaderboardType;
            [DMLField("Page", DMLType.BYT)] public sbyte m_page;
            [DMLField("SortType", DMLType.UINT)] public uint m_sortType;
            [DMLField("ShowMe", DMLType.UBYT)] public byte m_showMe;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_LEADERBOARDREQUEST>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_LEADERBOARDREQUEST>.Read(buf, this);
            }
        }
        public class MSG_LEADERBOARDRESPONSE : INetworkMessage
        {
            public const byte c_messageID = 73;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("Contents", DMLType.STR)] public ByteString m_contents;
            [DMLField("TotalEntries", DMLType.UINT)] public uint m_totalEntries;
            [DMLField("CurrentPage", DMLType.UINT)] public uint m_currentPage;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_LEADERBOARDRESPONSE>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_LEADERBOARDRESPONSE>.Read(buf, this);
            }
        }
        public class MSG_LEASH : INetworkMessage
        {
            public const byte c_messageID = 74;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("GlobalID", DMLType.GID)] public GID m_globalID;
            [DMLField("OwnerID", DMLType.GID)] public GID m_ownerID;
            [DMLField("Leashed", DMLType.UBYT)] public byte m_leashed;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_LEASH>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_LEASH>.Read(buf, this);
            }
        }
        public class MSG_LEASHOFFSET : INetworkMessage
        {
            public const byte c_messageID = 75;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("GlobalID", DMLType.GID)] public GID m_globalID;
            [DMLField("Radius", DMLType.FLT)] public float m_radius;
            [DMLField("Angle", DMLType.FLT)] public float m_angle;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_LEASHOFFSET>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_LEASHOFFSET>.Read(buf, this);
            }
        }
        public class MSG_LEAVEMINIGAME : INetworkMessage
        {
            public const byte c_messageID = 76;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("GlobalID", DMLType.GID)] public GID m_globalID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_LEAVEMINIGAME>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_LEAVEMINIGAME>.Read(buf, this);
            }
        }
        public class MSG_LEAVESIGILTIMERWAITING : INetworkMessage
        {
            public const byte c_messageID = 77;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("GlobalID", DMLType.GID)] public GID m_globalID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_LEAVESIGILTIMERWAITING>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_LEAVESIGILTIMERWAITING>.Read(buf, this);
            }
        }
        public class MSG_LEVELUP : INetworkMessage
        {
            public const byte c_messageID = 78;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("GlobalID", DMLType.GID)] public GID m_globalID;
            [DMLField("Data", DMLType.STR)] public ByteString m_data;
            [DMLField("NewLevel", DMLType.INT)] public int m_newLevel;
            [DMLField("XP", DMLType.INT)] public int m_xP;
            [DMLField("TrainingPoints", DMLType.INT)] public int m_trainingPoints;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_LEVELUP>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_LEVELUP>.Read(buf, this);
            }
        }
        public class MSG_LOGCLIENTRESOLUTION : INetworkMessage
        {
            public const byte c_messageID = 79;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("ScreenWidth", DMLType.UINT)] public uint m_screenWidth;
            [DMLField("ScreenHeight", DMLType.UINT)] public uint m_screenHeight;
            [DMLField("FullScreen", DMLType.UBYT)] public byte m_fullScreen;
            [DMLField("ClassicMode", DMLType.UBYT)] public byte m_classicMode;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_LOGCLIENTRESOLUTION>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_LOGCLIENTRESOLUTION>.Read(buf, this);
            }
        }
        public class MSG_LOGOFFER : INetworkMessage
        {
            public const byte c_messageID = 80;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("OfferType", DMLType.INT)] public int m_offerType;
            [DMLField("Description", DMLType.STR)] public ByteString m_description;
            [DMLField("Cost", DMLType.INT)] public int m_cost;
            [DMLField("TotalCurrency", DMLType.INT)] public int m_totalCurrency;
            [DMLField("Action", DMLType.INT)] public int m_action;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_LOGOFFER>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_LOGOFFER>.Read(buf, this);
            }
        }
        public class MSG_LOOT : INetworkMessage
        {
            public const byte c_messageID = 81;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("GlobalID", DMLType.GID)] public GID m_globalID;
            [DMLField("LootList", DMLType.STR)] public ByteString m_lootList;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_LOOT>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_LOOT>.Read(buf, this);
            }
        }
        public class MSG_MINIGAMEKIOSK : INetworkMessage
        {
            public const byte c_messageID = 82;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("GlobalID", DMLType.GID)] public GID m_globalID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_MINIGAMEKIOSK>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_MINIGAMEKIOSK>.Read(buf, this);
            }
        }
        public class MSG_MINIGAMEREWARDS : INetworkMessage
        {
            public const byte c_messageID = 83;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("GlobalID", DMLType.GID)] public GID m_globalID;
            [DMLField("Data", DMLType.STR)] public ByteString m_data;
            [DMLField("Scores", DMLType.STR)] public ByteString m_scores;
            [DMLField("MinigameIndex", DMLType.INT)] public int m_minigameIndex;
            [DMLField("FinalPhase", DMLType.INT)] public int m_finalPhase;
            [DMLField("Score", DMLType.INT)] public int m_score;
            [DMLField("Success", DMLType.INT)] public int m_success;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_MINIGAMEREWARDS>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_MINIGAMEREWARDS>.Read(buf, this);
            }
        }
        public class MSG_MINIGAMESELECT : INetworkMessage
        {
            public const byte c_messageID = 84;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("Index", DMLType.INT)] public int m_index;
            [DMLField("npcGlobalID", DMLType.GID)] public GID m_npcGlobalID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_MINIGAMESELECT>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_MINIGAMESELECT>.Read(buf, this);
            }
        }
        public class MSG_MINIGAMETIMEREND : INetworkMessage
        {
            public const byte c_messageID = 85;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("SigilGID", DMLType.GID)] public GID m_sigilGID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_MINIGAMETIMEREND>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_MINIGAMETIMEREND>.Read(buf, this);
            }
        }
        public class MSG_MINIGAMETIMERSTART : INetworkMessage
        {
            public const byte c_messageID = 86;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("Time", DMLType.FLT)] public float m_time;
            [DMLField("SigilGID", DMLType.GID)] public GID m_sigilGID;
            [DMLField("Teleport", DMLType.BYT)] public sbyte m_teleport;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_MINIGAMETIMERSTART>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_MINIGAMETIMERSTART>.Read(buf, this);
            }
        }
        public class MSG_MOVEBANKTOBANK : INetworkMessage
        {
            public const byte c_messageID = 87;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("BankID", DMLType.GID)] public GID m_bankID;
            [DMLField("BankSharedID", DMLType.GID)] public GID m_bankSharedID;
            [DMLField("Error", DMLType.UINT)] public uint m_error;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_MOVEBANKTOBANK>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_MOVEBANKTOBANK>.Read(buf, this);
            }
        }
        public class MSG_MOVEBANKTOINV : INetworkMessage
        {
            public const byte c_messageID = 88;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("GlobalID", DMLType.GID)] public GID m_globalID;
            [DMLField("UseShared", DMLType.BYT)] public sbyte m_useShared;
            [DMLField("Quantity", DMLType.INT)] public int m_quantity;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_MOVEBANKTOINV>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_MOVEBANKTOINV>.Read(buf, this);
            }
        }
        public class MSG_MOVEINVTOBANK : INetworkMessage
        {
            public const byte c_messageID = 89;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("GlobalID", DMLType.GID)] public GID m_globalID;
            [DMLField("UseShared", DMLType.BYT)] public sbyte m_useShared;
            [DMLField("Quantity", DMLType.INT)] public int m_quantity;
            [DMLField("debug", DMLType.INT)] public int m_debug;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_MOVEINVTOBANK>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_MOVEINVTOBANK>.Read(buf, this);
            }
        }
        public class MSG_NEWTITLE : INetworkMessage
        {
            public const byte c_messageID = 90;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("GlobalID", DMLType.GID)] public GID m_globalID;
            [DMLField("PvPIconID", DMLType.UINT)] public uint m_pvPIconID;
            [DMLField("Title", DMLType.STR)] public ByteString m_title;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_NEWTITLE>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_NEWTITLE>.Read(buf, this);
            }
        }
        public class MSG_NOTIFYSCHOOLFOCUS : INetworkMessage
        {
            public const byte c_messageID = 91;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("MobileID", DMLType.GID)] public GID m_mobileID;
            [DMLField("SchoolID", DMLType.INT)] public int m_schoolID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_NOTIFYSCHOOLFOCUS>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_NOTIFYSCHOOLFOCUS>.Read(buf, this);
            }
        }
        public class MSG_OPENBANK : INetworkMessage
        {
            public const byte c_messageID = 92;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("GlobalID", DMLType.GID)] public GID m_globalID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_OPENBANK>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_OPENBANK>.Read(buf, this);
            }
        }
        public class MSG_PAID_LOOT_CROWNS_BALANCE : INetworkMessage
        {
            public const byte c_messageID = 93;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("Balance", DMLType.INT)] public int m_balance;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PAID_LOOT_CROWNS_BALANCE>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PAID_LOOT_CROWNS_BALANCE>.Read(buf, this);
            }
        }
        public class MSG_PAID_LOOT_ROLL_ERROR : INetworkMessage
        {
            public const byte c_messageID = 94;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PAID_LOOT_ROLL_ERROR>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PAID_LOOT_ROLL_ERROR>.Read(buf, this);
            }
        }
        public class MSG_PAID_LOOT_ROLL_PROMPT : INetworkMessage
        {
            public const byte c_messageID = 95;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("Id", DMLType.GID)] public GID m_id;
            [DMLField("Cost", DMLType.INT)] public int m_cost;
            [DMLField("Uses", DMLType.INT)] public int m_uses;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PAID_LOOT_ROLL_PROMPT>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PAID_LOOT_ROLL_PROMPT>.Read(buf, this);
            }
        }
        public class MSG_PAID_LOOT_ROLL_RESPONSE : INetworkMessage
        {
            public const byte c_messageID = 96;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("Id", DMLType.GID)] public GID m_id;
            [DMLField("Response", DMLType.INT)] public int m_response;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PAID_LOOT_ROLL_RESPONSE>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PAID_LOOT_ROLL_RESPONSE>.Read(buf, this);
            }
        }
        public class MSG_PAID_LOOT_ROLL_RESULT : INetworkMessage
        {
            public const byte c_messageID = 97;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("Id", DMLType.GID)] public GID m_id;
            [DMLField("Cost", DMLType.INT)] public int m_cost;
            [DMLField("Balance", DMLType.INT)] public int m_balance;
            [DMLField("Uses", DMLType.INT)] public int m_uses;
            [DMLField("Loot", DMLType.STR)] public ByteString m_loot;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PAID_LOOT_ROLL_RESULT>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PAID_LOOT_ROLL_RESULT>.Read(buf, this);
            }
        }
        public class MSG_PATCHINGBLOCKED : INetworkMessage
        {
            public const byte c_messageID = 98;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("PackageName", DMLType.STR)] public ByteString m_packageName;
            [DMLField("ZoneName", DMLType.STR)] public ByteString m_zoneName;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PATCHINGBLOCKED>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PATCHINGBLOCKED>.Read(buf, this);
            }
        }
        public class MSG_PCS_LIST_REQUEST : INetworkMessage
        {
            public const byte c_messageID = 99;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("Data", DMLType.STR)] public ByteString m_data;
            [DMLField("UpdateID", DMLType.UINT)] public uint m_updateID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PCS_LIST_REQUEST>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PCS_LIST_REQUEST>.Read(buf, this);
            }
        }
        public class MSG_PCS_LIST_RESPONSE : INetworkMessage
        {
            public const byte c_messageID = 100;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("Data", DMLType.STR)] public ByteString m_data;
            [DMLField("Updates", DMLType.STR)] public ByteString m_updates;
            [DMLField("UpdateID", DMLType.UINT)] public uint m_updateID;
            [DMLField("Error", DMLType.INT)] public int m_error;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PCS_LIST_RESPONSE>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PCS_LIST_RESPONSE>.Read(buf, this);
            }
        }
        public class MSG_PCS_PATCH : INetworkMessage
        {
            public const byte c_messageID = 101;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("Updates", DMLType.STR)] public ByteString m_updates;
            [DMLField("UpdateID", DMLType.UINT)] public uint m_updateID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PCS_PATCH>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PCS_PATCH>.Read(buf, this);
            }
        }
        public class MSG_PCS_PRICE_LOCK_REQUEST : INetworkMessage
        {
            public const byte c_messageID = 102;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("Item", DMLType.GID)] public GID m_item;
            [DMLField("ItemFlags", DMLType.INT)] public int m_itemFlags;
            [DMLField("SaleID", DMLType.UINT)] public uint m_saleID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PCS_PRICE_LOCK_REQUEST>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PCS_PRICE_LOCK_REQUEST>.Read(buf, this);
            }
        }
        public class MSG_PCS_PRICE_LOCK_RESPONSE : INetworkMessage
        {
            public const byte c_messageID = 103;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("Item", DMLType.GID)] public GID m_item;
            [DMLField("CostGold", DMLType.INT)] public int m_costGold;
            [DMLField("CostCrowns", DMLType.INT)] public int m_costCrowns;
            [DMLField("CostTickets", DMLType.INT)] public int m_costTickets;
            [DMLField("Error", DMLType.INT)] public int m_error;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PCS_PRICE_LOCK_RESPONSE>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PCS_PRICE_LOCK_RESPONSE>.Read(buf, this);
            }
        }
        public class MSG_PCS_PURCHASE_REQUEST : INetworkMessage
        {
            public const byte c_messageID = 104;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("Item", DMLType.GID)] public GID m_item;
            [DMLField("Recipient", DMLType.GID)] public GID m_recipient;
            [DMLField("RecipientName", DMLType.STR)] public ByteString m_recipientName;
            [DMLField("Type", DMLType.INT)] public int m_type;
            [DMLField("Cost", DMLType.INT)] public int m_cost;
            [DMLField("Count", DMLType.INT)] public int m_count;
            [DMLField("Texture", DMLType.INT)] public int m_texture;
            [DMLField("Decal", DMLType.INT)] public int m_decal;
            [DMLField("PetName", DMLType.UINT)] public uint m_petName;
            [DMLField("SaleID", DMLType.UINT)] public uint m_saleID;
            [DMLField("Reco", DMLType.UINT)] public uint m_reco;
            [DMLField("ItemLocator", DMLType.UINT)] public uint m_itemLocator;
            [DMLField("PurchaseElixirEquipNow", DMLType.UINT)] public uint m_purchaseElixirEquipNow;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PCS_PURCHASE_REQUEST>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PCS_PURCHASE_REQUEST>.Read(buf, this);
            }
        }
        public class MSG_PCS_PURCHASE_RESPONSE : INetworkMessage
        {
            public const byte c_messageID = 105;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("Item", DMLType.GID)] public GID m_item;
            [DMLField("Type", DMLType.INT)] public int m_type;
            [DMLField("Cost", DMLType.INT)] public int m_cost;
            [DMLField("Count", DMLType.INT)] public int m_count;
            [DMLField("Error", DMLType.INT)] public int m_error;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PCS_PURCHASE_RESPONSE>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PCS_PURCHASE_RESPONSE>.Read(buf, this);
            }
        }
        public class MSG_PETGAMEKIOSK : INetworkMessage
        {
            public const byte c_messageID = 106;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("GlobalID", DMLType.GID)] public GID m_globalID;
            [DMLField("GameInfo", DMLType.STR)] public ByteString m_gameInfo;
            [DMLField("GamesWon", DMLType.UINT)] public uint m_gamesWon;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PETGAMEKIOSK>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PETGAMEKIOSK>.Read(buf, this);
            }
        }
        public class MSG_PETHATCHCREATE : INetworkMessage
        {
            public const byte c_messageID = 107;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("TargetGID", DMLType.GID)] public GID m_targetGID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PETHATCHCREATE>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PETHATCHCREATE>.Read(buf, this);
            }
        }
        public class MSG_PETHATCHJOINSTATUS : INetworkMessage
        {
            public const byte c_messageID = 108;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("TargetGID", DMLType.GID)] public GID m_targetGID;
            [DMLField("TargetStatus", DMLType.INT)] public int m_targetStatus;
            [DMLField("PlayerStatus", DMLType.INT)] public int m_playerStatus;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PETHATCHJOINSTATUS>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PETHATCHJOINSTATUS>.Read(buf, this);
            }
        }
        public class MSG_PETHATCHREADYSTATUS : INetworkMessage
        {
            public const byte c_messageID = 109;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("TargetGID", DMLType.GID)] public GID m_targetGID;
            [DMLField("TargetStatus", DMLType.INT)] public int m_targetStatus;
            [DMLField("PlayerStatus", DMLType.INT)] public int m_playerStatus;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PETHATCHREADYSTATUS>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PETHATCHREADYSTATUS>.Read(buf, this);
            }
        }
        public class MSG_PETHATCHREQUEST : INetworkMessage
        {
            public const byte c_messageID = 110;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("TargetGID", DMLType.GID)] public GID m_targetGID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PETHATCHREQUEST>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PETHATCHREQUEST>.Read(buf, this);
            }
        }
        public class MSG_PETHATCHRESULT : INetworkMessage
        {
            public const byte c_messageID = 111;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("TargetGID", DMLType.GID)] public GID m_targetGID;
            [DMLField("Status", DMLType.UINT)] public uint m_status;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PETHATCHRESULT>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PETHATCHRESULT>.Read(buf, this);
            }
        }
        public class MSG_PETRENAMECONFIRM : INetworkMessage
        {
            public const byte c_messageID = 112;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("Failure", DMLType.BYT)] public sbyte m_failure;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PETRENAMECONFIRM>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PETRENAMECONFIRM>.Read(buf, this);
            }
        }
        public class MSG_PETRENAMEREQUEST : INetworkMessage
        {
            public const byte c_messageID = 113;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("itemGlobalID", DMLType.GID)] public GID m_itemGlobalID;
            [DMLField("petName", DMLType.UINT)] public uint m_petName;
            [DMLField("npcGlobalID", DMLType.GID)] public GID m_npcGlobalID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PETRENAMEREQUEST>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PETRENAMEREQUEST>.Read(buf, this);
            }
        }
        public class MSG_PLAYERARRIVED : INetworkMessage
        {
            public const byte c_messageID = 114;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("GlobalID", DMLType.GID)] public GID m_globalID;
            [DMLField("NodeIndex", DMLType.INT)] public int m_nodeIndex;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PLAYERARRIVED>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PLAYERARRIVED>.Read(buf, this);
            }
        }
        public class MSG_PLAYERWIZBANG : INetworkMessage
        {
            public const byte c_messageID = 115;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("StateName", DMLType.STR)] public ByteString m_stateName;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PLAYERWIZBANG>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PLAYERWIZBANG>.Read(buf, this);
            }
        }
        public class MSG_PLAYMUSIC : INetworkMessage
        {
            public const byte c_messageID = 116;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("SoundID", DMLType.GID)] public GID m_soundID;
            [DMLField("FadeTime", DMLType.FLT)] public float m_fadeTime;
            [DMLField("Flags", DMLType.BYT)] public sbyte m_flags;
            [DMLField("SoundFilename", DMLType.STR)] public ByteString m_soundFilename;
            [DMLField("StartDelay", DMLType.FLT)] public float m_startDelay;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PLAYMUSIC>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PLAYMUSIC>.Read(buf, this);
            }
        }
        public class MSG_POTIONBUYCONFIRM : INetworkMessage
        {
            public const byte c_messageID = 117;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("Failure", DMLType.BYT)] public sbyte m_failure;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_POTIONBUYCONFIRM>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_POTIONBUYCONFIRM>.Read(buf, this);
            }
        }
        public class MSG_POTIONBUYREQUEST : INetworkMessage
        {
            public const byte c_messageID = 118;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("AmountEnum", DMLType.INT)] public int m_amountEnum;
            [DMLField("npcGlobalID", DMLType.GID)] public GID m_npcGlobalID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_POTIONBUYREQUEST>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_POTIONBUYREQUEST>.Read(buf, this);
            }
        }
        public class MSG_POTIONSHOPOPEN : INetworkMessage
        {
            public const byte c_messageID = 119;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("GlobalID", DMLType.GID)] public GID m_globalID;
            [DMLField("ShopTitle", DMLType.STR)] public ByteString m_shopTitle;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_POTIONSHOPOPEN>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_POTIONSHOPOPEN>.Read(buf, this);
            }
        }
        public class MSG_PRELEADERBOARD : INetworkMessage
        {
            public const byte c_messageID = 120;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("LeaderboardNameID", DMLType.UINT)] public uint m_leaderboardNameID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PRELEADERBOARD>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PRELEADERBOARD>.Read(buf, this);
            }
        }
        public class MSG_PREMIUMCONTENT : INetworkMessage
        {
            public const byte c_messageID = 121;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("MobileID", DMLType.GID)] public GID m_mobileID;
            [DMLField("TransactionID", DMLType.GID)] public GID m_transactionID;
            [DMLField("Failure", DMLType.BYT)] public sbyte m_failure;
            [DMLField("TotalCrowns", DMLType.INT)] public int m_totalCrowns;
            [DMLField("CanPurchase", DMLType.BYT)] public sbyte m_canPurchase;
            [DMLField("ScrollTitle", DMLType.STR)] public ByteString m_scrollTitle;
            [DMLField("TitleText", DMLType.STR)] public ByteString m_titleText;
            [DMLField("SubscribeText", DMLType.STR)] public ByteString m_subscribeText;
            [DMLField("Tournament", DMLType.UINT)] public uint m_tournament;
            [DMLField("PurchaseList", DMLType.STR)] public ByteString m_purchaseList;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PREMIUMCONTENT>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PREMIUMCONTENT>.Read(buf, this);
            }
        }
        public class MSG_PREPVPKIOSK : INetworkMessage
        {
            public const byte c_messageID = 122;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("TournamentNameID", DMLType.UINT)] public uint m_tournamentNameID;
            [DMLField("MobileID", DMLType.GID)] public GID m_mobileID;
            [DMLField("TransactionID", DMLType.GID)] public GID m_transactionID;
            [DMLField("Patching", DMLType.UBYT)] public byte m_patching;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PREPVPKIOSK>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PREPVPKIOSK>.Read(buf, this);
            }
        }
        public class MSG_PVPCONFIRM : INetworkMessage
        {
            public const byte c_messageID = 123;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("TournamentNameID", DMLType.UINT)] public uint m_tournamentNameID;
            [DMLField("Confirm", DMLType.UBYT)] public byte m_confirm;
            [DMLField("MatchActor", DMLType.STR)] public ByteString m_matchActor;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PVPCONFIRM>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PVPCONFIRM>.Read(buf, this);
            }
        }
        public class MSG_PVPCONFIRMTOURNEY : INetworkMessage
        {
            public const byte c_messageID = 124;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("CharacterID", DMLType.GID)] public GID m_characterID;
            [DMLField("RegistrationID", DMLType.GID)] public GID m_registrationID;
            [DMLField("BracketID", DMLType.GID)] public GID m_bracketID;
            [DMLField("Price", DMLType.UINT)] public uint m_price;
            [DMLField("SubPrice", DMLType.UINT)] public uint m_subPrice;
            [DMLField("PlayerCrowns", DMLType.INT)] public int m_playerCrowns;
            [DMLField("SubscribersPayGold", DMLType.BYT)] public sbyte m_subscribersPayGold;
            [DMLField("NonSubscribersPayGold", DMLType.BYT)] public sbyte m_nonSubscribersPayGold;
            [DMLField("GoldList", DMLType.STR)] public ByteString m_goldList;
            [DMLField("PlayerGold", DMLType.INT)] public int m_playerGold;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PVPCONFIRMTOURNEY>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PVPCONFIRMTOURNEY>.Read(buf, this);
            }
        }
        public class MSG_PVPINTENT : INetworkMessage
        {
            public const byte c_messageID = 125;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("Command", DMLType.BYT)] public sbyte m_command;
            [DMLField("TargetObject", DMLType.GID)] public GID m_targetObject;
            [DMLField("TargetData", DMLType.STR)] public ByteString m_targetData;
            [DMLField("TournamentNameID", DMLType.UINT)] public uint m_tournamentNameID;
            [DMLField("MatchNameID", DMLType.UINT)] public uint m_matchNameID;
            [DMLField("MatchID", DMLType.GID)] public GID m_matchID;
            [DMLField("AllowExtMatchSearch", DMLType.UINT)] public uint m_allowExtMatchSearch;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PVPINTENT>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PVPINTENT>.Read(buf, this);
            }
        }
        public class MSG_PVPISSUETOURNEYCREDIT : INetworkMessage
        {
            public const byte c_messageID = 126;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("CharacterID", DMLType.GID)] public GID m_characterID;
            [DMLField("BracketID", DMLType.GID)] public GID m_bracketID;
            [DMLField("MatchTeam", DMLType.STR)] public ByteString m_matchTeam;
            [DMLField("Bracket", DMLType.STR)] public ByteString m_bracket;
            [DMLField("Price", DMLType.UINT)] public uint m_price;
            [DMLField("SubPrice", DMLType.UINT)] public uint m_subPrice;
            [DMLField("GroupJoinTeamID", DMLType.GID)] public GID m_groupJoinTeamID;
            [DMLField("SubscribersPayGold", DMLType.BYT)] public sbyte m_subscribersPayGold;
            [DMLField("NonSubscribersPayGold", DMLType.BYT)] public sbyte m_nonSubscribersPayGold;
            [DMLField("GoldList", DMLType.STR)] public ByteString m_goldList;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PVPISSUETOURNEYCREDIT>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PVPISSUETOURNEYCREDIT>.Read(buf, this);
            }
        }
        public class MSG_PVPMATCHREQUEST : INetworkMessage
        {
            public const byte c_messageID = 127;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("TournamentNameID", DMLType.UINT)] public uint m_tournamentNameID;
            [DMLField("MobileID", DMLType.GID)] public GID m_mobileID;
            [DMLField("Failure", DMLType.UBYT)] public byte m_failure;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PVPMATCHREQUEST>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PVPMATCHREQUEST>.Read(buf, this);
            }
        }
        public class MSG_PVMSG_PVPREGISTERFAILEDPISSUETOURNEYCREDIT : INetworkMessage
        {
            public const byte c_messageID = 128;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PVMSG_PVPREGISTERFAILEDPISSUETOURNEYCREDIT>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PVMSG_PVPREGISTERFAILEDPISSUETOURNEYCREDIT>.Read(buf, this);
            }
        }
        public class MSG_PVPUPDATEREQUEST : INetworkMessage
        {
            public const byte c_messageID = 129;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("InfoRequest", DMLType.STR)] public ByteString m_infoRequest;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PVPUPDATEREQUEST>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PVPUPDATEREQUEST>.Read(buf, this);
            }
        }
        public class MSG_QUESTDIALOG : INetworkMessage
        {
            public const byte c_messageID = 130;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("QuestNameID", DMLType.UINT)] public uint m_questNameID;
            [DMLField("ActorDialog", DMLType.STR)] public ByteString m_actorDialog;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_QUESTDIALOG>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_QUESTDIALOG>.Read(buf, this);
            }
        }
        public class MSG_QUESTFINDEROPTION : INetworkMessage
        {
            public const byte c_messageID = 131;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("Enable", DMLType.UBYT)] public byte m_enable;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_QUESTFINDEROPTION>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_QUESTFINDEROPTION>.Read(buf, this);
            }
        }
        public class MSG_QUESTREWARDS : INetworkMessage
        {
            public const byte c_messageID = 132;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("QuestID", DMLType.GID)] public GID m_questID;
            [DMLField("LootList", DMLType.STR)] public ByteString m_lootList;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_QUESTREWARDS>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_QUESTREWARDS>.Read(buf, this);
            }
        }
        public class MSG_QUICKSELLREQUESTBANK : INetworkMessage
        {
            public const byte c_messageID = 133;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_QUICKSELLREQUESTBANK>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_QUICKSELLREQUESTBANK>.Read(buf, this);
            }
        }
        public class MSG_REAGENTADD : INetworkMessage
        {
            public const byte c_messageID = 134;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("GlobalID", DMLType.GID)] public GID m_globalID;
            [DMLField("Data", DMLType.STR)] public ByteString m_data;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_REAGENTADD>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_REAGENTADD>.Read(buf, this);
            }
        }
        public class MSG_REAGENTREMOVE : INetworkMessage
        {
            public const byte c_messageID = 135;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("GlobalID", DMLType.GID)] public GID m_globalID;
            [DMLField("ItemID", DMLType.GID)] public GID m_itemID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_REAGENTREMOVE>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_REAGENTREMOVE>.Read(buf, this);
            }
        }
        public class MSG_REAGENTREMOVEREQUEST : INetworkMessage
        {
            public const byte c_messageID = 136;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("GlobalID", DMLType.GID)] public GID m_globalID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_REAGENTREMOVEREQUEST>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_REAGENTREMOVEREQUEST>.Read(buf, this);
            }
        }
        public class MSG_REAGENTUPDATE : INetworkMessage
        {
            public const byte c_messageID = 137;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("GlobalID", DMLType.GID)] public GID m_globalID;
            [DMLField("ItemID", DMLType.GID)] public GID m_itemID;
            [DMLField("Quantity", DMLType.INT)] public int m_quantity;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_REAGENTUPDATE>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_REAGENTUPDATE>.Read(buf, this);
            }
        }
        public class MSG_RECIPEADD : INetworkMessage
        {
            public const byte c_messageID = 138;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("GlobalID", DMLType.GID)] public GID m_globalID;
            [DMLField("Data", DMLType.STR)] public ByteString m_data;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_RECIPEADD>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_RECIPEADD>.Read(buf, this);
            }
        }
        public class MSG_RECIPEREMOVE : INetworkMessage
        {
            public const byte c_messageID = 139;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("GlobalID", DMLType.GID)] public GID m_globalID;
            [DMLField("RecipeID", DMLType.UINT)] public uint m_recipeID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_RECIPEREMOVE>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_RECIPEREMOVE>.Read(buf, this);
            }
        }
        public class MSG_REGISTRAR : INetworkMessage
        {
            public const byte c_messageID = 140;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("MobileID", DMLType.GID)] public GID m_mobileID;
            [DMLField("Data", DMLType.STR)] public ByteString m_data;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_REGISTRAR>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_REGISTRAR>.Read(buf, this);
            }
        }
        public class MSG_REMOVESPELLFROMBOOK : INetworkMessage
        {
            public const byte c_messageID = 141;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("SpellID", DMLType.INT)] public int m_spellID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_REMOVESPELLFROMBOOK>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_REMOVESPELLFROMBOOK>.Read(buf, this);
            }
        }
        public class MSG_REMOVESPELLFROMDECK : INetworkMessage
        {
            public const byte c_messageID = 142;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("SpellID", DMLType.INT)] public int m_spellID;
            [DMLField("DeckID", DMLType.GID)] public GID m_deckID;
            [DMLField("Success", DMLType.UBYT)] public byte m_success;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_REMOVESPELLFROMDECK>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_REMOVESPELLFROMDECK>.Read(buf, this);
            }
        }
        public class MSG_REMOVETREASURESPELLFROMBOOK : INetworkMessage
        {
            public const byte c_messageID = 143;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("SpellID", DMLType.INT)] public int m_spellID;
            [DMLField("EnchantmentID", DMLType.INT)] public int m_enchantmentID;
            [DMLField("Quantity", DMLType.INT)] public int m_quantity;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_REMOVETREASURESPELLFROMBOOK>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_REMOVETREASURESPELLFROMBOOK>.Read(buf, this);
            }
        }
        public class MSG_REMOVETREASURESPELLFROMDECK : INetworkMessage
        {
            public const byte c_messageID = 144;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("SpellID", DMLType.INT)] public int m_spellID;
            [DMLField("EnchantmentID", DMLType.INT)] public int m_enchantmentID;
            [DMLField("DeckID", DMLType.GID)] public GID m_deckID;
            [DMLField("Success", DMLType.UBYT)] public byte m_success;
            [DMLField("Destroy", DMLType.UBYT)] public byte m_destroy;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_REMOVETREASURESPELLFROMDECK>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_REMOVETREASURESPELLFROMDECK>.Read(buf, this);
            }
        }
        public class MSG_REMOVETREASURESPELLFROMVAULT : INetworkMessage
        {
            public const byte c_messageID = 145;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("SpellID", DMLType.INT)] public int m_spellID;
            [DMLField("EnchantmentID", DMLType.INT)] public int m_enchantmentID;
            [DMLField("Quantity", DMLType.INT)] public int m_quantity;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_REMOVETREASURESPELLFROMVAULT>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_REMOVETREASURESPELLFROMVAULT>.Read(buf, this);
            }
        }
        public class MSG_RENTALUPDATE : INetworkMessage
        {
            public const byte c_messageID = 146;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("TemplateID", DMLType.GID)] public GID m_templateID;
            [DMLField("Reason", DMLType.INT)] public int m_reason;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_RENTALUPDATE>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_RENTALUPDATE>.Read(buf, this);
            }
        }
        public class MSG_REQUESTACTIVEMAPQUESTS : INetworkMessage
        {
            public const byte c_messageID = 147;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("Data", DMLType.STR)] public ByteString m_data;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_REQUESTACTIVEMAPQUESTS>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_REQUESTACTIVEMAPQUESTS>.Read(buf, this);
            }
        }
        public class MSG_REQUESTCOMBATSIGILS : INetworkMessage
        {
            public const byte c_messageID = 148;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("ZoneID", DMLType.GID)] public GID m_zoneID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_REQUESTCOMBATSIGILS>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_REQUESTCOMBATSIGILS>.Read(buf, this);
            }
        }
        public class MSG_REQUESTFRIENDFINDERCODE : INetworkMessage
        {
            public const byte c_messageID = 149;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("Account1", DMLType.GID)] public GID m_account1;
            [DMLField("Account2", DMLType.GID)] public GID m_account2;
            [DMLField("BuddyID", DMLType.GID)] public GID m_buddyID;
            [DMLField("Forwarded", DMLType.UBYT)] public byte m_forwarded;
            [DMLField("ListOwnerGID", DMLType.GID)] public GID m_listOwnerGID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_REQUESTFRIENDFINDERCODE>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_REQUESTFRIENDFINDERCODE>.Read(buf, this);
            }
        }
        public class MSG_REQUESTHOUSETELEPORT : INetworkMessage
        {
            public const byte c_messageID = 150;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("DestinationZone", DMLType.STR)] public ByteString m_destinationZone;
            [DMLField("DestinationLoc", DMLType.STR)] public ByteString m_destinationLoc;
            [DMLField("Position", DMLType.STR)] public ByteString m_position;
            [DMLField("TransitionID", DMLType.UINT)] public uint m_transitionID;
            [DMLField("ObjectGID", DMLType.GID)] public GID m_objectGID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_REQUESTHOUSETELEPORT>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_REQUESTHOUSETELEPORT>.Read(buf, this);
            }
        }
        public class MSG_REQUESTNEXTCLOSESTQUEST : INetworkMessage
        {
            public const byte c_messageID = 151;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("NPCList", DMLType.STR)] public ByteString m_nPCList;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_REQUESTNEXTCLOSESTQUEST>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_REQUESTNEXTCLOSESTQUEST>.Read(buf, this);
            }
        }
        public class MSG_REQUESTPRIVACYOPTIONS : INetworkMessage
        {
            public const byte c_messageID = 152;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_REQUESTPRIVACYOPTIONS>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_REQUESTPRIVACYOPTIONS>.Read(buf, this);
            }
        }
        public class MSG_REQUESTPVPACTOR : INetworkMessage
        {
            public const byte c_messageID = 153;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("CharacterID", DMLType.GID)] public GID m_characterID;
            [DMLField("TournamentNameID", DMLType.UINT)] public uint m_tournamentNameID;
            [DMLField("MatchNameID", DMLType.UINT)] public uint m_matchNameID;
            [DMLField("RequestID", DMLType.GID)] public GID m_requestID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_REQUESTPVPACTOR>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_REQUESTPVPACTOR>.Read(buf, this);
            }
        }
        public class MSG_REQUESTPVPKIOSK : INetworkMessage
        {
            public const byte c_messageID = 154;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("MobileID", DMLType.GID)] public GID m_mobileID;
            [DMLField("TournamentNameID", DMLType.UINT)] public uint m_tournamentNameID;
            [DMLField("TransactionID", DMLType.GID)] public GID m_transactionID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_REQUESTPVPKIOSK>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_REQUESTPVPKIOSK>.Read(buf, this);
            }
        }
        public class MSG_REQUESTQUESTDIALOG : INetworkMessage
        {
            public const byte c_messageID = 155;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("QuestNameID", DMLType.UINT)] public uint m_questNameID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_REQUESTQUESTDIALOG>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_REQUESTQUESTDIALOG>.Read(buf, this);
            }
        }
        public class MSG_REQUESTQUICKSELL : INetworkMessage
        {
            public const byte c_messageID = 156;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("SellModifier", DMLType.FLT)] public float m_sellModifier;
            [DMLField("Section", DMLType.UBYT)] public byte m_section;
            [DMLField("FromTemplateID", DMLType.UINT)] public uint m_fromTemplateID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_REQUESTQUICKSELL>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_REQUESTQUICKSELL>.Read(buf, this);
            }
        }
        public class MSG_REQUESTTOGGLELOCKITEM : INetworkMessage
        {
            public const byte c_messageID = 157;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("ItemGID", DMLType.GID)] public GID m_itemGID;
            [DMLField("GlobalID", DMLType.GID)] public GID m_globalID;
            [DMLField("IsLocked", DMLType.UINT)] public uint m_isLocked;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_REQUESTTOGGLELOCKITEM>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_REQUESTTOGGLELOCKITEM>.Read(buf, this);
            }
        }
        public class MSG_RESPECCONFIRM : INetworkMessage
        {
            public const byte c_messageID = 158;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("Failure", DMLType.BYT)] public sbyte m_failure;
            [DMLField("WebFailure", DMLType.BYT)] public sbyte m_webFailure;
            [DMLField("Credits", DMLType.INT)] public int m_credits;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_RESPECCONFIRM>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_RESPECCONFIRM>.Read(buf, this);
            }
        }
        public class MSG_RESPONSEPRIVACYOPTIONS : INetworkMessage
        {
            public const byte c_messageID = 159;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("AllowFriendRequest", DMLType.UBYT)] public byte m_allowFriendRequest;
            [DMLField("AllowFriendTeleport", DMLType.UBYT)] public byte m_allowFriendTeleport;
            [DMLField("AllowTradeRequest", DMLType.UBYT)] public byte m_allowTradeRequest;
            [DMLField("AllowHatchRequest", DMLType.UBYT)] public byte m_allowHatchRequest;
            [DMLField("AllowPartyInvites", DMLType.UBYT)] public byte m_allowPartyInvites;
            [DMLField("HidePVPEnemyChat", DMLType.UBYT)] public byte m_hidePVPEnemyChat;
            [DMLField("LimitHomeToFriends", DMLType.UBYT)] public byte m_limitHomeToFriends;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_RESPONSEPRIVACYOPTIONS>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_RESPONSEPRIVACYOPTIONS>.Read(buf, this);
            }
        }
        public class MSG_RIDEMOUNT : INetworkMessage
        {
            public const byte c_messageID = 160;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("GlobalID", DMLType.GID)] public GID m_globalID;
            [DMLField("DriverID", DMLType.GID)] public GID m_driverID;
            [DMLField("Riding", DMLType.UBYT)] public byte m_riding;
            [DMLField("LocationX", DMLType.USHRT)] public ushort m_locationX;
            [DMLField("LocationY", DMLType.USHRT)] public ushort m_locationY;
            [DMLField("LocationZ", DMLType.USHRT)] public ushort m_locationZ;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_RIDEMOUNT>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_RIDEMOUNT>.Read(buf, this);
            }
        }
        public class MSG_SEAMSTRESSOPEN : INetworkMessage
        {
            public const byte c_messageID = 161;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("GlobalID", DMLType.GID)] public GID m_globalID;
            [DMLField("ShopTitle", DMLType.STR)] public ByteString m_shopTitle;
            [DMLField("Credits", DMLType.INT)] public int m_credits;
            [DMLField("MergeCost", DMLType.INT)] public int m_mergeCost;
            [DMLField("WebFailure", DMLType.BYT)] public sbyte m_webFailure;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_SEAMSTRESSOPEN>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_SEAMSTRESSOPEN>.Read(buf, this);
            }
        }
        public class MSG_SENDFRIENDFINDERCODE : INetworkMessage
        {
            public const byte c_messageID = 162;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("Code", DMLType.WSTR)] public string m_code;
            [DMLField("Error", DMLType.UINT)] public uint m_error;
            [DMLField("PackedName", DMLType.STR)] public ByteString m_packedName;
            [DMLField("IsRequester", DMLType.UINT)] public uint m_isRequester;
            [DMLField("ListOwnerGID", DMLType.GID)] public GID m_listOwnerGID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_SENDFRIENDFINDERCODE>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_SENDFRIENDFINDERCODE>.Read(buf, this);
            }
        }
        public class MSG_SENDTALENTDATACSR : INetworkMessage
        {
            public const byte c_messageID = 163;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("Talents", DMLType.STR)] public ByteString m_talents;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_SENDTALENTDATACSR>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_SENDTALENTDATACSR>.Read(buf, this);
            }
        }
        public class MSG_SETDECKNAME : INetworkMessage
        {
            public const byte c_messageID = 164;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("ItemGID", DMLType.GID)] public GID m_itemGID;
            [DMLField("DeckName", DMLType.UINT)] public uint m_deckName;
            [DMLField("DeckNameExtension", DMLType.UINT)] public uint m_deckNameExtension;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_SETDECKNAME>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_SETDECKNAME>.Read(buf, this);
            }
        }
        public class MSG_SETDONTALLOWFRIENDFINDERCODES : INetworkMessage
        {
            public const byte c_messageID = 165;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("DontAllowFriendFinderCodes", DMLType.UBYT)] public byte m_dontAllowFriendFinderCodes;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_SETDONTALLOWFRIENDFINDERCODES>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_SETDONTALLOWFRIENDFINDERCODES>.Read(buf, this);
            }
        }
        public class MSG_SETRENTALTIMER : INetworkMessage
        {
            public const byte c_messageID = 166;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("GlobalID", DMLType.GID)] public GID m_globalID;
            [DMLField("TimerTime", DMLType.UINT)] public uint m_timerTime;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_SETRENTALTIMER>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_SETRENTALTIMER>.Read(buf, this);
            }
        }
        public class MSG_SHOPBUYCONFIRM : INetworkMessage
        {
            public const byte c_messageID = 167;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("Failure", DMLType.BYT)] public sbyte m_failure;
            [DMLField("WebFailure", DMLType.BYT)] public sbyte m_webFailure;
            [DMLField("Credits", DMLType.INT)] public int m_credits;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_SHOPBUYCONFIRM>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_SHOPBUYCONFIRM>.Read(buf, this);
            }
        }
        public class MSG_SHOPBUYREQUEST : INetworkMessage
        {
            public const byte c_messageID = 168;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("ShopID", DMLType.GID)] public GID m_shopID;
            [DMLField("CurrencyType", DMLType.UBYT)] public byte m_currencyType;
            [DMLField("texture", DMLType.INT)] public int m_texture;
            [DMLField("decal", DMLType.INT)] public int m_decal;
            [DMLField("decal2", DMLType.INT)] public int m_decal2;
            [DMLField("petName", DMLType.UINT)] public uint m_petName;
            [DMLField("npcGlobalID", DMLType.GID)] public GID m_npcGlobalID;
            [DMLField("quantity", DMLType.UINT)] public uint m_quantity;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_SHOPBUYREQUEST>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_SHOPBUYREQUEST>.Read(buf, this);
            }
        }
        public class MSG_SHOPLIST : INetworkMessage
        {
            public const byte c_messageID = 169;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("GlobalID", DMLType.GID)] public GID m_globalID;
            [DMLField("Data", DMLType.STR)] public ByteString m_data;
            [DMLField("Credits", DMLType.INT)] public int m_credits;
            [DMLField("WebFailure", DMLType.BYT)] public sbyte m_webFailure;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_SHOPLIST>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_SHOPLIST>.Read(buf, this);
            }
        }
        public class MSG_SHOPSELLCONFIRM : INetworkMessage
        {
            public const byte c_messageID = 170;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("Failure", DMLType.BYT)] public sbyte m_failure;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_SHOPSELLCONFIRM>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_SHOPSELLCONFIRM>.Read(buf, this);
            }
        }
        public class MSG_SHOPSELLREQUEST : INetworkMessage
        {
            public const byte c_messageID = 171;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("quantity", DMLType.UINT)] public uint m_quantity;
            [DMLField("GlobalID", DMLType.GID)] public GID m_globalID;
            [DMLField("IsQuickSell", DMLType.BYT)] public sbyte m_isQuickSell;
            [DMLField("npcGlobalID", DMLType.GID)] public GID m_npcGlobalID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_SHOPSELLREQUEST>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_SHOPSELLREQUEST>.Read(buf, this);
            }
        }
        public class MSG_SHOWCASEDSTOREITEMINFO : INetworkMessage
        {
            public const byte c_messageID = 172;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("StoreTemplateIDsCSV", DMLType.STR)] public ByteString m_storeTemplateIDsCSV;
            [DMLField("Data", DMLType.STR)] public ByteString m_data;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_SHOWCASEDSTOREITEMINFO>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_SHOWCASEDSTOREITEMINFO>.Read(buf, this);
            }
        }
        public class MSG_SHOWCLIENTMESSAGEBOX : INetworkMessage
        {
            public const byte c_messageID = 173;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("Message", DMLType.INT)] public int m_message;
            [DMLField("Title", DMLType.INT)] public int m_title;
            [DMLField("Delay", DMLType.BYT)] public sbyte m_delay;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_SHOWCLIENTMESSAGEBOX>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_SHOWCLIENTMESSAGEBOX>.Read(buf, this);
            }
        }
        public class MSG_SHOWGUI : INetworkMessage
        {
            public const byte c_messageID = 174;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("GUIFileName", DMLType.STR)] public ByteString m_gUIFileName;
            [DMLField("StageIndex", DMLType.UBYT)] public byte m_stageIndex;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_SHOWGUI>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_SHOWGUI>.Read(buf, this);
            }
        }
        public class MSG_SNACKLIST : INetworkMessage
        {
            public const byte c_messageID = 175;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("InvisibleToFriends", DMLType.UBYT)] public byte m_invisibleToFriends;
            [DMLField("Data", DMLType.STR)] public ByteString m_data;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_SNACKLIST>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_SNACKLIST>.Read(buf, this);
            }
        }
        public class MSG_SPELLLIST : INetworkMessage
        {
            public const byte c_messageID = 176;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("Data", DMLType.STR)] public ByteString m_data;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_SPELLLIST>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_SPELLLIST>.Read(buf, this);
            }
        }
        public class MSG_SPELLTRAINCOMPLETE : INetworkMessage
        {
            public const byte c_messageID = 177;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("SpellID", DMLType.GID)] public GID m_spellID;
            [DMLField("DisplayText", DMLType.STR)] public ByteString m_displayText;
            [DMLField("Success", DMLType.UBYT)] public byte m_success;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_SPELLTRAINCOMPLETE>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_SPELLTRAINCOMPLETE>.Read(buf, this);
            }
        }
        public class MSG_STARTRIDE : INetworkMessage
        {
            public const byte c_messageID = 178;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("GlobalID", DMLType.GID)] public GID m_globalID;
            [DMLField("Time", DMLType.FLT)] public float m_time;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_STARTRIDE>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_STARTRIDE>.Read(buf, this);
            }
        }
        public class MSG_STITCHITEMS : INetworkMessage
        {
            public const byte c_messageID = 179;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("GlobalID", DMLType.GID)] public GID m_globalID;
            [DMLField("StatsID", DMLType.GID)] public GID m_statsID;
            [DMLField("DisplayID", DMLType.GID)] public GID m_displayID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_STITCHITEMS>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_STITCHITEMS>.Read(buf, this);
            }
        }
        public class MSG_STITCHITEMSCONFIRM : INetworkMessage
        {
            public const byte c_messageID = 180;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("Failure", DMLType.INT)] public int m_failure;
            [DMLField("WebFailure", DMLType.BYT)] public sbyte m_webFailure;
            [DMLField("Credits", DMLType.INT)] public int m_credits;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_STITCHITEMSCONFIRM>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_STITCHITEMSCONFIRM>.Read(buf, this);
            }
        }
        public class MSG_STORAGECLIENTADD : INetworkMessage
        {
            public const byte c_messageID = 181;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("GlobalID", DMLType.GID)] public GID m_globalID;
            [DMLField("SerializedItem", DMLType.STR)] public ByteString m_serializedItem;
            [DMLField("SharedBank", DMLType.BYT)] public sbyte m_sharedBank;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_STORAGECLIENTADD>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_STORAGECLIENTADD>.Read(buf, this);
            }
        }
        public class MSG_STORAGECLIENTREMOVE : INetworkMessage
        {
            public const byte c_messageID = 182;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("GlobalID", DMLType.GID)] public GID m_globalID;
            [DMLField("SharedBank", DMLType.BYT)] public sbyte m_sharedBank;
            [DMLField("ItemID", DMLType.GID)] public GID m_itemID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_STORAGECLIENTREMOVE>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_STORAGECLIENTREMOVE>.Read(buf, this);
            }
        }
        public class MSG_SUBMITCOMBATSIGILS : INetworkMessage
        {
            public const byte c_messageID = 183;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("SigilPositions", DMLType.STR)] public ByteString m_sigilPositions;
            [DMLField("ZoneID", DMLType.GID)] public GID m_zoneID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_SUBMITCOMBATSIGILS>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_SUBMITCOMBATSIGILS>.Read(buf, this);
            }
        }
        public class MSG_SUBSCRIBERONLYITEMS : INetworkMessage
        {
            public const byte c_messageID = 184;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("Data", DMLType.STR)] public ByteString m_data;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_SUBSCRIBERONLYITEMS>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_SUBSCRIBERONLYITEMS>.Read(buf, this);
            }
        }
        public class MSG_TIMEDACCESSPASSES : INetworkMessage
        {
            public const byte c_messageID = 185;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("Data", DMLType.STR)] public ByteString m_data;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_TIMEDACCESSPASSES>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_TIMEDACCESSPASSES>.Read(buf, this);
            }
        }
        public class MSG_TRADE_CHANGE_ITEM : INetworkMessage
        {
            public const byte c_messageID = 186;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("TargetGID", DMLType.GID)] public GID m_targetGID;
            [DMLField("ChangeGID", DMLType.GID)] public GID m_changeGID;
            [DMLField("ItemTemplate", DMLType.UINT)] public uint m_itemTemplate;
            [DMLField("ItemEnchant", DMLType.UINT)] public uint m_itemEnchant;
            [DMLField("Action", DMLType.UBYT)] public byte m_action;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_TRADE_CHANGE_ITEM>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_TRADE_CHANGE_ITEM>.Read(buf, this);
            }
        }
        public class MSG_TRADE_CHANGE_MONEY : INetworkMessage
        {
            public const byte c_messageID = 187;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("TargetGID", DMLType.GID)] public GID m_targetGID;
            [DMLField("ChangeGID", DMLType.GID)] public GID m_changeGID;
            [DMLField("Amount", DMLType.UINT)] public uint m_amount;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_TRADE_CHANGE_MONEY>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_TRADE_CHANGE_MONEY>.Read(buf, this);
            }
        }
        public class MSG_TRADE_CREATE : INetworkMessage
        {
            public const byte c_messageID = 188;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("TargetGID", DMLType.GID)] public GID m_targetGID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_TRADE_CREATE>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_TRADE_CREATE>.Read(buf, this);
            }
        }
        public class MSG_TRADE_JOIN_STATUS : INetworkMessage
        {
            public const byte c_messageID = 189;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("TargetGID", DMLType.GID)] public GID m_targetGID;
            [DMLField("TargetStatus", DMLType.INT)] public int m_targetStatus;
            [DMLField("PlayerStatus", DMLType.INT)] public int m_playerStatus;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_TRADE_JOIN_STATUS>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_TRADE_JOIN_STATUS>.Read(buf, this);
            }
        }
        public class MSG_TRADE_READY_STATUS : INetworkMessage
        {
            public const byte c_messageID = 190;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("TargetGID", DMLType.GID)] public GID m_targetGID;
            [DMLField("TargetStatus", DMLType.INT)] public int m_targetStatus;
            [DMLField("PlayerStatus", DMLType.INT)] public int m_playerStatus;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_TRADE_READY_STATUS>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_TRADE_READY_STATUS>.Read(buf, this);
            }
        }
        public class MSG_TRADE_REQUEST : INetworkMessage
        {
            public const byte c_messageID = 191;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("TargetGID", DMLType.GID)] public GID m_targetGID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_TRADE_REQUEST>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_TRADE_REQUEST>.Read(buf, this);
            }
        }
        public class MSG_TRADE_RESULT : INetworkMessage
        {
            public const byte c_messageID = 192;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("TargetGID", DMLType.GID)] public GID m_targetGID;
            [DMLField("ItemsGained", DMLType.UINT)] public uint m_itemsGained;
            [DMLField("ItemsLost", DMLType.UINT)] public uint m_itemsLost;
            [DMLField("Status", DMLType.UINT)] public uint m_status;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_TRADE_RESULT>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_TRADE_RESULT>.Read(buf, this);
            }
        }
        public class MSG_TRAIN : INetworkMessage
        {
            public const byte c_messageID = 193;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("MobileID", DMLType.GID)] public GID m_mobileID;
            [DMLField("TrainingIndex", DMLType.INT)] public int m_trainingIndex;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_TRAIN>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_TRAIN>.Read(buf, this);
            }
        }
        public class MSG_TREASUREBUY : INetworkMessage
        {
            public const byte c_messageID = 194;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("GlobalID", DMLType.GID)] public GID m_globalID;
            [DMLField("TreasureCardID", DMLType.UINT)] public uint m_treasureCardID;
            [DMLField("npcGlobalID", DMLType.GID)] public GID m_npcGlobalID;
            [DMLField("Quantity", DMLType.INT)] public int m_quantity;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_TREASUREBUY>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_TREASUREBUY>.Read(buf, this);
            }
        }
        public class MSG_TREASUREBUYCONFIRM : INetworkMessage
        {
            public const byte c_messageID = 195;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("Failure", DMLType.BYT)] public sbyte m_failure;
            [DMLField("WebFailure", DMLType.BYT)] public sbyte m_webFailure;
            [DMLField("Credits", DMLType.INT)] public int m_credits;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_TREASUREBUYCONFIRM>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_TREASUREBUYCONFIRM>.Read(buf, this);
            }
        }
        public class MSG_TREASURESHOPLIST : INetworkMessage
        {
            public const byte c_messageID = 196;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("GlobalID", DMLType.GID)] public GID m_globalID;
            [DMLField("Data", DMLType.STR)] public ByteString m_data;
            [DMLField("Credits", DMLType.INT)] public int m_credits;
            [DMLField("WebFailure", DMLType.BYT)] public sbyte m_webFailure;
            [DMLField("ShowAuctionHouse", DMLType.BYT)] public sbyte m_showAuctionHouse;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_TREASURESHOPLIST>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_TREASURESHOPLIST>.Read(buf, this);
            }
        }
        public class MSG_TUTORIALEVENT : INetworkMessage
        {
            public const byte c_messageID = 197;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("TutorialEvent", DMLType.STR)] public ByteString m_tutorialEvent;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_TUTORIALEVENT>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_TUTORIALEVENT>.Read(buf, this);
            }
        }
        public class MSG_UNSTITCHITEMS : INetworkMessage
        {
            public const byte c_messageID = 198;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("GlobalID", DMLType.GID)] public GID m_globalID;
            [DMLField("ItemID", DMLType.GID)] public GID m_itemID;
            [DMLField("StatItemColor1", DMLType.UINT)] public uint m_statItemColor1;
            [DMLField("StatItemColor2", DMLType.UINT)] public uint m_statItemColor2;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_UNSTITCHITEMS>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_UNSTITCHITEMS>.Read(buf, this);
            }
        }
        public class MSG_UNSTITCHOPEN : INetworkMessage
        {
            public const byte c_messageID = 199;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("GlobalID", DMLType.GID)] public GID m_globalID;
            [DMLField("ShopTitle", DMLType.STR)] public ByteString m_shopTitle;
            [DMLField("Credits", DMLType.INT)] public int m_credits;
            [DMLField("MergeCost", DMLType.INT)] public int m_mergeCost;
            [DMLField("WebFailure", DMLType.BYT)] public sbyte m_webFailure;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_UNSTITCHOPEN>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_UNSTITCHOPEN>.Read(buf, this);
            }
        }
        public class MSG_UPDATEARENAPOINTS : INetworkMessage
        {
            public const byte c_messageID = 200;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("Points", DMLType.INT)] public int m_points;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_UPDATEARENAPOINTS>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_UPDATEARENAPOINTS>.Read(buf, this);
            }
        }
        public class MSG_UPDATEGENDER : INetworkMessage
        {
            public const byte c_messageID = 201;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("GlobalID", DMLType.GID)] public GID m_globalID;
            [DMLField("NewGender", DMLType.STR)] public ByteString m_newGender;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_UPDATEGENDER>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_UPDATEGENDER>.Read(buf, this);
            }
        }
        public class MSG_UPDATEGOLD : INetworkMessage
        {
            public const byte c_messageID = 202;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("Gold", DMLType.INT)] public int m_gold;
            [DMLField("MaxGold", DMLType.INT)] public int m_maxGold;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_UPDATEGOLD>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_UPDATEGOLD>.Read(buf, this);
            }
        }
        public class MSG_UPDATEHEALTH : INetworkMessage
        {
            public const byte c_messageID = 203;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("CharacterID", DMLType.GID)] public GID m_characterID;
            [DMLField("NewHealth", DMLType.INT)] public int m_newHealth;
            [DMLField("NewHealthMax", DMLType.INT)] public int m_newHealthMax;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_UPDATEHEALTH>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_UPDATEHEALTH>.Read(buf, this);
            }
        }
        public class MSG_UPDATEMANA : INetworkMessage
        {
            public const byte c_messageID = 204;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("Mana", DMLType.INT)] public int m_mana;
            [DMLField("MaxMana", DMLType.INT)] public int m_maxMana;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_UPDATEMANA>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_UPDATEMANA>.Read(buf, this);
            }
        }
        public class MSG_UPDATEPOTIONS : INetworkMessage
        {
            public const byte c_messageID = 205;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("PotionMax", DMLType.FLT)] public float m_potionMax;
            [DMLField("PotionCharge", DMLType.FLT)] public float m_potionCharge;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_UPDATEPOTIONS>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_UPDATEPOTIONS>.Read(buf, this);
            }
        }
        public class MSG_UPDATEPOWERPIP : INetworkMessage
        {
            public const byte c_messageID = 206;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("PowerPip", DMLType.FLT)] public float m_powerPip;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_UPDATEPOWERPIP>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_UPDATEPOWERPIP>.Read(buf, this);
            }
        }
        public class MSG_UPDATEPRIVACYOPTIONS : INetworkMessage
        {
            public const byte c_messageID = 207;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("AllowFriendRequest", DMLType.UBYT)] public byte m_allowFriendRequest;
            [DMLField("AllowFriendTeleport", DMLType.UBYT)] public byte m_allowFriendTeleport;
            [DMLField("AllowTradeRequest", DMLType.UBYT)] public byte m_allowTradeRequest;
            [DMLField("AllowHatchRequest", DMLType.UBYT)] public byte m_allowHatchRequest;
            [DMLField("AllowPartyInvites", DMLType.UBYT)] public byte m_allowPartyInvites;
            [DMLField("HidePVPEnemyChat", DMLType.UBYT)] public byte m_hidePVPEnemyChat;
            [DMLField("LimitHomeToFriends", DMLType.UBYT)] public byte m_limitHomeToFriends;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_UPDATEPRIVACYOPTIONS>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_UPDATEPRIVACYOPTIONS>.Read(buf, this);
            }
        }
        public class MSG_UPDATESCHOOL : INetworkMessage
        {
            public const byte c_messageID = 208;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("Data", DMLType.STR)] public ByteString m_data;
            [DMLField("SchoolHash", DMLType.UINT)] public uint m_schoolHash;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_UPDATESCHOOL>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_UPDATESCHOOL>.Read(buf, this);
            }
        }
        public class MSG_UPDATETRAINING : INetworkMessage
        {
            public const byte c_messageID = 209;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("TrainingPoints", DMLType.INT)] public int m_trainingPoints;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_UPDATETRAINING>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_UPDATETRAINING>.Read(buf, this);
            }
        }
        public class MSG_UPDATEXP : INetworkMessage
        {
            public const byte c_messageID = 210;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("GlobalID", DMLType.GID)] public GID m_globalID;
            [DMLField("XP", DMLType.INT)] public int m_xP;
            [DMLField("OldXP", DMLType.INT)] public int m_oldXP;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_UPDATEXP>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_UPDATEXP>.Read(buf, this);
            }
        }
        public class MSG_USEFRIENDFINDERCODE : INetworkMessage
        {
            public const byte c_messageID = 211;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("AccountID", DMLType.GID)] public GID m_accountID;
            [DMLField("Code", DMLType.WSTR)] public string m_code;
            [DMLField("Forwarded", DMLType.UBYT)] public byte m_forwarded;
            [DMLField("ListOwnerGID", DMLType.GID)] public GID m_listOwnerGID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_USEFRIENDFINDERCODE>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_USEFRIENDFINDERCODE>.Read(buf, this);
            }
        }
        public class MSG_USEFRIENDFINDERCODERESPONSE : INetworkMessage
        {
            public const byte c_messageID = 212;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("BuddyName", DMLType.STR)] public ByteString m_buddyName;
            [DMLField("Code", DMLType.WSTR)] public string m_code;
            [DMLField("Error", DMLType.STR)] public ByteString m_error;
            [DMLField("Forwarded", DMLType.UBYT)] public byte m_forwarded;
            [DMLField("ListOwnerGID", DMLType.GID)] public GID m_listOwnerGID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_USEFRIENDFINDERCODERESPONSE>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_USEFRIENDFINDERCODERESPONSE>.Read(buf, this);
            }
        }
        public class MSG_USEPOTION : INetworkMessage
        {
            public const byte c_messageID = 213;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_USEPOTION>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_USEPOTION>.Read(buf, this);
            }
        }
        public class MSG_USERECIPE : INetworkMessage
        {
            public const byte c_messageID = 214;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("RecipeName", DMLType.STR)] public ByteString m_recipeName;
            [DMLField("FinalItemID", DMLType.GID)] public GID m_finalItemID;
            [DMLField("Error", DMLType.UINT)] public uint m_error;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_USERECIPE>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_USERECIPE>.Read(buf, this);
            }
        }
        public class MSG_WIZGAMESTATS : INetworkMessage
        {
            public const byte c_messageID = 215;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("GlobalID", DMLType.GID)] public GID m_globalID;
            [DMLField("Data", DMLType.STR)] public ByteString m_data;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_WIZGAMESTATS>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_WIZGAMESTATS>.Read(buf, this);
            }
        }
        public class MSG_WIZINVENTORYCLIENTADD : INetworkMessage
        {
            public const byte c_messageID = 216;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("GlobalID", DMLType.GID)] public GID m_globalID;
            [DMLField("SerializedItem", DMLType.STR)] public ByteString m_serializedItem;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_WIZINVENTORYCLIENTADD>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_WIZINVENTORYCLIENTADD>.Read(buf, this);
            }
        }
        public class MSG_WIZINVENTORYCLIENTREMOVE : INetworkMessage
        {
            public const byte c_messageID = 217;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("GlobalID", DMLType.GID)] public GID m_globalID;
            [DMLField("ItemID", DMLType.GID)] public GID m_itemID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_WIZINVENTORYCLIENTREMOVE>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_WIZINVENTORYCLIENTREMOVE>.Read(buf, this);
            }
        }
        public class MSG_WORLDTELEPORTLIST : INetworkMessage
        {
            public const byte c_messageID = 218;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("GlobalID", DMLType.GID)] public GID m_globalID;
            [DMLField("Data", DMLType.STR)] public ByteString m_data;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_WORLDTELEPORTLIST>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_WORLDTELEPORTLIST>.Read(buf, this);
            }
        }
        public class MSG_WORLDTELEPORTREQUEST : INetworkMessage
        {
            public const byte c_messageID = 219;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("TeleportID", DMLType.GID)] public GID m_teleportID;
            [DMLField("World", DMLType.STR)] public ByteString m_world;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_WORLDTELEPORTREQUEST>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_WORLDTELEPORTREQUEST>.Read(buf, this);
            }
        }
        
        public bool Dispatch(object handlerVoid, INetworkMessage message)
        {
            Debug.Assert(message.GetServiceID() == c_serviceID);
            var handler = (Handler)handlerVoid;
            
            switch (message.GetID())
            {
                case MSG_ACCEPTQUESTBOGUS.c_messageID:
                    return handler.NetHandleAcceptQuestBogus((MSG_ACCEPTQUESTBOGUS)message);
                case MSG_ACCESSPASSBUYCONFIRM.c_messageID:
                    return handler.NetHandleAccessPassBuyConfirm((MSG_ACCESSPASSBUYCONFIRM)message);
                case MSG_ACCESSPASSBUYREQUEST.c_messageID:
                    return handler.NetHandleAccessPassBuyRequest((MSG_ACCESSPASSBUYREQUEST)message);
                case MSG_ACCESSPASSDECLINED.c_messageID:
                    return handler.NetHandleAccessPassDeclined((MSG_ACCESSPASSDECLINED)message);
                case MSG_ACCESSPASSINFOREQUEST.c_messageID:
                    return handler.NetHandleAccessPassInfoRequest((MSG_ACCESSPASSINFOREQUEST)message);
                case MSG_ACCESSPASSOFFER.c_messageID:
                    return handler.NetHandleAccessPassOffer((MSG_ACCESSPASSOFFER)message);
                case MSG_ACCESSPASSREJECTED.c_messageID:
                    return handler.NetHandleAccessPassRejected((MSG_ACCESSPASSREJECTED)message);
                case MSG_ACTORDIALOG.c_messageID:
                    return handler.NetHandleActorDialog((MSG_ACTORDIALOG)message);
                case MSG_ADDQUESTFINDER.c_messageID:
                    return handler.NetHandleAddQuestFinder((MSG_ADDQUESTFINDER)message);
                case MSG_ADDSPELLTOBOOK.c_messageID:
                    return handler.NetHandleAddSpellToBook((MSG_ADDSPELLTOBOOK)message);
                case MSG_ADDSPELLTODECK.c_messageID:
                    return handler.NetHandleAddSpellToDeck((MSG_ADDSPELLTODECK)message);
                case MSG_ADDTREASURESPELLTOBOOK.c_messageID:
                    return handler.NetHandleAddTreasureSpellToBook((MSG_ADDTREASURESPELLTOBOOK)message);
                case MSG_ADDTREASURESPELLTODECK.c_messageID:
                    return handler.NetHandleAddTreasureSpellToDeck((MSG_ADDTREASURESPELLTODECK)message);
                case MSG_AGGRO.c_messageID:
                    return handler.NetHandleAggro((MSG_AGGRO)message);
                case MSG_ALCHEMYSTATION.c_messageID:
                    return handler.NetHandleAlchemyStation((MSG_ALCHEMYSTATION)message);
                case MSG_ARENAERROR.c_messageID:
                    return handler.NetHandleArenaError((MSG_ARENAERROR)message);
                case MSG_AUCTIONHOUSECONTENTS.c_messageID:
                    return handler.NetHandleAuctionHouseContents((MSG_AUCTIONHOUSECONTENTS)message);
                case MSG_AUCTIONHOUSEMOREACKNOWLEDGEMENT.c_messageID:
                    return handler.NetHandleAuctionHouseMoreAcknowledgement((MSG_AUCTIONHOUSEMOREACKNOWLEDGEMENT)message);
                case MSG_AUCTIONHOUSEREQUEST.c_messageID:
                    return handler.NetHandleAuctionHouseRequest((MSG_AUCTIONHOUSEREQUEST)message);
                case MSG_AUCTIONREQUESTBANK.c_messageID:
                    return handler.NetHandleAuctionRequestBank((MSG_AUCTIONREQUESTBANK)message);
                case MSG_AUCTIONRESPONSE.c_messageID:
                    return handler.NetHandleAuctionResponse((MSG_AUCTIONRESPONSE)message);
                case MSG_BANKDELETE.c_messageID:
                    return handler.NetHandleBankDelete((MSG_BANKDELETE)message);
                case MSG_BANKDELETECONFIRM.c_messageID:
                    return handler.NetHandleBankDeleteConfirm((MSG_BANKDELETECONFIRM)message);
                case MSG_BANKTOINVCONFIRM.c_messageID:
                    return handler.NetHandleBankToInvConfirm((MSG_BANKTOINVCONFIRM)message);
                case MSG_BOOSTERDISTRIBUTIONRESULTS.c_messageID:
                    return handler.NetHandleBoosterDistributionResults((MSG_BOOSTERDISTRIBUTIONRESULTS)message);
                case MSG_BRACKETREPORT.c_messageID:
                    return handler.NetHandleBracketReport((MSG_BRACKETREPORT)message);
                case MSG_BUYENERGYCONFIRM.c_messageID:
                    return handler.NetHandleBuyEnergyConfirm((MSG_BUYENERGYCONFIRM)message);
                case MSG_CHATFILTERBLACK.c_messageID:
                    return handler.NetHandleChatFilterBlack((MSG_CHATFILTERBLACK)message);
                case MSG_CHATFILTERWHITE.c_messageID:
                    return handler.NetHandleChatFilterWhite((MSG_CHATFILTERWHITE)message);
                case MSG_CHOOSEFOCUS.c_messageID:
                    return handler.NetHandleChooseFocus((MSG_CHOOSEFOCUS)message);
                case MSG_CLEARALLCRAFTINGSLOTS.c_messageID:
                    return handler.NetHandleClearAllCraftingSlots((MSG_CLEARALLCRAFTINGSLOTS)message);
                case MSG_CLEAR_EQUIPPED_DECK.c_messageID:
                    return handler.NetHandleClearEquippedDeck((MSG_CLEAR_EQUIPPED_DECK)message);
                case MSG_COMPLETEDIALOG.c_messageID:
                    return handler.NetHandleCompleteDialog((MSG_COMPLETEDIALOG)message);
                case MSG_CONTROLMUSIC.c_messageID:
                    return handler.NetHandleControlMusic((MSG_CONTROLMUSIC)message);
                case MSG_CRAFTINGSLOTADD.c_messageID:
                    return handler.NetHandleCraftingSlotAdd((MSG_CRAFTINGSLOTADD)message);
                case MSG_CRAFTINGSLOTCOUNT.c_messageID:
                    return handler.NetHandleCraftingSlotCount((MSG_CRAFTINGSLOTCOUNT)message);
                case MSG_CRAFTINGSLOTREMOVE.c_messageID:
                    return handler.NetHandleCraftingSlotRemove((MSG_CRAFTINGSLOTREMOVE)message);
                case MSG_CREATEBOOSTERDISTRIBUTION.c_messageID:
                    return handler.NetHandleCreateBoosterDistribution((MSG_CREATEBOOSTERDISTRIBUTION)message);
                case MSG_CROWNBALANCE.c_messageID:
                    return handler.NetHandleCrownBalance((MSG_CROWNBALANCE)message);
                case MSG_CROWNSBUYCONFIRM.c_messageID:
                    return handler.NetHandleCrownsBuyConfirm((MSG_CROWNSBUYCONFIRM)message);
                case MSG_CROWNSBUYREQUEST.c_messageID:
                    return handler.NetHandleCrownsBuyRequest((MSG_CROWNSBUYREQUEST)message);
                case MSG_CROWNSERVICESOPEN.c_messageID:
                    return handler.NetHandleCrownServicesOpen((MSG_CROWNSERVICESOPEN)message);
                case MSG_CSRCROWNBALANCE.c_messageID:
                    return handler.NetHandleCSRCrownBalance((MSG_CSRCROWNBALANCE)message);
                case MSG_CSR_REQUEST_BLOBS.c_messageID:
                    return handler.NetHandleCSRRequestBlobs((MSG_CSR_REQUEST_BLOBS)message);
                case MSG_DISMISSTUTORIALTIP.c_messageID:
                    return handler.NetHandleDismissTutorialTip((MSG_DISMISSTUTORIALTIP)message);
                case MSG_DONESHOPPING.c_messageID:
                    return handler.NetHandleDoneShopping((MSG_DONESHOPPING)message);
                case MSG_DUELSIMRESULT.c_messageID:
                    return handler.NetHandleDuelSimResult((MSG_DUELSIMRESULT)message);
                case MSG_DYECONFIRM.c_messageID:
                    return handler.NetHandleDyeConfirm((MSG_DYECONFIRM)message);
                case MSG_DYEREQUEST.c_messageID:
                    return handler.NetHandleDyeRequest((MSG_DYEREQUEST)message);
                case MSG_DYESHOPOPEN.c_messageID:
                    return handler.NetHandleDyeShopOpen((MSG_DYESHOPOPEN)message);
                case MSG_ELIXIRSTATECHANGE.c_messageID:
                    return handler.NetHandleElixirStateChange((MSG_ELIXIRSTATECHANGE)message);
                case MSG_ENCOUNTERDIALOG.c_messageID:
                    return handler.NetHandleEncounterDialog((MSG_ENCOUNTERDIALOG)message);
                case MSG_ENERGYBUYREQUEST.c_messageID:
                    return handler.NetHandleEnergyBuyRequest((MSG_ENERGYBUYREQUEST)message);
                case MSG_ENERGYSHOPOPEN.c_messageID:
                    return handler.NetHandleEnergyShopOpen((MSG_ENERGYSHOPOPEN)message);
                case MSG_ENTERMINIGAME.c_messageID:
                    return handler.NetHandleEnterMinigame((MSG_ENTERMINIGAME)message);
                case MSG_EXITCONFIRMTELEPORT.c_messageID:
                    return handler.NetHandleExitConfirmTeleport((MSG_EXITCONFIRMTELEPORT)message);
                case MSG_EXPANDPVPSEARCH.c_messageID:
                    return handler.NetHandleExpandPvPSearch((MSG_EXPANDPVPSEARCH)message);
                case MSG_FREETOURNEYCREDITINFO.c_messageID:
                    return handler.NetHandleFreeTourneyCreditInfo((MSG_FREETOURNEYCREDITINFO)message);
                case MSG_GETSNACKLIST.c_messageID:
                    return handler.NetHandleGetSnackList((MSG_GETSNACKLIST)message);
                case MSG_GETSUBSCRIBERONLYITEMS.c_messageID:
                    return handler.NetHandleGetSubscriberOnlyItems((MSG_GETSUBSCRIBERONLYITEMS)message);
                case MSG_GETTIMEDACCESSPASSES.c_messageID:
                    return handler.NetHandleGetTimedAccessPasses((MSG_GETTIMEDACCESSPASSES)message);
                case MSG_GOHOME.c_messageID:
                    return handler.NetHandleGoHome((MSG_GOHOME)message);
                case MSG_GOTODORM.c_messageID:
                    return handler.NetHandleGotoDorm((MSG_GOTODORM)message);
                case MSG_INTERACTAVAILABLEQUEST.c_messageID:
                    return handler.NetHandleInteractAvailableQuest((MSG_INTERACTAVAILABLEQUEST)message);
                case MSG_INTERACTCOMPLETEGOAL.c_messageID:
                    return handler.NetHandleInteractCompleteGoal((MSG_INTERACTCOMPLETEGOAL)message);
                case MSG_INTERACTUNDERWAYQUEST.c_messageID:
                    return handler.NetHandleInteractUnderwayQuest((MSG_INTERACTUNDERWAYQUEST)message);
                case MSG_INVTOBANKCONFIRM.c_messageID:
                    return handler.NetHandleInvToBankConfirm((MSG_INVTOBANKCONFIRM)message);
                case MSG_ITEMDROP.c_messageID:
                    return handler.NetHandleItemDrop((MSG_ITEMDROP)message);
                case MSG_ITEMLOCK.c_messageID:
                    return handler.NetHandleItemLock((MSG_ITEMLOCK)message);
                case MSG_ITEMOVERFLOWTOBANK.c_messageID:
                    return handler.NetHandleItemOverflowToBank((MSG_ITEMOVERFLOWTOBANK)message);
                case MSG_LEADERBOARDFRIENDREQUEST.c_messageID:
                    return handler.NetHandleLeaderboardFriendRequest((MSG_LEADERBOARDFRIENDREQUEST)message);
                case MSG_LEADERBOARDREQUEST.c_messageID:
                    return handler.NetHandleLeaderboardRequest((MSG_LEADERBOARDREQUEST)message);
                case MSG_LEADERBOARDRESPONSE.c_messageID:
                    return handler.NetHandleLeaderboardResponse((MSG_LEADERBOARDRESPONSE)message);
                case MSG_LEASH.c_messageID:
                    return handler.NetHandleLeash((MSG_LEASH)message);
                case MSG_LEASHOFFSET.c_messageID:
                    return handler.NetHandleLeashOffset((MSG_LEASHOFFSET)message);
                case MSG_LEAVEMINIGAME.c_messageID:
                    return handler.NetHandleLeaveMinigame((MSG_LEAVEMINIGAME)message);
                case MSG_LEAVESIGILTIMERWAITING.c_messageID:
                    return handler.NetHandleLeaveSigilTimerWaiting((MSG_LEAVESIGILTIMERWAITING)message);
                case MSG_LEVELUP.c_messageID:
                    return handler.NetHandleLevelUp((MSG_LEVELUP)message);
                case MSG_LOGCLIENTRESOLUTION.c_messageID:
                    return handler.NetHandleLogClientResolution((MSG_LOGCLIENTRESOLUTION)message);
                case MSG_LOGOFFER.c_messageID:
                    return handler.NetHandleLogOffer((MSG_LOGOFFER)message);
                case MSG_LOOT.c_messageID:
                    return handler.NetHandleLoot((MSG_LOOT)message);
                case MSG_MINIGAMEKIOSK.c_messageID:
                    return handler.NetHandleMinigameKiosk((MSG_MINIGAMEKIOSK)message);
                case MSG_MINIGAMEREWARDS.c_messageID:
                    return handler.NetHandleMinigameRewards((MSG_MINIGAMEREWARDS)message);
                case MSG_MINIGAMESELECT.c_messageID:
                    return handler.NetHandleMinigameSelect((MSG_MINIGAMESELECT)message);
                case MSG_MINIGAMETIMEREND.c_messageID:
                    return handler.NetHandleMinigameTimerEnd((MSG_MINIGAMETIMEREND)message);
                case MSG_MINIGAMETIMERSTART.c_messageID:
                    return handler.NetHandleMinigameTimerStart((MSG_MINIGAMETIMERSTART)message);
                case MSG_MOVEBANKTOBANK.c_messageID:
                    return handler.NetHandleMoveBankToBank((MSG_MOVEBANKTOBANK)message);
                case MSG_MOVEBANKTOINV.c_messageID:
                    return handler.NetHandleMoveBankToInv((MSG_MOVEBANKTOINV)message);
                case MSG_MOVEINVTOBANK.c_messageID:
                    return handler.NetHandleMoveInvToBank((MSG_MOVEINVTOBANK)message);
                case MSG_NEWTITLE.c_messageID:
                    return handler.NetHandleNewTitle((MSG_NEWTITLE)message);
                case MSG_NOTIFYSCHOOLFOCUS.c_messageID:
                    return handler.NetHandleNotifySchoolFocus((MSG_NOTIFYSCHOOLFOCUS)message);
                case MSG_OPENBANK.c_messageID:
                    return handler.NetHandleOpenBank((MSG_OPENBANK)message);
                case MSG_PAID_LOOT_CROWNS_BALANCE.c_messageID:
                    return handler.NetHandlePaidLootCrownsBalance((MSG_PAID_LOOT_CROWNS_BALANCE)message);
                case MSG_PAID_LOOT_ROLL_ERROR.c_messageID:
                    return handler.NetHandlePaidLootRollError((MSG_PAID_LOOT_ROLL_ERROR)message);
                case MSG_PAID_LOOT_ROLL_PROMPT.c_messageID:
                    return handler.NetHandlePaidLootRollPrompt((MSG_PAID_LOOT_ROLL_PROMPT)message);
                case MSG_PAID_LOOT_ROLL_RESPONSE.c_messageID:
                    return handler.NetHandlePaidLootRollResponse((MSG_PAID_LOOT_ROLL_RESPONSE)message);
                case MSG_PAID_LOOT_ROLL_RESULT.c_messageID:
                    return handler.NetHandlePaidLootRollResult((MSG_PAID_LOOT_ROLL_RESULT)message);
                case MSG_PATCHINGBLOCKED.c_messageID:
                    return handler.NetHandlePatchingBlocked((MSG_PATCHINGBLOCKED)message);
                case MSG_PCS_LIST_REQUEST.c_messageID:
                    return handler.NetHandlePCSListRequest((MSG_PCS_LIST_REQUEST)message);
                case MSG_PCS_LIST_RESPONSE.c_messageID:
                    return handler.NetHandlePCSListResponse((MSG_PCS_LIST_RESPONSE)message);
                case MSG_PCS_PATCH.c_messageID:
                    return handler.NetHandlePCS_PATCH((MSG_PCS_PATCH)message);
                case MSG_PCS_PRICE_LOCK_REQUEST.c_messageID:
                    return handler.NetHandlePCSPriceLockRequest((MSG_PCS_PRICE_LOCK_REQUEST)message);
                case MSG_PCS_PRICE_LOCK_RESPONSE.c_messageID:
                    return handler.NetHandlePCSPriceLockResponse((MSG_PCS_PRICE_LOCK_RESPONSE)message);
                case MSG_PCS_PURCHASE_REQUEST.c_messageID:
                    return handler.NetHandlePCSPurchaseRequest((MSG_PCS_PURCHASE_REQUEST)message);
                case MSG_PCS_PURCHASE_RESPONSE.c_messageID:
                    return handler.NetHandlePCSPurchaseResponse((MSG_PCS_PURCHASE_RESPONSE)message);
                case MSG_PETGAMEKIOSK.c_messageID:
                    return handler.NetHandlePetGameKiosk((MSG_PETGAMEKIOSK)message);
                case MSG_PETHATCHCREATE.c_messageID:
                    return handler.NetHandlePetHatchCreate((MSG_PETHATCHCREATE)message);
                case MSG_PETHATCHJOINSTATUS.c_messageID:
                    return handler.NetHandlePetHatchJoinStatus((MSG_PETHATCHJOINSTATUS)message);
                case MSG_PETHATCHREADYSTATUS.c_messageID:
                    return handler.NetHandlePetHatchReadyStatus((MSG_PETHATCHREADYSTATUS)message);
                case MSG_PETHATCHREQUEST.c_messageID:
                    return handler.NetHandlePetHatchRequest((MSG_PETHATCHREQUEST)message);
                case MSG_PETHATCHRESULT.c_messageID:
                    return handler.NetHandlePetHatchResult((MSG_PETHATCHRESULT)message);
                case MSG_PETRENAMECONFIRM.c_messageID:
                    return handler.NetHandlePetRenameConfirm((MSG_PETRENAMECONFIRM)message);
                case MSG_PETRENAMEREQUEST.c_messageID:
                    return handler.NetHandlePetRenameRequest((MSG_PETRENAMEREQUEST)message);
                case MSG_PLAYERARRIVED.c_messageID:
                    return handler.NetHandlePlayerArrived((MSG_PLAYERARRIVED)message);
                case MSG_PLAYERWIZBANG.c_messageID:
                    return handler.NetHandlePlayerWizbang((MSG_PLAYERWIZBANG)message);
                case MSG_PLAYMUSIC.c_messageID:
                    return handler.NetHandlePlayMusic((MSG_PLAYMUSIC)message);
                case MSG_POTIONBUYCONFIRM.c_messageID:
                    return handler.NetHandlePotionBuyConfirm((MSG_POTIONBUYCONFIRM)message);
                case MSG_POTIONBUYREQUEST.c_messageID:
                    return handler.NetHandlePotionBuyRequest((MSG_POTIONBUYREQUEST)message);
                case MSG_POTIONSHOPOPEN.c_messageID:
                    return handler.NetHandlePotionShopOpen((MSG_POTIONSHOPOPEN)message);
                case MSG_PRELEADERBOARD.c_messageID:
                    return handler.NetHandlePreLeaderboard((MSG_PRELEADERBOARD)message);
                case MSG_PREMIUMCONTENT.c_messageID:
                    return handler.NetHandlePremiumContent((MSG_PREMIUMCONTENT)message);
                case MSG_PREPVPKIOSK.c_messageID:
                    return handler.NetHandlePrePvPKiosk((MSG_PREPVPKIOSK)message);
                case MSG_PVPCONFIRM.c_messageID:
                    return handler.NetHandlePvPConfirm((MSG_PVPCONFIRM)message);
                case MSG_PVPCONFIRMTOURNEY.c_messageID:
                    return handler.NetHandlePvPConfirmTourney((MSG_PVPCONFIRMTOURNEY)message);
                case MSG_PVPINTENT.c_messageID:
                    return handler.NetHandlePvPIntent((MSG_PVPINTENT)message);
                case MSG_PVPISSUETOURNEYCREDIT.c_messageID:
                    return handler.NetHandlePvPIssueTourneyCredit((MSG_PVPISSUETOURNEYCREDIT)message);
                case MSG_PVPMATCHREQUEST.c_messageID:
                    return handler.NetHandlePvpMatchRequest((MSG_PVPMATCHREQUEST)message);
                case MSG_PVMSG_PVPREGISTERFAILEDPISSUETOURNEYCREDIT.c_messageID:
                    return handler.NetHandlePvPRegisterFailed((MSG_PVMSG_PVPREGISTERFAILEDPISSUETOURNEYCREDIT)message);
                case MSG_PVPUPDATEREQUEST.c_messageID:
                    return handler.NetHandlePvPUpdateRequest((MSG_PVPUPDATEREQUEST)message);
                case MSG_QUESTDIALOG.c_messageID:
                    return handler.NetHandleQuestDialog((MSG_QUESTDIALOG)message);
                case MSG_QUESTFINDEROPTION.c_messageID:
                    return handler.NetHandleQuestFinderOption((MSG_QUESTFINDEROPTION)message);
                case MSG_QUESTREWARDS.c_messageID:
                    return handler.NetHandleQuestRewards((MSG_QUESTREWARDS)message);
                case MSG_QUICKSELLREQUESTBANK.c_messageID:
                    return handler.NetHandleQuickSellRequestBank((MSG_QUICKSELLREQUESTBANK)message);
                case MSG_REAGENTADD.c_messageID:
                    return handler.NetHandleReagentAdd((MSG_REAGENTADD)message);
                case MSG_REAGENTREMOVE.c_messageID:
                    return handler.NetHandleReagentRemove((MSG_REAGENTREMOVE)message);
                case MSG_REAGENTREMOVEREQUEST.c_messageID:
                    return handler.NetHandleReagentRemoveRequest((MSG_REAGENTREMOVEREQUEST)message);
                case MSG_REAGENTUPDATE.c_messageID:
                    return handler.NetHandleReagentUpdate((MSG_REAGENTUPDATE)message);
                case MSG_RECIPEADD.c_messageID:
                    return handler.NetHandleRecipeAdd((MSG_RECIPEADD)message);
                case MSG_RECIPEREMOVE.c_messageID:
                    return handler.NetHandleRecipeRemove((MSG_RECIPEREMOVE)message);
                case MSG_REGISTRAR.c_messageID:
                    return handler.NetHandleRegistrar((MSG_REGISTRAR)message);
                case MSG_REMOVESPELLFROMBOOK.c_messageID:
                    return handler.NetHandleRemoveSpellFromBook((MSG_REMOVESPELLFROMBOOK)message);
                case MSG_REMOVESPELLFROMDECK.c_messageID:
                    return handler.NetHandleRemoveSpellFromDeck((MSG_REMOVESPELLFROMDECK)message);
                case MSG_REMOVETREASURESPELLFROMBOOK.c_messageID:
                    return handler.NetHandleRemoveTreasureSpellFromBook((MSG_REMOVETREASURESPELLFROMBOOK)message);
                case MSG_REMOVETREASURESPELLFROMDECK.c_messageID:
                    return handler.NetHandleRemoveTreasureSpellFromDeck((MSG_REMOVETREASURESPELLFROMDECK)message);
                case MSG_REMOVETREASURESPELLFROMVAULT.c_messageID:
                    return handler.NetHandleRemoveTreasureSpellFromVault((MSG_REMOVETREASURESPELLFROMVAULT)message);
                case MSG_RENTALUPDATE.c_messageID:
                    return handler.NetHandleRentalUpdate((MSG_RENTALUPDATE)message);
                case MSG_REQUESTACTIVEMAPQUESTS.c_messageID:
                    return handler.NetHandleRequestActiveMapQuests((MSG_REQUESTACTIVEMAPQUESTS)message);
                case MSG_REQUESTCOMBATSIGILS.c_messageID:
                    return handler.NetHandleRequestCombatSigils((MSG_REQUESTCOMBATSIGILS)message);
                case MSG_REQUESTFRIENDFINDERCODE.c_messageID:
                    return handler.NetHandleRequestFriendFinderCode((MSG_REQUESTFRIENDFINDERCODE)message);
                case MSG_REQUESTHOUSETELEPORT.c_messageID:
                    return handler.NetHandleRequestHouseTeleport((MSG_REQUESTHOUSETELEPORT)message);
                case MSG_REQUESTNEXTCLOSESTQUEST.c_messageID:
                    return handler.NetHandleRequestNextClosestQuest((MSG_REQUESTNEXTCLOSESTQUEST)message);
                case MSG_REQUESTPRIVACYOPTIONS.c_messageID:
                    return handler.NetHandleRequestPrivacyOptions((MSG_REQUESTPRIVACYOPTIONS)message);
                case MSG_REQUESTPVPACTOR.c_messageID:
                    return handler.NetHandleRequestPvPActor((MSG_REQUESTPVPACTOR)message);
                case MSG_REQUESTPVPKIOSK.c_messageID:
                    return handler.NetHandleRequestPvPKiosk((MSG_REQUESTPVPKIOSK)message);
                case MSG_REQUESTQUESTDIALOG.c_messageID:
                    return handler.NetHandleRequestQuestDialog((MSG_REQUESTQUESTDIALOG)message);
                case MSG_REQUESTQUICKSELL.c_messageID:
                    return handler.NetHandleRequestQuickSell((MSG_REQUESTQUICKSELL)message);
                case MSG_REQUESTTOGGLELOCKITEM.c_messageID:
                    return handler.NetHandleRequestToggleLockItem((MSG_REQUESTTOGGLELOCKITEM)message);
                case MSG_RESPECCONFIRM.c_messageID:
                    return handler.NetHandleRespecConfirm((MSG_RESPECCONFIRM)message);
                case MSG_RESPONSEPRIVACYOPTIONS.c_messageID:
                    return handler.NetHandleResponsePrivacyOptions((MSG_RESPONSEPRIVACYOPTIONS)message);
                case MSG_RIDEMOUNT.c_messageID:
                    return handler.NetHandleRideMount((MSG_RIDEMOUNT)message);
                case MSG_SEAMSTRESSOPEN.c_messageID:
                    return handler.NetHandleSeamstressOpen((MSG_SEAMSTRESSOPEN)message);
                case MSG_SENDFRIENDFINDERCODE.c_messageID:
                    return handler.NetHandleSendFriendFinderCode((MSG_SENDFRIENDFINDERCODE)message);
                case MSG_SENDTALENTDATACSR.c_messageID:
                    return handler.NetHandleSendTalentDataCSR((MSG_SENDTALENTDATACSR)message);
                case MSG_SETDECKNAME.c_messageID:
                    return handler.NetHandleSetDeckName((MSG_SETDECKNAME)message);
                case MSG_SETDONTALLOWFRIENDFINDERCODES.c_messageID:
                    return handler.NetHandleDontAllowFriendFinderCodes((MSG_SETDONTALLOWFRIENDFINDERCODES)message);
                case MSG_SETRENTALTIMER.c_messageID:
                    return handler.NetHandleSetRentalTimer((MSG_SETRENTALTIMER)message);
                case MSG_SHOPBUYCONFIRM.c_messageID:
                    return handler.NetHandleShopBuyConfirm((MSG_SHOPBUYCONFIRM)message);
                case MSG_SHOPBUYREQUEST.c_messageID:
                    return handler.NetHandleShopBuyRequest((MSG_SHOPBUYREQUEST)message);
                case MSG_SHOPLIST.c_messageID:
                    return handler.NetHandleShopList((MSG_SHOPLIST)message);
                case MSG_SHOPSELLCONFIRM.c_messageID:
                    return handler.NetHandleShopSellConfirm((MSG_SHOPSELLCONFIRM)message);
                case MSG_SHOPSELLREQUEST.c_messageID:
                    return handler.NetHandleShopSellRequest((MSG_SHOPSELLREQUEST)message);
                case MSG_SHOWCASEDSTOREITEMINFO.c_messageID:
                    return handler.NetHandleShowcasedStoreItemInfo((MSG_SHOWCASEDSTOREITEMINFO)message);
                case MSG_SHOWCLIENTMESSAGEBOX.c_messageID:
                    return handler.NetHandleShowClientMessageBox((MSG_SHOWCLIENTMESSAGEBOX)message);
                case MSG_SHOWGUI.c_messageID:
                    return handler.NetHandleShowGUI((MSG_SHOWGUI)message);
                case MSG_SNACKLIST.c_messageID:
                    return handler.NetHandleSnackList((MSG_SNACKLIST)message);
                case MSG_SPELLLIST.c_messageID:
                    return handler.NetHandleSpellList((MSG_SPELLLIST)message);
                case MSG_SPELLTRAINCOMPLETE.c_messageID:
                    return handler.NetHandleSpellTrainComplete((MSG_SPELLTRAINCOMPLETE)message);
                case MSG_STARTRIDE.c_messageID:
                    return handler.NetHandleStartRide((MSG_STARTRIDE)message);
                case MSG_STITCHITEMS.c_messageID:
                    return handler.NetHandleStitchItems((MSG_STITCHITEMS)message);
                case MSG_STITCHITEMSCONFIRM.c_messageID:
                    return handler.NetHandleStitchItemsConfirm((MSG_STITCHITEMSCONFIRM)message);
                case MSG_STORAGECLIENTADD.c_messageID:
                    return handler.NetHandleStorageClientAdd((MSG_STORAGECLIENTADD)message);
                case MSG_STORAGECLIENTREMOVE.c_messageID:
                    return handler.NetHandleStorageClientRemove((MSG_STORAGECLIENTREMOVE)message);
                case MSG_SUBMITCOMBATSIGILS.c_messageID:
                    return handler.NetHandleSubmitCombatSigils((MSG_SUBMITCOMBATSIGILS)message);
                case MSG_SUBSCRIBERONLYITEMS.c_messageID:
                    return handler.NetHandleSubscriberOnlyItems((MSG_SUBSCRIBERONLYITEMS)message);
                case MSG_TIMEDACCESSPASSES.c_messageID:
                    return handler.NetHandleTimedAccessPasses((MSG_TIMEDACCESSPASSES)message);
                case MSG_TRADE_CHANGE_ITEM.c_messageID:
                    return handler.NetHandleTradeChangeItem((MSG_TRADE_CHANGE_ITEM)message);
                case MSG_TRADE_CHANGE_MONEY.c_messageID:
                    return handler.NetHandleTradeChangeMoney((MSG_TRADE_CHANGE_MONEY)message);
                case MSG_TRADE_CREATE.c_messageID:
                    return handler.NetHandleTradeCreate((MSG_TRADE_CREATE)message);
                case MSG_TRADE_JOIN_STATUS.c_messageID:
                    return handler.NetHandleTradeJoinStatus((MSG_TRADE_JOIN_STATUS)message);
                case MSG_TRADE_READY_STATUS.c_messageID:
                    return handler.NetHandleTradeReadyStatus((MSG_TRADE_READY_STATUS)message);
                case MSG_TRADE_REQUEST.c_messageID:
                    return handler.NetHandleTradeRequest((MSG_TRADE_REQUEST)message);
                case MSG_TRADE_RESULT.c_messageID:
                    return handler.NetHandleTradeResult((MSG_TRADE_RESULT)message);
                case MSG_TRAIN.c_messageID:
                    return handler.NetHandleTrain((MSG_TRAIN)message);
                case MSG_TREASUREBUY.c_messageID:
                    return handler.NetHandleTreasureBuy((MSG_TREASUREBUY)message);
                case MSG_TREASUREBUYCONFIRM.c_messageID:
                    return handler.NetHandleTreasureBuyConfirm((MSG_TREASUREBUYCONFIRM)message);
                case MSG_TREASURESHOPLIST.c_messageID:
                    return handler.NetHandleTreasureShopList((MSG_TREASURESHOPLIST)message);
                case MSG_TUTORIALEVENT.c_messageID:
                    return handler.NetHandleTutorialEvent((MSG_TUTORIALEVENT)message);
                case MSG_UNSTITCHITEMS.c_messageID:
                    return handler.NetHandleUnstitchItems((MSG_UNSTITCHITEMS)message);
                case MSG_UNSTITCHOPEN.c_messageID:
                    return handler.NetHandleUnstitchOpen((MSG_UNSTITCHOPEN)message);
                case MSG_UPDATEARENAPOINTS.c_messageID:
                    return handler.NetHandleUpdateArenaPoints((MSG_UPDATEARENAPOINTS)message);
                case MSG_UPDATEGENDER.c_messageID:
                    return handler.NetHandleUpdateGender((MSG_UPDATEGENDER)message);
                case MSG_UPDATEGOLD.c_messageID:
                    return handler.NetHandleUpdateGold((MSG_UPDATEGOLD)message);
                case MSG_UPDATEHEALTH.c_messageID:
                    return handler.NetHandleUpdateHealth((MSG_UPDATEHEALTH)message);
                case MSG_UPDATEMANA.c_messageID:
                    return handler.NetHandleUpdateMana((MSG_UPDATEMANA)message);
                case MSG_UPDATEPOTIONS.c_messageID:
                    return handler.NetHandleUpdatePotions((MSG_UPDATEPOTIONS)message);
                case MSG_UPDATEPOWERPIP.c_messageID:
                    return handler.NetHandleUpdatePowerPip((MSG_UPDATEPOWERPIP)message);
                case MSG_UPDATEPRIVACYOPTIONS.c_messageID:
                    return handler.NetHandleUpdatePrivacyOptions((MSG_UPDATEPRIVACYOPTIONS)message);
                case MSG_UPDATESCHOOL.c_messageID:
                    return handler.NetHandleUpdateSchool((MSG_UPDATESCHOOL)message);
                case MSG_UPDATETRAINING.c_messageID:
                    return handler.NetHandleUpdateTraining((MSG_UPDATETRAINING)message);
                case MSG_UPDATEXP.c_messageID:
                    return handler.NetHandleUpdateXP((MSG_UPDATEXP)message);
                case MSG_USEFRIENDFINDERCODE.c_messageID:
                    return handler.NetHandleUseFriendFinderCode((MSG_USEFRIENDFINDERCODE)message);
                case MSG_USEFRIENDFINDERCODERESPONSE.c_messageID:
                    return handler.NetHandleUseFriendFinderCodeResponse((MSG_USEFRIENDFINDERCODERESPONSE)message);
                case MSG_USEPOTION.c_messageID:
                    return handler.NetHandleUsePotion((MSG_USEPOTION)message);
                case MSG_USERECIPE.c_messageID:
                    return handler.NetHandleUseRecipe((MSG_USERECIPE)message);
                case MSG_WIZGAMESTATS.c_messageID:
                    return handler.NetHandleWizGameStats((MSG_WIZGAMESTATS)message);
                case MSG_WIZINVENTORYCLIENTADD.c_messageID:
                    return handler.NetHandleWizInventoryClientAdd((MSG_WIZINVENTORYCLIENTADD)message);
                case MSG_WIZINVENTORYCLIENTREMOVE.c_messageID:
                    return handler.NetHandleWizInventoryClientRemove((MSG_WIZINVENTORYCLIENTREMOVE)message);
                case MSG_WORLDTELEPORTLIST.c_messageID:
                    return handler.NetHandleWorldTeleportList((MSG_WORLDTELEPORTLIST)message);
                case MSG_WORLDTELEPORTREQUEST.c_messageID:
                    return handler.NetHandleWorldTeleportRequest((MSG_WORLDTELEPORTREQUEST)message);
            }
            return false;
        }
        
        public INetworkMessage AllocateMessage(byte id)
        {
            switch (id)
            {
                case MSG_ACCEPTQUESTBOGUS.c_messageID: return new MSG_ACCEPTQUESTBOGUS();
                case MSG_ACCESSPASSBUYCONFIRM.c_messageID: return new MSG_ACCESSPASSBUYCONFIRM();
                case MSG_ACCESSPASSBUYREQUEST.c_messageID: return new MSG_ACCESSPASSBUYREQUEST();
                case MSG_ACCESSPASSDECLINED.c_messageID: return new MSG_ACCESSPASSDECLINED();
                case MSG_ACCESSPASSINFOREQUEST.c_messageID: return new MSG_ACCESSPASSINFOREQUEST();
                case MSG_ACCESSPASSOFFER.c_messageID: return new MSG_ACCESSPASSOFFER();
                case MSG_ACCESSPASSREJECTED.c_messageID: return new MSG_ACCESSPASSREJECTED();
                case MSG_ACTORDIALOG.c_messageID: return new MSG_ACTORDIALOG();
                case MSG_ADDQUESTFINDER.c_messageID: return new MSG_ADDQUESTFINDER();
                case MSG_ADDSPELLTOBOOK.c_messageID: return new MSG_ADDSPELLTOBOOK();
                case MSG_ADDSPELLTODECK.c_messageID: return new MSG_ADDSPELLTODECK();
                case MSG_ADDTREASURESPELLTOBOOK.c_messageID: return new MSG_ADDTREASURESPELLTOBOOK();
                case MSG_ADDTREASURESPELLTODECK.c_messageID: return new MSG_ADDTREASURESPELLTODECK();
                case MSG_AGGRO.c_messageID: return new MSG_AGGRO();
                case MSG_ALCHEMYSTATION.c_messageID: return new MSG_ALCHEMYSTATION();
                case MSG_ARENAERROR.c_messageID: return new MSG_ARENAERROR();
                case MSG_AUCTIONHOUSECONTENTS.c_messageID: return new MSG_AUCTIONHOUSECONTENTS();
                case MSG_AUCTIONHOUSEMOREACKNOWLEDGEMENT.c_messageID: return new MSG_AUCTIONHOUSEMOREACKNOWLEDGEMENT();
                case MSG_AUCTIONHOUSEREQUEST.c_messageID: return new MSG_AUCTIONHOUSEREQUEST();
                case MSG_AUCTIONREQUESTBANK.c_messageID: return new MSG_AUCTIONREQUESTBANK();
                case MSG_AUCTIONRESPONSE.c_messageID: return new MSG_AUCTIONRESPONSE();
                case MSG_BANKDELETE.c_messageID: return new MSG_BANKDELETE();
                case MSG_BANKDELETECONFIRM.c_messageID: return new MSG_BANKDELETECONFIRM();
                case MSG_BANKTOINVCONFIRM.c_messageID: return new MSG_BANKTOINVCONFIRM();
                case MSG_BOOSTERDISTRIBUTIONRESULTS.c_messageID: return new MSG_BOOSTERDISTRIBUTIONRESULTS();
                case MSG_BRACKETREPORT.c_messageID: return new MSG_BRACKETREPORT();
                case MSG_BUYENERGYCONFIRM.c_messageID: return new MSG_BUYENERGYCONFIRM();
                case MSG_CHATFILTERBLACK.c_messageID: return new MSG_CHATFILTERBLACK();
                case MSG_CHATFILTERWHITE.c_messageID: return new MSG_CHATFILTERWHITE();
                case MSG_CHOOSEFOCUS.c_messageID: return new MSG_CHOOSEFOCUS();
                case MSG_CLEARALLCRAFTINGSLOTS.c_messageID: return new MSG_CLEARALLCRAFTINGSLOTS();
                case MSG_CLEAR_EQUIPPED_DECK.c_messageID: return new MSG_CLEAR_EQUIPPED_DECK();
                case MSG_COMPLETEDIALOG.c_messageID: return new MSG_COMPLETEDIALOG();
                case MSG_CONTROLMUSIC.c_messageID: return new MSG_CONTROLMUSIC();
                case MSG_CRAFTINGSLOTADD.c_messageID: return new MSG_CRAFTINGSLOTADD();
                case MSG_CRAFTINGSLOTCOUNT.c_messageID: return new MSG_CRAFTINGSLOTCOUNT();
                case MSG_CRAFTINGSLOTREMOVE.c_messageID: return new MSG_CRAFTINGSLOTREMOVE();
                case MSG_CREATEBOOSTERDISTRIBUTION.c_messageID: return new MSG_CREATEBOOSTERDISTRIBUTION();
                case MSG_CROWNBALANCE.c_messageID: return new MSG_CROWNBALANCE();
                case MSG_CROWNSBUYCONFIRM.c_messageID: return new MSG_CROWNSBUYCONFIRM();
                case MSG_CROWNSBUYREQUEST.c_messageID: return new MSG_CROWNSBUYREQUEST();
                case MSG_CROWNSERVICESOPEN.c_messageID: return new MSG_CROWNSERVICESOPEN();
                case MSG_CSRCROWNBALANCE.c_messageID: return new MSG_CSRCROWNBALANCE();
                case MSG_CSR_REQUEST_BLOBS.c_messageID: return new MSG_CSR_REQUEST_BLOBS();
                case MSG_DISMISSTUTORIALTIP.c_messageID: return new MSG_DISMISSTUTORIALTIP();
                case MSG_DONESHOPPING.c_messageID: return new MSG_DONESHOPPING();
                case MSG_DUELSIMRESULT.c_messageID: return new MSG_DUELSIMRESULT();
                case MSG_DYECONFIRM.c_messageID: return new MSG_DYECONFIRM();
                case MSG_DYEREQUEST.c_messageID: return new MSG_DYEREQUEST();
                case MSG_DYESHOPOPEN.c_messageID: return new MSG_DYESHOPOPEN();
                case MSG_ELIXIRSTATECHANGE.c_messageID: return new MSG_ELIXIRSTATECHANGE();
                case MSG_ENCOUNTERDIALOG.c_messageID: return new MSG_ENCOUNTERDIALOG();
                case MSG_ENERGYBUYREQUEST.c_messageID: return new MSG_ENERGYBUYREQUEST();
                case MSG_ENERGYSHOPOPEN.c_messageID: return new MSG_ENERGYSHOPOPEN();
                case MSG_ENTERMINIGAME.c_messageID: return new MSG_ENTERMINIGAME();
                case MSG_EXITCONFIRMTELEPORT.c_messageID: return new MSG_EXITCONFIRMTELEPORT();
                case MSG_EXPANDPVPSEARCH.c_messageID: return new MSG_EXPANDPVPSEARCH();
                case MSG_FREETOURNEYCREDITINFO.c_messageID: return new MSG_FREETOURNEYCREDITINFO();
                case MSG_GETSNACKLIST.c_messageID: return new MSG_GETSNACKLIST();
                case MSG_GETSUBSCRIBERONLYITEMS.c_messageID: return new MSG_GETSUBSCRIBERONLYITEMS();
                case MSG_GETTIMEDACCESSPASSES.c_messageID: return new MSG_GETTIMEDACCESSPASSES();
                case MSG_GOHOME.c_messageID: return new MSG_GOHOME();
                case MSG_GOTODORM.c_messageID: return new MSG_GOTODORM();
                case MSG_INTERACTAVAILABLEQUEST.c_messageID: return new MSG_INTERACTAVAILABLEQUEST();
                case MSG_INTERACTCOMPLETEGOAL.c_messageID: return new MSG_INTERACTCOMPLETEGOAL();
                case MSG_INTERACTUNDERWAYQUEST.c_messageID: return new MSG_INTERACTUNDERWAYQUEST();
                case MSG_INVTOBANKCONFIRM.c_messageID: return new MSG_INVTOBANKCONFIRM();
                case MSG_ITEMDROP.c_messageID: return new MSG_ITEMDROP();
                case MSG_ITEMLOCK.c_messageID: return new MSG_ITEMLOCK();
                case MSG_ITEMOVERFLOWTOBANK.c_messageID: return new MSG_ITEMOVERFLOWTOBANK();
                case MSG_LEADERBOARDFRIENDREQUEST.c_messageID: return new MSG_LEADERBOARDFRIENDREQUEST();
                case MSG_LEADERBOARDREQUEST.c_messageID: return new MSG_LEADERBOARDREQUEST();
                case MSG_LEADERBOARDRESPONSE.c_messageID: return new MSG_LEADERBOARDRESPONSE();
                case MSG_LEASH.c_messageID: return new MSG_LEASH();
                case MSG_LEASHOFFSET.c_messageID: return new MSG_LEASHOFFSET();
                case MSG_LEAVEMINIGAME.c_messageID: return new MSG_LEAVEMINIGAME();
                case MSG_LEAVESIGILTIMERWAITING.c_messageID: return new MSG_LEAVESIGILTIMERWAITING();
                case MSG_LEVELUP.c_messageID: return new MSG_LEVELUP();
                case MSG_LOGCLIENTRESOLUTION.c_messageID: return new MSG_LOGCLIENTRESOLUTION();
                case MSG_LOGOFFER.c_messageID: return new MSG_LOGOFFER();
                case MSG_LOOT.c_messageID: return new MSG_LOOT();
                case MSG_MINIGAMEKIOSK.c_messageID: return new MSG_MINIGAMEKIOSK();
                case MSG_MINIGAMEREWARDS.c_messageID: return new MSG_MINIGAMEREWARDS();
                case MSG_MINIGAMESELECT.c_messageID: return new MSG_MINIGAMESELECT();
                case MSG_MINIGAMETIMEREND.c_messageID: return new MSG_MINIGAMETIMEREND();
                case MSG_MINIGAMETIMERSTART.c_messageID: return new MSG_MINIGAMETIMERSTART();
                case MSG_MOVEBANKTOBANK.c_messageID: return new MSG_MOVEBANKTOBANK();
                case MSG_MOVEBANKTOINV.c_messageID: return new MSG_MOVEBANKTOINV();
                case MSG_MOVEINVTOBANK.c_messageID: return new MSG_MOVEINVTOBANK();
                case MSG_NEWTITLE.c_messageID: return new MSG_NEWTITLE();
                case MSG_NOTIFYSCHOOLFOCUS.c_messageID: return new MSG_NOTIFYSCHOOLFOCUS();
                case MSG_OPENBANK.c_messageID: return new MSG_OPENBANK();
                case MSG_PAID_LOOT_CROWNS_BALANCE.c_messageID: return new MSG_PAID_LOOT_CROWNS_BALANCE();
                case MSG_PAID_LOOT_ROLL_ERROR.c_messageID: return new MSG_PAID_LOOT_ROLL_ERROR();
                case MSG_PAID_LOOT_ROLL_PROMPT.c_messageID: return new MSG_PAID_LOOT_ROLL_PROMPT();
                case MSG_PAID_LOOT_ROLL_RESPONSE.c_messageID: return new MSG_PAID_LOOT_ROLL_RESPONSE();
                case MSG_PAID_LOOT_ROLL_RESULT.c_messageID: return new MSG_PAID_LOOT_ROLL_RESULT();
                case MSG_PATCHINGBLOCKED.c_messageID: return new MSG_PATCHINGBLOCKED();
                case MSG_PCS_LIST_REQUEST.c_messageID: return new MSG_PCS_LIST_REQUEST();
                case MSG_PCS_LIST_RESPONSE.c_messageID: return new MSG_PCS_LIST_RESPONSE();
                case MSG_PCS_PATCH.c_messageID: return new MSG_PCS_PATCH();
                case MSG_PCS_PRICE_LOCK_REQUEST.c_messageID: return new MSG_PCS_PRICE_LOCK_REQUEST();
                case MSG_PCS_PRICE_LOCK_RESPONSE.c_messageID: return new MSG_PCS_PRICE_LOCK_RESPONSE();
                case MSG_PCS_PURCHASE_REQUEST.c_messageID: return new MSG_PCS_PURCHASE_REQUEST();
                case MSG_PCS_PURCHASE_RESPONSE.c_messageID: return new MSG_PCS_PURCHASE_RESPONSE();
                case MSG_PETGAMEKIOSK.c_messageID: return new MSG_PETGAMEKIOSK();
                case MSG_PETHATCHCREATE.c_messageID: return new MSG_PETHATCHCREATE();
                case MSG_PETHATCHJOINSTATUS.c_messageID: return new MSG_PETHATCHJOINSTATUS();
                case MSG_PETHATCHREADYSTATUS.c_messageID: return new MSG_PETHATCHREADYSTATUS();
                case MSG_PETHATCHREQUEST.c_messageID: return new MSG_PETHATCHREQUEST();
                case MSG_PETHATCHRESULT.c_messageID: return new MSG_PETHATCHRESULT();
                case MSG_PETRENAMECONFIRM.c_messageID: return new MSG_PETRENAMECONFIRM();
                case MSG_PETRENAMEREQUEST.c_messageID: return new MSG_PETRENAMEREQUEST();
                case MSG_PLAYERARRIVED.c_messageID: return new MSG_PLAYERARRIVED();
                case MSG_PLAYERWIZBANG.c_messageID: return new MSG_PLAYERWIZBANG();
                case MSG_PLAYMUSIC.c_messageID: return new MSG_PLAYMUSIC();
                case MSG_POTIONBUYCONFIRM.c_messageID: return new MSG_POTIONBUYCONFIRM();
                case MSG_POTIONBUYREQUEST.c_messageID: return new MSG_POTIONBUYREQUEST();
                case MSG_POTIONSHOPOPEN.c_messageID: return new MSG_POTIONSHOPOPEN();
                case MSG_PRELEADERBOARD.c_messageID: return new MSG_PRELEADERBOARD();
                case MSG_PREMIUMCONTENT.c_messageID: return new MSG_PREMIUMCONTENT();
                case MSG_PREPVPKIOSK.c_messageID: return new MSG_PREPVPKIOSK();
                case MSG_PVPCONFIRM.c_messageID: return new MSG_PVPCONFIRM();
                case MSG_PVPCONFIRMTOURNEY.c_messageID: return new MSG_PVPCONFIRMTOURNEY();
                case MSG_PVPINTENT.c_messageID: return new MSG_PVPINTENT();
                case MSG_PVPISSUETOURNEYCREDIT.c_messageID: return new MSG_PVPISSUETOURNEYCREDIT();
                case MSG_PVPMATCHREQUEST.c_messageID: return new MSG_PVPMATCHREQUEST();
                case MSG_PVMSG_PVPREGISTERFAILEDPISSUETOURNEYCREDIT.c_messageID: return new MSG_PVMSG_PVPREGISTERFAILEDPISSUETOURNEYCREDIT();
                case MSG_PVPUPDATEREQUEST.c_messageID: return new MSG_PVPUPDATEREQUEST();
                case MSG_QUESTDIALOG.c_messageID: return new MSG_QUESTDIALOG();
                case MSG_QUESTFINDEROPTION.c_messageID: return new MSG_QUESTFINDEROPTION();
                case MSG_QUESTREWARDS.c_messageID: return new MSG_QUESTREWARDS();
                case MSG_QUICKSELLREQUESTBANK.c_messageID: return new MSG_QUICKSELLREQUESTBANK();
                case MSG_REAGENTADD.c_messageID: return new MSG_REAGENTADD();
                case MSG_REAGENTREMOVE.c_messageID: return new MSG_REAGENTREMOVE();
                case MSG_REAGENTREMOVEREQUEST.c_messageID: return new MSG_REAGENTREMOVEREQUEST();
                case MSG_REAGENTUPDATE.c_messageID: return new MSG_REAGENTUPDATE();
                case MSG_RECIPEADD.c_messageID: return new MSG_RECIPEADD();
                case MSG_RECIPEREMOVE.c_messageID: return new MSG_RECIPEREMOVE();
                case MSG_REGISTRAR.c_messageID: return new MSG_REGISTRAR();
                case MSG_REMOVESPELLFROMBOOK.c_messageID: return new MSG_REMOVESPELLFROMBOOK();
                case MSG_REMOVESPELLFROMDECK.c_messageID: return new MSG_REMOVESPELLFROMDECK();
                case MSG_REMOVETREASURESPELLFROMBOOK.c_messageID: return new MSG_REMOVETREASURESPELLFROMBOOK();
                case MSG_REMOVETREASURESPELLFROMDECK.c_messageID: return new MSG_REMOVETREASURESPELLFROMDECK();
                case MSG_REMOVETREASURESPELLFROMVAULT.c_messageID: return new MSG_REMOVETREASURESPELLFROMVAULT();
                case MSG_RENTALUPDATE.c_messageID: return new MSG_RENTALUPDATE();
                case MSG_REQUESTACTIVEMAPQUESTS.c_messageID: return new MSG_REQUESTACTIVEMAPQUESTS();
                case MSG_REQUESTCOMBATSIGILS.c_messageID: return new MSG_REQUESTCOMBATSIGILS();
                case MSG_REQUESTFRIENDFINDERCODE.c_messageID: return new MSG_REQUESTFRIENDFINDERCODE();
                case MSG_REQUESTHOUSETELEPORT.c_messageID: return new MSG_REQUESTHOUSETELEPORT();
                case MSG_REQUESTNEXTCLOSESTQUEST.c_messageID: return new MSG_REQUESTNEXTCLOSESTQUEST();
                case MSG_REQUESTPRIVACYOPTIONS.c_messageID: return new MSG_REQUESTPRIVACYOPTIONS();
                case MSG_REQUESTPVPACTOR.c_messageID: return new MSG_REQUESTPVPACTOR();
                case MSG_REQUESTPVPKIOSK.c_messageID: return new MSG_REQUESTPVPKIOSK();
                case MSG_REQUESTQUESTDIALOG.c_messageID: return new MSG_REQUESTQUESTDIALOG();
                case MSG_REQUESTQUICKSELL.c_messageID: return new MSG_REQUESTQUICKSELL();
                case MSG_REQUESTTOGGLELOCKITEM.c_messageID: return new MSG_REQUESTTOGGLELOCKITEM();
                case MSG_RESPECCONFIRM.c_messageID: return new MSG_RESPECCONFIRM();
                case MSG_RESPONSEPRIVACYOPTIONS.c_messageID: return new MSG_RESPONSEPRIVACYOPTIONS();
                case MSG_RIDEMOUNT.c_messageID: return new MSG_RIDEMOUNT();
                case MSG_SEAMSTRESSOPEN.c_messageID: return new MSG_SEAMSTRESSOPEN();
                case MSG_SENDFRIENDFINDERCODE.c_messageID: return new MSG_SENDFRIENDFINDERCODE();
                case MSG_SENDTALENTDATACSR.c_messageID: return new MSG_SENDTALENTDATACSR();
                case MSG_SETDECKNAME.c_messageID: return new MSG_SETDECKNAME();
                case MSG_SETDONTALLOWFRIENDFINDERCODES.c_messageID: return new MSG_SETDONTALLOWFRIENDFINDERCODES();
                case MSG_SETRENTALTIMER.c_messageID: return new MSG_SETRENTALTIMER();
                case MSG_SHOPBUYCONFIRM.c_messageID: return new MSG_SHOPBUYCONFIRM();
                case MSG_SHOPBUYREQUEST.c_messageID: return new MSG_SHOPBUYREQUEST();
                case MSG_SHOPLIST.c_messageID: return new MSG_SHOPLIST();
                case MSG_SHOPSELLCONFIRM.c_messageID: return new MSG_SHOPSELLCONFIRM();
                case MSG_SHOPSELLREQUEST.c_messageID: return new MSG_SHOPSELLREQUEST();
                case MSG_SHOWCASEDSTOREITEMINFO.c_messageID: return new MSG_SHOWCASEDSTOREITEMINFO();
                case MSG_SHOWCLIENTMESSAGEBOX.c_messageID: return new MSG_SHOWCLIENTMESSAGEBOX();
                case MSG_SHOWGUI.c_messageID: return new MSG_SHOWGUI();
                case MSG_SNACKLIST.c_messageID: return new MSG_SNACKLIST();
                case MSG_SPELLLIST.c_messageID: return new MSG_SPELLLIST();
                case MSG_SPELLTRAINCOMPLETE.c_messageID: return new MSG_SPELLTRAINCOMPLETE();
                case MSG_STARTRIDE.c_messageID: return new MSG_STARTRIDE();
                case MSG_STITCHITEMS.c_messageID: return new MSG_STITCHITEMS();
                case MSG_STITCHITEMSCONFIRM.c_messageID: return new MSG_STITCHITEMSCONFIRM();
                case MSG_STORAGECLIENTADD.c_messageID: return new MSG_STORAGECLIENTADD();
                case MSG_STORAGECLIENTREMOVE.c_messageID: return new MSG_STORAGECLIENTREMOVE();
                case MSG_SUBMITCOMBATSIGILS.c_messageID: return new MSG_SUBMITCOMBATSIGILS();
                case MSG_SUBSCRIBERONLYITEMS.c_messageID: return new MSG_SUBSCRIBERONLYITEMS();
                case MSG_TIMEDACCESSPASSES.c_messageID: return new MSG_TIMEDACCESSPASSES();
                case MSG_TRADE_CHANGE_ITEM.c_messageID: return new MSG_TRADE_CHANGE_ITEM();
                case MSG_TRADE_CHANGE_MONEY.c_messageID: return new MSG_TRADE_CHANGE_MONEY();
                case MSG_TRADE_CREATE.c_messageID: return new MSG_TRADE_CREATE();
                case MSG_TRADE_JOIN_STATUS.c_messageID: return new MSG_TRADE_JOIN_STATUS();
                case MSG_TRADE_READY_STATUS.c_messageID: return new MSG_TRADE_READY_STATUS();
                case MSG_TRADE_REQUEST.c_messageID: return new MSG_TRADE_REQUEST();
                case MSG_TRADE_RESULT.c_messageID: return new MSG_TRADE_RESULT();
                case MSG_TRAIN.c_messageID: return new MSG_TRAIN();
                case MSG_TREASUREBUY.c_messageID: return new MSG_TREASUREBUY();
                case MSG_TREASUREBUYCONFIRM.c_messageID: return new MSG_TREASUREBUYCONFIRM();
                case MSG_TREASURESHOPLIST.c_messageID: return new MSG_TREASURESHOPLIST();
                case MSG_TUTORIALEVENT.c_messageID: return new MSG_TUTORIALEVENT();
                case MSG_UNSTITCHITEMS.c_messageID: return new MSG_UNSTITCHITEMS();
                case MSG_UNSTITCHOPEN.c_messageID: return new MSG_UNSTITCHOPEN();
                case MSG_UPDATEARENAPOINTS.c_messageID: return new MSG_UPDATEARENAPOINTS();
                case MSG_UPDATEGENDER.c_messageID: return new MSG_UPDATEGENDER();
                case MSG_UPDATEGOLD.c_messageID: return new MSG_UPDATEGOLD();
                case MSG_UPDATEHEALTH.c_messageID: return new MSG_UPDATEHEALTH();
                case MSG_UPDATEMANA.c_messageID: return new MSG_UPDATEMANA();
                case MSG_UPDATEPOTIONS.c_messageID: return new MSG_UPDATEPOTIONS();
                case MSG_UPDATEPOWERPIP.c_messageID: return new MSG_UPDATEPOWERPIP();
                case MSG_UPDATEPRIVACYOPTIONS.c_messageID: return new MSG_UPDATEPRIVACYOPTIONS();
                case MSG_UPDATESCHOOL.c_messageID: return new MSG_UPDATESCHOOL();
                case MSG_UPDATETRAINING.c_messageID: return new MSG_UPDATETRAINING();
                case MSG_UPDATEXP.c_messageID: return new MSG_UPDATEXP();
                case MSG_USEFRIENDFINDERCODE.c_messageID: return new MSG_USEFRIENDFINDERCODE();
                case MSG_USEFRIENDFINDERCODERESPONSE.c_messageID: return new MSG_USEFRIENDFINDERCODERESPONSE();
                case MSG_USEPOTION.c_messageID: return new MSG_USEPOTION();
                case MSG_USERECIPE.c_messageID: return new MSG_USERECIPE();
                case MSG_WIZGAMESTATS.c_messageID: return new MSG_WIZGAMESTATS();
                case MSG_WIZINVENTORYCLIENTADD.c_messageID: return new MSG_WIZINVENTORYCLIENTADD();
                case MSG_WIZINVENTORYCLIENTREMOVE.c_messageID: return new MSG_WIZINVENTORYCLIENTREMOVE();
                case MSG_WORLDTELEPORTLIST.c_messageID: return new MSG_WORLDTELEPORTLIST();
                case MSG_WORLDTELEPORTREQUEST.c_messageID: return new MSG_WORLDTELEPORTREQUEST();
            }
            throw new ArgumentOutOfRangeException(nameof(id));
        }
        
        public interface Handler
        {
            bool NetHandleAcceptQuestBogus(MSG_ACCEPTQUESTBOGUS msg) => false;
            bool NetHandleAccessPassBuyConfirm(MSG_ACCESSPASSBUYCONFIRM msg) => false;
            bool NetHandleAccessPassBuyRequest(MSG_ACCESSPASSBUYREQUEST msg) => false;
            bool NetHandleAccessPassDeclined(MSG_ACCESSPASSDECLINED msg) => false;
            bool NetHandleAccessPassInfoRequest(MSG_ACCESSPASSINFOREQUEST msg) => false;
            bool NetHandleAccessPassOffer(MSG_ACCESSPASSOFFER msg) => false;
            bool NetHandleAccessPassRejected(MSG_ACCESSPASSREJECTED msg) => false;
            bool NetHandleActorDialog(MSG_ACTORDIALOG msg) => false;
            bool NetHandleAddQuestFinder(MSG_ADDQUESTFINDER msg) => false;
            bool NetHandleAddSpellToBook(MSG_ADDSPELLTOBOOK msg) => false;
            bool NetHandleAddSpellToDeck(MSG_ADDSPELLTODECK msg) => false;
            bool NetHandleAddTreasureSpellToBook(MSG_ADDTREASURESPELLTOBOOK msg) => false;
            bool NetHandleAddTreasureSpellToDeck(MSG_ADDTREASURESPELLTODECK msg) => false;
            bool NetHandleAggro(MSG_AGGRO msg) => false;
            bool NetHandleAlchemyStation(MSG_ALCHEMYSTATION msg) => false;
            bool NetHandleArenaError(MSG_ARENAERROR msg) => false;
            bool NetHandleAuctionHouseContents(MSG_AUCTIONHOUSECONTENTS msg) => false;
            bool NetHandleAuctionHouseMoreAcknowledgement(MSG_AUCTIONHOUSEMOREACKNOWLEDGEMENT msg) => false;
            bool NetHandleAuctionHouseRequest(MSG_AUCTIONHOUSEREQUEST msg) => false;
            bool NetHandleAuctionRequestBank(MSG_AUCTIONREQUESTBANK msg) => false;
            bool NetHandleAuctionResponse(MSG_AUCTIONRESPONSE msg) => false;
            bool NetHandleBankDelete(MSG_BANKDELETE msg) => false;
            bool NetHandleBankDeleteConfirm(MSG_BANKDELETECONFIRM msg) => false;
            bool NetHandleBankToInvConfirm(MSG_BANKTOINVCONFIRM msg) => false;
            bool NetHandleBoosterDistributionResults(MSG_BOOSTERDISTRIBUTIONRESULTS msg) => false;
            bool NetHandleBracketReport(MSG_BRACKETREPORT msg) => false;
            bool NetHandleBuyEnergyConfirm(MSG_BUYENERGYCONFIRM msg) => false;
            bool NetHandleChatFilterBlack(MSG_CHATFILTERBLACK msg) => false;
            bool NetHandleChatFilterWhite(MSG_CHATFILTERWHITE msg) => false;
            bool NetHandleChooseFocus(MSG_CHOOSEFOCUS msg) => false;
            bool NetHandleClearAllCraftingSlots(MSG_CLEARALLCRAFTINGSLOTS msg) => false;
            bool NetHandleClearEquippedDeck(MSG_CLEAR_EQUIPPED_DECK msg) => false;
            bool NetHandleCompleteDialog(MSG_COMPLETEDIALOG msg) => false;
            bool NetHandleControlMusic(MSG_CONTROLMUSIC msg) => false;
            bool NetHandleCraftingSlotAdd(MSG_CRAFTINGSLOTADD msg) => false;
            bool NetHandleCraftingSlotCount(MSG_CRAFTINGSLOTCOUNT msg) => false;
            bool NetHandleCraftingSlotRemove(MSG_CRAFTINGSLOTREMOVE msg) => false;
            bool NetHandleCreateBoosterDistribution(MSG_CREATEBOOSTERDISTRIBUTION msg) => false;
            bool NetHandleCrownBalance(MSG_CROWNBALANCE msg) => false;
            bool NetHandleCrownsBuyConfirm(MSG_CROWNSBUYCONFIRM msg) => false;
            bool NetHandleCrownsBuyRequest(MSG_CROWNSBUYREQUEST msg) => false;
            bool NetHandleCrownServicesOpen(MSG_CROWNSERVICESOPEN msg) => false;
            bool NetHandleCSRCrownBalance(MSG_CSRCROWNBALANCE msg) => false;
            bool NetHandleCSRRequestBlobs(MSG_CSR_REQUEST_BLOBS msg) => false;
            bool NetHandleDismissTutorialTip(MSG_DISMISSTUTORIALTIP msg) => false;
            bool NetHandleDoneShopping(MSG_DONESHOPPING msg) => false;
            bool NetHandleDuelSimResult(MSG_DUELSIMRESULT msg) => false;
            bool NetHandleDyeConfirm(MSG_DYECONFIRM msg) => false;
            bool NetHandleDyeRequest(MSG_DYEREQUEST msg) => false;
            bool NetHandleDyeShopOpen(MSG_DYESHOPOPEN msg) => false;
            bool NetHandleElixirStateChange(MSG_ELIXIRSTATECHANGE msg) => false;
            bool NetHandleEncounterDialog(MSG_ENCOUNTERDIALOG msg) => false;
            bool NetHandleEnergyBuyRequest(MSG_ENERGYBUYREQUEST msg) => false;
            bool NetHandleEnergyShopOpen(MSG_ENERGYSHOPOPEN msg) => false;
            bool NetHandleEnterMinigame(MSG_ENTERMINIGAME msg) => false;
            bool NetHandleExitConfirmTeleport(MSG_EXITCONFIRMTELEPORT msg) => false;
            bool NetHandleExpandPvPSearch(MSG_EXPANDPVPSEARCH msg) => false;
            bool NetHandleFreeTourneyCreditInfo(MSG_FREETOURNEYCREDITINFO msg) => false;
            bool NetHandleGetSnackList(MSG_GETSNACKLIST msg) => false;
            bool NetHandleGetSubscriberOnlyItems(MSG_GETSUBSCRIBERONLYITEMS msg) => false;
            bool NetHandleGetTimedAccessPasses(MSG_GETTIMEDACCESSPASSES msg) => false;
            bool NetHandleGoHome(MSG_GOHOME msg) => false;
            bool NetHandleGotoDorm(MSG_GOTODORM msg) => false;
            bool NetHandleInteractAvailableQuest(MSG_INTERACTAVAILABLEQUEST msg) => false;
            bool NetHandleInteractCompleteGoal(MSG_INTERACTCOMPLETEGOAL msg) => false;
            bool NetHandleInteractUnderwayQuest(MSG_INTERACTUNDERWAYQUEST msg) => false;
            bool NetHandleInvToBankConfirm(MSG_INVTOBANKCONFIRM msg) => false;
            bool NetHandleItemDrop(MSG_ITEMDROP msg) => false;
            bool NetHandleItemLock(MSG_ITEMLOCK msg) => false;
            bool NetHandleItemOverflowToBank(MSG_ITEMOVERFLOWTOBANK msg) => false;
            bool NetHandleLeaderboardFriendRequest(MSG_LEADERBOARDFRIENDREQUEST msg) => false;
            bool NetHandleLeaderboardRequest(MSG_LEADERBOARDREQUEST msg) => false;
            bool NetHandleLeaderboardResponse(MSG_LEADERBOARDRESPONSE msg) => false;
            bool NetHandleLeash(MSG_LEASH msg) => false;
            bool NetHandleLeashOffset(MSG_LEASHOFFSET msg) => false;
            bool NetHandleLeaveMinigame(MSG_LEAVEMINIGAME msg) => false;
            bool NetHandleLeaveSigilTimerWaiting(MSG_LEAVESIGILTIMERWAITING msg) => false;
            bool NetHandleLevelUp(MSG_LEVELUP msg) => false;
            bool NetHandleLogClientResolution(MSG_LOGCLIENTRESOLUTION msg) => false;
            bool NetHandleLogOffer(MSG_LOGOFFER msg) => false;
            bool NetHandleLoot(MSG_LOOT msg) => false;
            bool NetHandleMinigameKiosk(MSG_MINIGAMEKIOSK msg) => false;
            bool NetHandleMinigameRewards(MSG_MINIGAMEREWARDS msg) => false;
            bool NetHandleMinigameSelect(MSG_MINIGAMESELECT msg) => false;
            bool NetHandleMinigameTimerEnd(MSG_MINIGAMETIMEREND msg) => false;
            bool NetHandleMinigameTimerStart(MSG_MINIGAMETIMERSTART msg) => false;
            bool NetHandleMoveBankToBank(MSG_MOVEBANKTOBANK msg) => false;
            bool NetHandleMoveBankToInv(MSG_MOVEBANKTOINV msg) => false;
            bool NetHandleMoveInvToBank(MSG_MOVEINVTOBANK msg) => false;
            bool NetHandleNewTitle(MSG_NEWTITLE msg) => false;
            bool NetHandleNotifySchoolFocus(MSG_NOTIFYSCHOOLFOCUS msg) => false;
            bool NetHandleOpenBank(MSG_OPENBANK msg) => false;
            bool NetHandlePaidLootCrownsBalance(MSG_PAID_LOOT_CROWNS_BALANCE msg) => false;
            bool NetHandlePaidLootRollError(MSG_PAID_LOOT_ROLL_ERROR msg) => false;
            bool NetHandlePaidLootRollPrompt(MSG_PAID_LOOT_ROLL_PROMPT msg) => false;
            bool NetHandlePaidLootRollResponse(MSG_PAID_LOOT_ROLL_RESPONSE msg) => false;
            bool NetHandlePaidLootRollResult(MSG_PAID_LOOT_ROLL_RESULT msg) => false;
            bool NetHandlePatchingBlocked(MSG_PATCHINGBLOCKED msg) => false;
            bool NetHandlePCSListRequest(MSG_PCS_LIST_REQUEST msg) => false;
            bool NetHandlePCSListResponse(MSG_PCS_LIST_RESPONSE msg) => false;
            bool NetHandlePCS_PATCH(MSG_PCS_PATCH msg) => false;
            bool NetHandlePCSPriceLockRequest(MSG_PCS_PRICE_LOCK_REQUEST msg) => false;
            bool NetHandlePCSPriceLockResponse(MSG_PCS_PRICE_LOCK_RESPONSE msg) => false;
            bool NetHandlePCSPurchaseRequest(MSG_PCS_PURCHASE_REQUEST msg) => false;
            bool NetHandlePCSPurchaseResponse(MSG_PCS_PURCHASE_RESPONSE msg) => false;
            bool NetHandlePetGameKiosk(MSG_PETGAMEKIOSK msg) => false;
            bool NetHandlePetHatchCreate(MSG_PETHATCHCREATE msg) => false;
            bool NetHandlePetHatchJoinStatus(MSG_PETHATCHJOINSTATUS msg) => false;
            bool NetHandlePetHatchReadyStatus(MSG_PETHATCHREADYSTATUS msg) => false;
            bool NetHandlePetHatchRequest(MSG_PETHATCHREQUEST msg) => false;
            bool NetHandlePetHatchResult(MSG_PETHATCHRESULT msg) => false;
            bool NetHandlePetRenameConfirm(MSG_PETRENAMECONFIRM msg) => false;
            bool NetHandlePetRenameRequest(MSG_PETRENAMEREQUEST msg) => false;
            bool NetHandlePlayerArrived(MSG_PLAYERARRIVED msg) => false;
            bool NetHandlePlayerWizbang(MSG_PLAYERWIZBANG msg) => false;
            bool NetHandlePlayMusic(MSG_PLAYMUSIC msg) => false;
            bool NetHandlePotionBuyConfirm(MSG_POTIONBUYCONFIRM msg) => false;
            bool NetHandlePotionBuyRequest(MSG_POTIONBUYREQUEST msg) => false;
            bool NetHandlePotionShopOpen(MSG_POTIONSHOPOPEN msg) => false;
            bool NetHandlePreLeaderboard(MSG_PRELEADERBOARD msg) => false;
            bool NetHandlePremiumContent(MSG_PREMIUMCONTENT msg) => false;
            bool NetHandlePrePvPKiosk(MSG_PREPVPKIOSK msg) => false;
            bool NetHandlePvPConfirm(MSG_PVPCONFIRM msg) => false;
            bool NetHandlePvPConfirmTourney(MSG_PVPCONFIRMTOURNEY msg) => false;
            bool NetHandlePvPIntent(MSG_PVPINTENT msg) => false;
            bool NetHandlePvPIssueTourneyCredit(MSG_PVPISSUETOURNEYCREDIT msg) => false;
            bool NetHandlePvpMatchRequest(MSG_PVPMATCHREQUEST msg) => false;
            bool NetHandlePvPRegisterFailed(MSG_PVMSG_PVPREGISTERFAILEDPISSUETOURNEYCREDIT msg) => false;
            bool NetHandlePvPUpdateRequest(MSG_PVPUPDATEREQUEST msg) => false;
            bool NetHandleQuestDialog(MSG_QUESTDIALOG msg) => false;
            bool NetHandleQuestFinderOption(MSG_QUESTFINDEROPTION msg) => false;
            bool NetHandleQuestRewards(MSG_QUESTREWARDS msg) => false;
            bool NetHandleQuickSellRequestBank(MSG_QUICKSELLREQUESTBANK msg) => false;
            bool NetHandleReagentAdd(MSG_REAGENTADD msg) => false;
            bool NetHandleReagentRemove(MSG_REAGENTREMOVE msg) => false;
            bool NetHandleReagentRemoveRequest(MSG_REAGENTREMOVEREQUEST msg) => false;
            bool NetHandleReagentUpdate(MSG_REAGENTUPDATE msg) => false;
            bool NetHandleRecipeAdd(MSG_RECIPEADD msg) => false;
            bool NetHandleRecipeRemove(MSG_RECIPEREMOVE msg) => false;
            bool NetHandleRegistrar(MSG_REGISTRAR msg) => false;
            bool NetHandleRemoveSpellFromBook(MSG_REMOVESPELLFROMBOOK msg) => false;
            bool NetHandleRemoveSpellFromDeck(MSG_REMOVESPELLFROMDECK msg) => false;
            bool NetHandleRemoveTreasureSpellFromBook(MSG_REMOVETREASURESPELLFROMBOOK msg) => false;
            bool NetHandleRemoveTreasureSpellFromDeck(MSG_REMOVETREASURESPELLFROMDECK msg) => false;
            bool NetHandleRemoveTreasureSpellFromVault(MSG_REMOVETREASURESPELLFROMVAULT msg) => false;
            bool NetHandleRentalUpdate(MSG_RENTALUPDATE msg) => false;
            bool NetHandleRequestActiveMapQuests(MSG_REQUESTACTIVEMAPQUESTS msg) => false;
            bool NetHandleRequestCombatSigils(MSG_REQUESTCOMBATSIGILS msg) => false;
            bool NetHandleRequestFriendFinderCode(MSG_REQUESTFRIENDFINDERCODE msg) => false;
            bool NetHandleRequestHouseTeleport(MSG_REQUESTHOUSETELEPORT msg) => false;
            bool NetHandleRequestNextClosestQuest(MSG_REQUESTNEXTCLOSESTQUEST msg) => false;
            bool NetHandleRequestPrivacyOptions(MSG_REQUESTPRIVACYOPTIONS msg) => false;
            bool NetHandleRequestPvPActor(MSG_REQUESTPVPACTOR msg) => false;
            bool NetHandleRequestPvPKiosk(MSG_REQUESTPVPKIOSK msg) => false;
            bool NetHandleRequestQuestDialog(MSG_REQUESTQUESTDIALOG msg) => false;
            bool NetHandleRequestQuickSell(MSG_REQUESTQUICKSELL msg) => false;
            bool NetHandleRequestToggleLockItem(MSG_REQUESTTOGGLELOCKITEM msg) => false;
            bool NetHandleRespecConfirm(MSG_RESPECCONFIRM msg) => false;
            bool NetHandleResponsePrivacyOptions(MSG_RESPONSEPRIVACYOPTIONS msg) => false;
            bool NetHandleRideMount(MSG_RIDEMOUNT msg) => false;
            bool NetHandleSeamstressOpen(MSG_SEAMSTRESSOPEN msg) => false;
            bool NetHandleSendFriendFinderCode(MSG_SENDFRIENDFINDERCODE msg) => false;
            bool NetHandleSendTalentDataCSR(MSG_SENDTALENTDATACSR msg) => false;
            bool NetHandleSetDeckName(MSG_SETDECKNAME msg) => false;
            bool NetHandleDontAllowFriendFinderCodes(MSG_SETDONTALLOWFRIENDFINDERCODES msg) => false;
            bool NetHandleSetRentalTimer(MSG_SETRENTALTIMER msg) => false;
            bool NetHandleShopBuyConfirm(MSG_SHOPBUYCONFIRM msg) => false;
            bool NetHandleShopBuyRequest(MSG_SHOPBUYREQUEST msg) => false;
            bool NetHandleShopList(MSG_SHOPLIST msg) => false;
            bool NetHandleShopSellConfirm(MSG_SHOPSELLCONFIRM msg) => false;
            bool NetHandleShopSellRequest(MSG_SHOPSELLREQUEST msg) => false;
            bool NetHandleShowcasedStoreItemInfo(MSG_SHOWCASEDSTOREITEMINFO msg) => false;
            bool NetHandleShowClientMessageBox(MSG_SHOWCLIENTMESSAGEBOX msg) => false;
            bool NetHandleShowGUI(MSG_SHOWGUI msg) => false;
            bool NetHandleSnackList(MSG_SNACKLIST msg) => false;
            bool NetHandleSpellList(MSG_SPELLLIST msg) => false;
            bool NetHandleSpellTrainComplete(MSG_SPELLTRAINCOMPLETE msg) => false;
            bool NetHandleStartRide(MSG_STARTRIDE msg) => false;
            bool NetHandleStitchItems(MSG_STITCHITEMS msg) => false;
            bool NetHandleStitchItemsConfirm(MSG_STITCHITEMSCONFIRM msg) => false;
            bool NetHandleStorageClientAdd(MSG_STORAGECLIENTADD msg) => false;
            bool NetHandleStorageClientRemove(MSG_STORAGECLIENTREMOVE msg) => false;
            bool NetHandleSubmitCombatSigils(MSG_SUBMITCOMBATSIGILS msg) => false;
            bool NetHandleSubscriberOnlyItems(MSG_SUBSCRIBERONLYITEMS msg) => false;
            bool NetHandleTimedAccessPasses(MSG_TIMEDACCESSPASSES msg) => false;
            bool NetHandleTradeChangeItem(MSG_TRADE_CHANGE_ITEM msg) => false;
            bool NetHandleTradeChangeMoney(MSG_TRADE_CHANGE_MONEY msg) => false;
            bool NetHandleTradeCreate(MSG_TRADE_CREATE msg) => false;
            bool NetHandleTradeJoinStatus(MSG_TRADE_JOIN_STATUS msg) => false;
            bool NetHandleTradeReadyStatus(MSG_TRADE_READY_STATUS msg) => false;
            bool NetHandleTradeRequest(MSG_TRADE_REQUEST msg) => false;
            bool NetHandleTradeResult(MSG_TRADE_RESULT msg) => false;
            bool NetHandleTrain(MSG_TRAIN msg) => false;
            bool NetHandleTreasureBuy(MSG_TREASUREBUY msg) => false;
            bool NetHandleTreasureBuyConfirm(MSG_TREASUREBUYCONFIRM msg) => false;
            bool NetHandleTreasureShopList(MSG_TREASURESHOPLIST msg) => false;
            bool NetHandleTutorialEvent(MSG_TUTORIALEVENT msg) => false;
            bool NetHandleUnstitchItems(MSG_UNSTITCHITEMS msg) => false;
            bool NetHandleUnstitchOpen(MSG_UNSTITCHOPEN msg) => false;
            bool NetHandleUpdateArenaPoints(MSG_UPDATEARENAPOINTS msg) => false;
            bool NetHandleUpdateGender(MSG_UPDATEGENDER msg) => false;
            bool NetHandleUpdateGold(MSG_UPDATEGOLD msg) => false;
            bool NetHandleUpdateHealth(MSG_UPDATEHEALTH msg) => false;
            bool NetHandleUpdateMana(MSG_UPDATEMANA msg) => false;
            bool NetHandleUpdatePotions(MSG_UPDATEPOTIONS msg) => false;
            bool NetHandleUpdatePowerPip(MSG_UPDATEPOWERPIP msg) => false;
            bool NetHandleUpdatePrivacyOptions(MSG_UPDATEPRIVACYOPTIONS msg) => false;
            bool NetHandleUpdateSchool(MSG_UPDATESCHOOL msg) => false;
            bool NetHandleUpdateTraining(MSG_UPDATETRAINING msg) => false;
            bool NetHandleUpdateXP(MSG_UPDATEXP msg) => false;
            bool NetHandleUseFriendFinderCode(MSG_USEFRIENDFINDERCODE msg) => false;
            bool NetHandleUseFriendFinderCodeResponse(MSG_USEFRIENDFINDERCODERESPONSE msg) => false;
            bool NetHandleUsePotion(MSG_USEPOTION msg) => false;
            bool NetHandleUseRecipe(MSG_USERECIPE msg) => false;
            bool NetHandleWizGameStats(MSG_WIZGAMESTATS msg) => false;
            bool NetHandleWizInventoryClientAdd(MSG_WIZINVENTORYCLIENTADD msg) => false;
            bool NetHandleWizInventoryClientRemove(MSG_WIZINVENTORYCLIENTREMOVE msg) => false;
            bool NetHandleWorldTeleportList(MSG_WORLDTELEPORTLIST msg) => false;
            bool NetHandleWorldTeleportRequest(MSG_WORLDTELEPORTREQUEST msg) => false;
        }
    }
    public class WIZARD2_53_Protocol: INetworkService
    {
        public const byte c_serviceID = 53;
        public byte GetID() => c_serviceID;
        
        public class MSG_ACCESSPASSPURCHASE : INetworkMessage
        {
            public const byte c_messageID = 1;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("AccessPass", DMLType.STR)] public ByteString m_accessPass;
            [DMLField("RequestedZoneDisplayName", DMLType.STR)] public ByteString m_requestedZoneDisplayName;
            [DMLField("PayToPlayStyle", DMLType.STR)] public ByteString m_payToPlayStyle;
            [DMLField("TargetLoc", DMLType.STR)] public ByteString m_targetLoc;
            [DMLField("ZoneID", DMLType.GID)] public GID m_zoneID;
            [DMLField("ZoneName", DMLType.STR)] public ByteString m_zoneName;
            [DMLField("ClusterID", DMLType.GID)] public GID m_clusterID;
            [DMLField("ClusterName", DMLType.STR)] public ByteString m_clusterName;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_ACCESSPASSPURCHASE>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_ACCESSPASSPURCHASE>.Read(buf, this);
            }
        }
        public class MSG_ADDCROWNSREWARDSEVENT : INetworkMessage
        {
            public const byte c_messageID = 2;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("SerializedEvent", DMLType.STR)] public ByteString m_serializedEvent;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_ADDCROWNSREWARDSEVENT>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_ADDCROWNSREWARDSEVENT>.Read(buf, this);
            }
        }
        public class MSG_ADDPLAYERTOBASICCHATCHANNEL : INetworkMessage
        {
            public const byte c_messageID = 3;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("PlayerGID", DMLType.GID)] public GID m_playerGID;
            [DMLField("OwningPlayerGID", DMLType.GID)] public GID m_owningPlayerGID;
            [DMLField("NewPlayerGID", DMLType.GID)] public GID m_newPlayerGID;
            [DMLField("NewPlayerNameBlob", DMLType.STR)] public ByteString m_newPlayerNameBlob;
            [DMLField("NewPlayerSchoolLevel", DMLType.UINT)] public uint m_newPlayerSchoolLevel;
            [DMLField("NewPlayerObjectGID", DMLType.GID)] public GID m_newPlayerObjectGID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_ADDPLAYERTOBASICCHATCHANNEL>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_ADDPLAYERTOBASICCHATCHANNEL>.Read(buf, this);
            }
        }
        public class MSG_ATHANORARRIVAL : INetworkMessage
        {
            public const byte c_messageID = 4;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_ATHANORARRIVAL>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_ATHANORARRIVAL>.Read(buf, this);
            }
        }
        public class MSG_BASICCHATCHANNELERRORMESSAGE : INetworkMessage
        {
            public const byte c_messageID = 5;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("PlayerGID", DMLType.GID)] public GID m_playerGID;
            [DMLField("ErrorCode", DMLType.UBYT)] public byte m_errorCode;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_BASICCHATCHANNELERRORMESSAGE>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_BASICCHATCHANNELERRORMESSAGE>.Read(buf, this);
            }
        }
        public class MSG_BASICCHATCHANNELUPDATECOOLDOWN : INetworkMessage
        {
            public const byte c_messageID = 6;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("PlayerGID", DMLType.GID)] public GID m_playerGID;
            [DMLField("CooldownTime", DMLType.UINT)] public uint m_cooldownTime;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_BASICCHATCHANNELUPDATECOOLDOWN>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_BASICCHATCHANNELUPDATECOOLDOWN>.Read(buf, this);
            }
        }
        public class MSG_BATTLECARDBUY : INetworkMessage
        {
            public const byte c_messageID = 7;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("npcGlobalID", DMLType.GID)] public GID m_npcGlobalID;
            [DMLField("Data", DMLType.STR)] public ByteString m_data;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_BATTLECARDBUY>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_BATTLECARDBUY>.Read(buf, this);
            }
        }
        public class MSG_BATTLECARDBUYCONFIRM : INetworkMessage
        {
            public const byte c_messageID = 8;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("Failure", DMLType.BYT)] public sbyte m_failure;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_BATTLECARDBUYCONFIRM>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_BATTLECARDBUYCONFIRM>.Read(buf, this);
            }
        }
        public class MSG_BATTLECARDSHOPLIST : INetworkMessage
        {
            public const byte c_messageID = 9;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("GlobalID", DMLType.GID)] public GID m_globalID;
            [DMLField("Data", DMLType.STR)] public ByteString m_data;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_BATTLECARDSHOPLIST>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_BATTLECARDSHOPLIST>.Read(buf, this);
            }
        }
        public class MSG_BATTLECARDTRASH : INetworkMessage
        {
            public const byte c_messageID = 10;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("npcGlobalID", DMLType.GID)] public GID m_npcGlobalID;
            [DMLField("SpellID", DMLType.INT)] public int m_spellID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_BATTLECARDTRASH>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_BATTLECARDTRASH>.Read(buf, this);
            }
        }
        public class MSG_BATTLECARDTRASHCONFIRM : INetworkMessage
        {
            public const byte c_messageID = 11;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("Failure", DMLType.BYT)] public sbyte m_failure;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_BATTLECARDTRASHCONFIRM>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_BATTLECARDTRASHCONFIRM>.Read(buf, this);
            }
        }
        public class MSG_BATTLEGROUNDEND : INetworkMessage
        {
            public const byte c_messageID = 12;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("EndCode", DMLType.UBYT)] public byte m_endCode;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_BATTLEGROUNDEND>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_BATTLEGROUNDEND>.Read(buf, this);
            }
        }
        public class MSG_BATTLEGROUNDPENALTY : INetworkMessage
        {
            public const byte c_messageID = 13;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("ProjectID", DMLType.UINT)] public uint m_projectID;
            [DMLField("PlayerGID", DMLType.GID)] public GID m_playerGID;
            [DMLField("CancelPenalty", DMLType.UINT)] public uint m_cancelPenalty;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_BATTLEGROUNDPENALTY>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_BATTLEGROUNDPENALTY>.Read(buf, this);
            }
        }
        public class MSG_BATTLEGROUNDPOLYMORPHIMPROVEMENT : INetworkMessage
        {
            public const byte c_messageID = 14;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("GlobalID", DMLType.GID)] public GID m_globalID;
            [DMLField("RatingData", DMLType.STR)] public ByteString m_ratingData;
            [DMLField("BGClassProjectID", DMLType.UINT)] public uint m_bGClassProjectID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_BATTLEGROUNDPOLYMORPHIMPROVEMENT>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_BATTLEGROUNDPOLYMORPHIMPROVEMENT>.Read(buf, this);
            }
        }
        public class MSG_BATTLEGROUNDPOLYMORPHIMPROVEREQ : INetworkMessage
        {
            public const byte c_messageID = 15;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("npcGlobalID", DMLType.GID)] public GID m_npcGlobalID;
            [DMLField("Level", DMLType.BYT)] public sbyte m_level;
            [DMLField("Rating", DMLType.BYT)] public sbyte m_rating;
            [DMLField("Tag", DMLType.STR)] public ByteString m_tag;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_BATTLEGROUNDPOLYMORPHIMPROVEREQ>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_BATTLEGROUNDPOLYMORPHIMPROVEREQ>.Read(buf, this);
            }
        }
        public class MSG_BATTLEGROUNDPOLYMORPHIMPROVERESP : INetworkMessage
        {
            public const byte c_messageID = 16;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("Failure", DMLType.BYT)] public sbyte m_failure;
            [DMLField("Rating", DMLType.INT)] public int m_rating;
            [DMLField("Level", DMLType.INT)] public int m_level;
            [DMLField("Tag", DMLType.STR)] public ByteString m_tag;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_BATTLEGROUNDPOLYMORPHIMPROVERESP>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_BATTLEGROUNDPOLYMORPHIMPROVERESP>.Read(buf, this);
            }
        }
        public class MSG_BATTLEGROUNDQUEUEGROUP : INetworkMessage
        {
            public const byte c_messageID = 17;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("ProjectID", DMLType.UINT)] public uint m_projectID;
            [DMLField("PlayerGID", DMLType.GID)] public GID m_playerGID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_BATTLEGROUNDQUEUEGROUP>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_BATTLEGROUNDQUEUEGROUP>.Read(buf, this);
            }
        }
        public class MSG_BATTLEGROUNDQUEUEGROUPCHECK : INetworkMessage
        {
            public const byte c_messageID = 18;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("PlayerGID", DMLType.GID)] public GID m_playerGID;
            [DMLField("GroupID", DMLType.GID)] public GID m_groupID;
            [DMLField("Status", DMLType.UINT)] public uint m_status;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_BATTLEGROUNDQUEUEGROUPCHECK>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_BATTLEGROUNDQUEUEGROUPCHECK>.Read(buf, this);
            }
        }
        public class MSG_BATTLEGROUNDQUEUEGROUPJOINED : INetworkMessage
        {
            public const byte c_messageID = 19;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("PlayerGID", DMLType.GID)] public GID m_playerGID;
            [DMLField("LeaderName", DMLType.STR)] public ByteString m_leaderName;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_BATTLEGROUNDQUEUEGROUPJOINED>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_BATTLEGROUNDQUEUEGROUPJOINED>.Read(buf, this);
            }
        }
        public class MSG_BATTLEGROUNDQUEUEGROUPSTATUS : INetworkMessage
        {
            public const byte c_messageID = 20;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("PlayerGID", DMLType.GID)] public GID m_playerGID;
            [DMLField("Status", DMLType.STR)] public ByteString m_status;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_BATTLEGROUNDQUEUEGROUPSTATUS>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_BATTLEGROUNDQUEUEGROUPSTATUS>.Read(buf, this);
            }
        }
        public class MSG_BATTLEGROUNDQUEUEPLAYER : INetworkMessage
        {
            public const byte c_messageID = 21;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("ProjectID", DMLType.UINT)] public uint m_projectID;
            [DMLField("PlayerGID", DMLType.GID)] public GID m_playerGID;
            [DMLField("LastMatchStatus", DMLType.INT)] public int m_lastMatchStatus;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_BATTLEGROUNDQUEUEPLAYER>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_BATTLEGROUNDQUEUEPLAYER>.Read(buf, this);
            }
        }
        public class MSG_BATTLEGROUNDQUEUESTATS : INetworkMessage
        {
            public const byte c_messageID = 22;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("GlobalID", DMLType.GID)] public GID m_globalID;
            [DMLField("Data", DMLType.STR)] public ByteString m_data;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_BATTLEGROUNDQUEUESTATS>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_BATTLEGROUNDQUEUESTATS>.Read(buf, this);
            }
        }
        public class MSG_BATTLEGROUNDQUEUEUPDATE : INetworkMessage
        {
            public const byte c_messageID = 23;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("ProjectID", DMLType.UINT)] public uint m_projectID;
            [DMLField("PlayerGID", DMLType.GID)] public GID m_playerGID;
            [DMLField("Waiting", DMLType.UBYT)] public byte m_waiting;
            [DMLField("Cancel", DMLType.UINT)] public uint m_cancel;
            [DMLField("Kicked", DMLType.STR)] public ByteString m_kicked;
            [DMLField("Ready", DMLType.UBYT)] public byte m_ready;
            [DMLField("TimeLeft", DMLType.FLT)] public float m_timeLeft;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_BATTLEGROUNDQUEUEUPDATE>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_BATTLEGROUNDQUEUEUPDATE>.Read(buf, this);
            }
        }
        public class MSG_BATTLEGROUNDREQUESTMATCHDATA : INetworkMessage
        {
            public const byte c_messageID = 24;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("ZoneID", DMLType.GID)] public GID m_zoneID;
            [DMLField("Data", DMLType.STR)] public ByteString m_data;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_BATTLEGROUNDREQUESTMATCHDATA>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_BATTLEGROUNDREQUESTMATCHDATA>.Read(buf, this);
            }
        }
        public class MSG_BATTLEGROUNDSHOWCOMPASS : INetworkMessage
        {
            public const byte c_messageID = 25;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("ShowCompass", DMLType.UBYT)] public byte m_showCompass;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_BATTLEGROUNDSHOWCOMPASS>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_BATTLEGROUNDSHOWCOMPASS>.Read(buf, this);
            }
        }
        public class MSG_BATTLEGROUNDTELEPORTPLAYER : INetworkMessage
        {
            public const byte c_messageID = 26;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("ProjectID", DMLType.UINT)] public uint m_projectID;
            [DMLField("PlayerGID", DMLType.GID)] public GID m_playerGID;
            [DMLField("ZoneID", DMLType.GID)] public GID m_zoneID;
            [DMLField("Team", DMLType.UBYT)] public byte m_team;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_BATTLEGROUNDTELEPORTPLAYER>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_BATTLEGROUNDTELEPORTPLAYER>.Read(buf, this);
            }
        }
        public class MSG_BATTLEGROUNDUPDATEPOINTS : INetworkMessage
        {
            public const byte c_messageID = 27;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("Points", DMLType.INT)] public int m_points;
            [DMLField("Delta", DMLType.INT)] public int m_delta;
            [DMLField("Team", DMLType.UBYT)] public byte m_team;
            [DMLField("PointEvent", DMLType.INT)] public int m_pointEvent;
            [DMLField("Tag", DMLType.STR)] public ByteString m_tag;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_BATTLEGROUNDUPDATEPOINTS>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_BATTLEGROUNDUPDATEPOINTS>.Read(buf, this);
            }
        }
        public class MSG_BGISPOLYMORPHUNLOCKEDREQUEST : INetworkMessage
        {
            public const byte c_messageID = 28;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("PolymorphTemplateID", DMLType.GID)] public GID m_polymorphTemplateID;
            [DMLField("npcGlobalID", DMLType.GID)] public GID m_npcGlobalID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_BGISPOLYMORPHUNLOCKEDREQUEST>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_BGISPOLYMORPHUNLOCKEDREQUEST>.Read(buf, this);
            }
        }
        public class MSG_BGISPOLYMORPHUNLOCKEDRESPONSE : INetworkMessage
        {
            public const byte c_messageID = 29;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("PolymorphTemplateID", DMLType.GID)] public GID m_polymorphTemplateID;
            [DMLField("PolymorphRating", DMLType.INT)] public int m_polymorphRating;
            [DMLField("IsPolymorphUnlocked", DMLType.UBYT)] public byte m_isPolymorphUnlocked;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_BGISPOLYMORPHUNLOCKEDRESPONSE>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_BGISPOLYMORPHUNLOCKEDRESPONSE>.Read(buf, this);
            }
        }
        public class MSG_BGOPENPOLYMORPHSELECT : INetworkMessage
        {
            public const byte c_messageID = 30;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("npcGlobalID", DMLType.GID)] public GID m_npcGlobalID;
            [DMLField("PolymorphCategory", DMLType.STR)] public ByteString m_polymorphCategory;
            [DMLField("PolymorphCategoryAvailable", DMLType.UBYT)] public byte m_polymorphCategoryAvailable;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_BGOPENPOLYMORPHSELECT>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_BGOPENPOLYMORPHSELECT>.Read(buf, this);
            }
        }
        public class MSG_BGPOIUpdate : INetworkMessage
        {
            public const byte c_messageID = 31;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("Data", DMLType.STR)] public ByteString m_data;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_BGPOIUpdate>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_BGPOIUpdate>.Read(buf, this);
            }
        }
        public class MSG_BGPlayerStatsUpdate : INetworkMessage
        {
            public const byte c_messageID = 32;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("Stats", DMLType.STR)] public ByteString m_stats;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_BGPlayerStatsUpdate>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_BGPlayerStatsUpdate>.Read(buf, this);
            }
        }
        public class MSG_BGPlayerSync : INetworkMessage
        {
            public const byte c_messageID = 33;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("GlobalID", DMLType.GID)] public GID m_globalID;
            [DMLField("Data", DMLType.UINT)] public uint m_data;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_BGPlayerSync>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_BGPlayerSync>.Read(buf, this);
            }
        }
        public class MSG_BGQueueStatus : INetworkMessage
        {
            public const byte c_messageID = 34;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("PlayerGID", DMLType.GID)] public GID m_playerGID;
            [DMLField("State", DMLType.INT)] public int m_state;
            [DMLField("Lines", DMLType.STR)] public ByteString m_lines;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_BGQueueStatus>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_BGQueueStatus>.Read(buf, this);
            }
        }
        public class MSG_BGResetStats : INetworkMessage
        {
            public const byte c_messageID = 35;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("Stats", DMLType.STR)] public ByteString m_stats;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_BGResetStats>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_BGResetStats>.Read(buf, this);
            }
        }
        public class MSG_BGSELECTPOLYMORPHDONE : INetworkMessage
        {
            public const byte c_messageID = 36;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_BGSELECTPOLYMORPHDONE>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_BGSELECTPOLYMORPHDONE>.Read(buf, this);
            }
        }
        public class MSG_BGSELECTPOLYMORPHREQUEST : INetworkMessage
        {
            public const byte c_messageID = 37;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("npcGlobalID", DMLType.GID)] public GID m_npcGlobalID;
            [DMLField("PolymorphTemplateID", DMLType.GID)] public GID m_polymorphTemplateID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_BGSELECTPOLYMORPHREQUEST>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_BGSELECTPOLYMORPHREQUEST>.Read(buf, this);
            }
        }
        public class MSG_BGSELECTPOLYMORPHRESPONSE : INetworkMessage
        {
            public const byte c_messageID = 38;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("PolymorphCategory", DMLType.STR)] public ByteString m_polymorphCategory;
            [DMLField("PolymorphCategoryAvailable", DMLType.UBYT)] public byte m_polymorphCategoryAvailable;
            [DMLField("ReleasedPolymorphCategory", DMLType.STR)] public ByteString m_releasedPolymorphCategory;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_BGSELECTPOLYMORPHRESPONSE>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_BGSELECTPOLYMORPHRESPONSE>.Read(buf, this);
            }
        }
        public class MSG_BGSigilProxyEvent : INetworkMessage
        {
            public const byte c_messageID = 39;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("GlobalID", DMLType.GID)] public GID m_globalID;
            [DMLField("Operation", DMLType.UINT)] public uint m_operation;
            [DMLField("Data", DMLType.STR)] public ByteString m_data;
            [DMLField("Team", DMLType.STR)] public ByteString m_team;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_BGSigilProxyEvent>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_BGSigilProxyEvent>.Read(buf, this);
            }
        }
        public class MSG_BUYPETELIXIRCONFIRM : INetworkMessage
        {
            public const byte c_messageID = 40;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("Failure", DMLType.BYT)] public sbyte m_failure;
            [DMLField("WebFailure", DMLType.BYT)] public sbyte m_webFailure;
            [DMLField("Credits", DMLType.INT)] public int m_credits;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_BUYPETELIXIRCONFIRM>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_BUYPETELIXIRCONFIRM>.Read(buf, this);
            }
        }
        public class MSG_BUYSEASONPASS : INetworkMessage
        {
            public const byte c_messageID = 41;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("ProjectID", DMLType.UINT)] public uint m_projectID;
            [DMLField("Purchase", DMLType.UBYT)] public byte m_purchase;
            [DMLField("Failure", DMLType.BYT)] public sbyte m_failure;
            [DMLField("WebFailure", DMLType.BYT)] public sbyte m_webFailure;
            [DMLField("Credits", DMLType.INT)] public int m_credits;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_BUYSEASONPASS>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_BUYSEASONPASS>.Read(buf, this);
            }
        }
        public class MSG_BattleBookAdd : INetworkMessage
        {
            public const byte c_messageID = 42;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("GlobalID", DMLType.GID)] public GID m_globalID;
            [DMLField("SpellID", DMLType.UINT)] public uint m_spellID;
            [DMLField("EnchantmentID", DMLType.UINT)] public uint m_enchantmentID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_BattleBookAdd>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_BattleBookAdd>.Read(buf, this);
            }
        }
        public class MSG_BattleBookClear : INetworkMessage
        {
            public const byte c_messageID = 43;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("GlobalID", DMLType.GID)] public GID m_globalID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_BattleBookClear>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_BattleBookClear>.Read(buf, this);
            }
        }
        public class MSG_BattleBookRating : INetworkMessage
        {
            public const byte c_messageID = 44;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("GlobalID", DMLType.GID)] public GID m_globalID;
            [DMLField("RatingData", DMLType.STR)] public ByteString m_ratingData;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_BattleBookRating>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_BattleBookRating>.Read(buf, this);
            }
        }
        public class MSG_BattleBookRemove : INetworkMessage
        {
            public const byte c_messageID = 45;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("GlobalID", DMLType.GID)] public GID m_globalID;
            [DMLField("SpellID", DMLType.UINT)] public uint m_spellID;
            [DMLField("EnchantmentID", DMLType.UINT)] public uint m_enchantmentID;
            [DMLField("Quantity", DMLType.UINT)] public uint m_quantity;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_BattleBookRemove>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_BattleBookRemove>.Read(buf, this);
            }
        }
        public class MSG_BattlegroundChatProjectData : INetworkMessage
        {
            public const byte c_messageID = 46;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("Data", DMLType.STR)] public ByteString m_data;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_BattlegroundChatProjectData>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_BattlegroundChatProjectData>.Read(buf, this);
            }
        }
        public class MSG_CANSEETIEREDSPELLGROUPS : INetworkMessage
        {
            public const byte c_messageID = 47;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("Visibility", DMLType.STR)] public ByteString m_visibility;
            [DMLField("CheckTieredSpellNotifications", DMLType.UBYT)] public byte m_checkTieredSpellNotifications;
            [DMLField("ShardType", DMLType.GID)] public GID m_shardType;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_CANSEETIEREDSPELLGROUPS>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_CANSEETIEREDSPELLGROUPS>.Read(buf, this);
            }
        }
        public class MSG_CASTLETOURSGOTOFRIEND : INetworkMessage
        {
            public const byte c_messageID = 48;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("PlayerGID", DMLType.GID)] public GID m_playerGID;
            [DMLField("TargetGID", DMLType.GID)] public GID m_targetGID;
            [DMLField("ZoneName", DMLType.STR)] public ByteString m_zoneName;
            [DMLField("ZoneGID", DMLType.GID)] public GID m_zoneGID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_CASTLETOURSGOTOFRIEND>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_CASTLETOURSGOTOFRIEND>.Read(buf, this);
            }
        }
        public class MSG_CLASSPROJECTCLAIMREWARD : INetworkMessage
        {
            public const byte c_messageID = 49;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("ProjectID", DMLType.UINT)] public uint m_projectID;
            [DMLField("RewardIndex", DMLType.UINT)] public uint m_rewardIndex;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_CLASSPROJECTCLAIMREWARD>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_CLASSPROJECTCLAIMREWARD>.Read(buf, this);
            }
        }
        public class MSG_CLASSPROJECTREQUESTLEADERBOARD : INetworkMessage
        {
            public const byte c_messageID = 50;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("ProjectID", DMLType.UINT)] public uint m_projectID;
            [DMLField("TopBuffer", DMLType.STR)] public ByteString m_topBuffer;
            [DMLField("Buffer", DMLType.STR)] public ByteString m_buffer;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_CLASSPROJECTREQUESTLEADERBOARD>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_CLASSPROJECTREQUESTLEADERBOARD>.Read(buf, this);
            }
        }
        public class MSG_CLASSPROJECTREQUESTTELEPORT : INetworkMessage
        {
            public const byte c_messageID = 51;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("ProjectID", DMLType.UINT)] public uint m_projectID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_CLASSPROJECTREQUESTTELEPORT>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_CLASSPROJECTREQUESTTELEPORT>.Read(buf, this);
            }
        }
        public class MSG_CLASSPROJECTSCSRRESULTS : INetworkMessage
        {
            public const byte c_messageID = 52;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("Result", DMLType.STR)] public ByteString m_result;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_CLASSPROJECTSCSRRESULTS>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_CLASSPROJECTSCSRRESULTS>.Read(buf, this);
            }
        }
        public class MSG_CLASSPROJECTSREQUESTFRIENDS : INetworkMessage
        {
            public const byte c_messageID = 53;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("ProjectID", DMLType.UINT)] public uint m_projectID;
            [DMLField("CharacterID", DMLType.GID)] public GID m_characterID;
            [DMLField("Data", DMLType.STR)] public ByteString m_data;
            [DMLField("PlayerName", DMLType.UINT)] public uint m_playerName;
            [DMLField("LootTable", DMLType.STR)] public ByteString m_lootTable;
            [DMLField("BuddyListID", DMLType.GID)] public GID m_buddyListID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_CLASSPROJECTSREQUESTFRIENDS>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_CLASSPROJECTSREQUESTFRIENDS>.Read(buf, this);
            }
        }
        public class MSG_CLASSPROJECTUSECROWNS : INetworkMessage
        {
            public const byte c_messageID = 54;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("ProjectID", DMLType.UINT)] public uint m_projectID;
            [DMLField("Level", DMLType.UINT)] public uint m_level;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_CLASSPROJECTUSECROWNS>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_CLASSPROJECTUSECROWNS>.Read(buf, this);
            }
        }
        public class MSG_CLASSPROJECTUSETOKEN : INetworkMessage
        {
            public const byte c_messageID = 55;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("ProjectID", DMLType.UINT)] public uint m_projectID;
            [DMLField("Level", DMLType.UINT)] public uint m_level;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_CLASSPROJECTUSETOKEN>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_CLASSPROJECTUSETOKEN>.Read(buf, this);
            }
        }
        public class MSG_CLEARALLINTERACTIONS : INetworkMessage
        {
            public const byte c_messageID = 56;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_CLEARALLINTERACTIONS>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_CLEARALLINTERACTIONS>.Read(buf, this);
            }
        }
        public class MSG_CLEARRESUMEINSTANCE : INetworkMessage
        {
            public const byte c_messageID = 57;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_CLEARRESUMEINSTANCE>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_CLEARRESUMEINSTANCE>.Read(buf, this);
            }
        }
        public class MSG_CLIENTREQUESTTEAMHELPWORLDINFO : INetworkMessage
        {
            public const byte c_messageID = 58;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("WorldID", DMLType.UINT)] public uint m_worldID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_CLIENTREQUESTTEAMHELPWORLDINFO>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_CLIENTREQUESTTEAMHELPWORLDINFO>.Read(buf, this);
            }
        }
        public class MSG_CLIENTZONED : INetworkMessage
        {
            public const byte c_messageID = 59;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("ZoneNameID", DMLType.UINT)] public uint m_zoneNameID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_CLIENTZONED>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_CLIENTZONED>.Read(buf, this);
            }
        }
        public class MSG_COMPLETEINSTANCE : INetworkMessage
        {
            public const byte c_messageID = 60;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("ClusterGID", DMLType.GID)] public GID m_clusterGID;
            [DMLField("Player1", DMLType.GID)] public GID m_player1;
            [DMLField("Player2", DMLType.GID)] public GID m_player2;
            [DMLField("Player3", DMLType.GID)] public GID m_player3;
            [DMLField("Player4", DMLType.GID)] public GID m_player4;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_COMPLETEINSTANCE>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_COMPLETEINSTANCE>.Read(buf, this);
            }
        }
        public class MSG_COMPLETEINSTANCE2 : INetworkMessage
        {
            public const byte c_messageID = 61;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("ClusterGID", DMLType.GID)] public GID m_clusterGID;
            [DMLField("PlayerGID", DMLType.GID)] public GID m_playerGID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_COMPLETEINSTANCE2>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_COMPLETEINSTANCE2>.Read(buf, this);
            }
        }
        public class MSG_CONNECTIONSTATS : INetworkMessage
        {
            public const byte c_messageID = 62;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("ServerHostname", DMLType.STR)] public ByteString m_serverHostname;
            [DMLField("ServerPort", DMLType.INT)] public int m_serverPort;
            [DMLField("ConnectMS", DMLType.INT)] public int m_connectMS;
            [DMLField("Timeouts", DMLType.INT)] public int m_timeouts;
            [DMLField("Errors", DMLType.INT)] public int m_errors;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_CONNECTIONSTATS>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_CONNECTIONSTATS>.Read(buf, this);
            }
        }
        public class MSG_CREATENEWEQUIPMENTSET : INetworkMessage
        {
            public const byte c_messageID = 63;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("SetName", DMLType.UINT)] public uint m_setName;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_CREATENEWEQUIPMENTSET>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_CREATENEWEQUIPMENTSET>.Read(buf, this);
            }
        }
        public class MSG_CREATESETFAILED : INetworkMessage
        {
            public const byte c_messageID = 64;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_CREATESETFAILED>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_CREATESETFAILED>.Read(buf, this);
            }
        }
        public class MSG_CROWNSREWARDSTIERREACHED : INetworkMessage
        {
            public const byte c_messageID = 65;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("Data", DMLType.STR)] public ByteString m_data;
            [DMLField("Delay", DMLType.INT)] public int m_delay;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_CROWNSREWARDSTIERREACHED>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_CROWNSREWARDSTIERREACHED>.Read(buf, this);
            }
        }
        public class MSG_CSRADDFISH : INetworkMessage
        {
            public const byte c_messageID = 66;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("CharacterGID", DMLType.GID)] public GID m_characterGID;
            [DMLField("FishTemplateID", DMLType.UINT)] public uint m_fishTemplateID;
            [DMLField("Size", DMLType.FLT)] public float m_size;
            [DMLField("Count", DMLType.UINT)] public uint m_count;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_CSRADDFISH>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_CSRADDFISH>.Read(buf, this);
            }
        }
        public class MSG_CSRDELETEGIFT : INetworkMessage
        {
            public const byte c_messageID = 67;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("GiftID", DMLType.STR)] public ByteString m_giftID;
            [DMLField("Success", DMLType.INT)] public int m_success;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_CSRDELETEGIFT>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_CSRDELETEGIFT>.Read(buf, this);
            }
        }
        public class MSG_CSRREQUESTFISHLIST : INetworkMessage
        {
            public const byte c_messageID = 68;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("CharacterGID", DMLType.GID)] public GID m_characterGID;
            [DMLField("FishData", DMLType.STR)] public ByteString m_fishData;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_CSRREQUESTFISHLIST>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_CSRREQUESTFISHLIST>.Read(buf, this);
            }
        }
        public class MSG_CSRREQUESTGLOBALREGISTRY : INetworkMessage
        {
            public const byte c_messageID = 69;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("Buffer", DMLType.STR)] public ByteString m_buffer;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_CSRREQUESTGLOBALREGISTRY>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_CSRREQUESTGLOBALREGISTRY>.Read(buf, this);
            }
        }
        public class MSG_CSRSETFRIENDSTATUS : INetworkMessage
        {
            public const byte c_messageID = 70;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("CharacterGID", DMLType.GID)] public GID m_characterGID;
            [DMLField("FriendGID", DMLType.GID)] public GID m_friendGID;
            [DMLField("StatusCode", DMLType.INT)] public int m_statusCode;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_CSRSETFRIENDSTATUS>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_CSRSETFRIENDSTATUS>.Read(buf, this);
            }
        }
        public class MSG_CSRTRASHFISH : INetworkMessage
        {
            public const byte c_messageID = 71;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("CharacterGID", DMLType.GID)] public GID m_characterGID;
            [DMLField("FishTemplateID", DMLType.UINT)] public uint m_fishTemplateID;
            [DMLField("Size", DMLType.FLT)] public float m_size;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_CSRTRASHFISH>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_CSRTRASHFISH>.Read(buf, this);
            }
        }
        public class MSG_DAILYPVPCOMPLETED : INetworkMessage
        {
            public const byte c_messageID = 72;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("ConsecutiveDays", DMLType.UBYT)] public byte m_consecutiveDays;
            [DMLField("ItemTemplateID", DMLType.UINT)] public uint m_itemTemplateID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_DAILYPVPCOMPLETED>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_DAILYPVPCOMPLETED>.Read(buf, this);
            }
        }
        public class MSG_DAILYQUESTEFFECT : INetworkMessage
        {
            public const byte c_messageID = 73;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("EffectType", DMLType.UINT)] public uint m_effectType;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_DAILYQUESTEFFECT>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_DAILYQUESTEFFECT>.Read(buf, this);
            }
        }
        public class MSG_DELETEEQUIPMENTSET : INetworkMessage
        {
            public const byte c_messageID = 74;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("Set", DMLType.STR)] public ByteString m_set;
            [DMLField("GlobalID", DMLType.GID)] public GID m_globalID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_DELETEEQUIPMENTSET>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_DELETEEQUIPMENTSET>.Read(buf, this);
            }
        }
        public class MSG_DELETESETSWITHITEM : INetworkMessage
        {
            public const byte c_messageID = 75;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("ItemID", DMLType.GID)] public GID m_itemID;
            [DMLField("GlobalID", DMLType.GID)] public GID m_globalID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_DELETESETSWITHITEM>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_DELETESETSWITHITEM>.Read(buf, this);
            }
        }
        public class MSG_DISPLAYCOLLECTEDESSENCES : INetworkMessage
        {
            public const byte c_messageID = 76;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("EssenceData", DMLType.STR)] public ByteString m_essenceData;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_DISPLAYCOLLECTEDESSENCES>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_DISPLAYCOLLECTEDESSENCES>.Read(buf, this);
            }
        }
        public class MSG_DISPLAYHELPGUI : INetworkMessage
        {
            public const byte c_messageID = 77;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("GUIFilename", DMLType.STR)] public ByteString m_gUIFilename;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_DISPLAYHELPGUI>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_DISPLAYHELPGUI>.Read(buf, this);
            }
        }
        public class MSG_DISPLAYMESSAGE : INetworkMessage
        {
            public const byte c_messageID = 78;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("Message", DMLType.STR)] public ByteString m_message;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_DISPLAYMESSAGE>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_DISPLAYMESSAGE>.Read(buf, this);
            }
        }
        public class MSG_DISPLAYPETONLYMESSAGE : INetworkMessage
        {
            public const byte c_messageID = 79;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_DISPLAYPETONLYMESSAGE>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_DISPLAYPETONLYMESSAGE>.Read(buf, this);
            }
        }
        public class MSG_EQUIPJEWELREQUEST : INetworkMessage
        {
            public const byte c_messageID = 80;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("ItemGID", DMLType.GID)] public GID m_itemGID;
            [DMLField("JewelGID", DMLType.GID)] public GID m_jewelGID;
            [DMLField("SocketNumber", DMLType.UBYT)] public byte m_socketNumber;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_EQUIPJEWELREQUEST>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_EQUIPJEWELREQUEST>.Read(buf, this);
            }
        }
        public class MSG_EQUIPJEWELTOITEM : INetworkMessage
        {
            public const byte c_messageID = 81;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("GlobalID", DMLType.GID)] public GID m_globalID;
            [DMLField("ItemGID", DMLType.GID)] public GID m_itemGID;
            [DMLField("SocketNumber", DMLType.UBYT)] public byte m_socketNumber;
            [DMLField("JewelGID", DMLType.GID)] public GID m_jewelGID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_EQUIPJEWELTOITEM>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_EQUIPJEWELTOITEM>.Read(buf, this);
            }
        }
        public class MSG_EQUIPMENTSETCREATED : INetworkMessage
        {
            public const byte c_messageID = 82;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("NewSet", DMLType.STR)] public ByteString m_newSet;
            [DMLField("GlobalID", DMLType.GID)] public GID m_globalID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_EQUIPMENTSETCREATED>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_EQUIPMENTSETCREATED>.Read(buf, this);
            }
        }
        public class MSG_EQUIPNEWJEWELTOITEM : INetworkMessage
        {
            public const byte c_messageID = 83;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("GlobalID", DMLType.GID)] public GID m_globalID;
            [DMLField("ItemGID", DMLType.GID)] public GID m_itemGID;
            [DMLField("SocketNumber", DMLType.UBYT)] public byte m_socketNumber;
            [DMLField("SerializedJewel", DMLType.STR)] public ByteString m_serializedJewel;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_EQUIPNEWJEWELTOITEM>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_EQUIPNEWJEWELTOITEM>.Read(buf, this);
            }
        }
        public class MSG_EQUIPRECIPE : INetworkMessage
        {
            public const byte c_messageID = 84;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("GlobalID", DMLType.GID)] public GID m_globalID;
            [DMLField("RecipeID", DMLType.UINT)] public uint m_recipeID;
            [DMLField("Equip", DMLType.UBYT)] public byte m_equip;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_EQUIPRECIPE>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_EQUIPRECIPE>.Read(buf, this);
            }
        }
        public class MSG_EQUIPSET : INetworkMessage
        {
            public const byte c_messageID = 85;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("Set", DMLType.STR)] public ByteString m_set;
            [DMLField("GlobalID", DMLType.GID)] public GID m_globalID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_EQUIPSET>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_EQUIPSET>.Read(buf, this);
            }
        }
        public class MSG_FISHINGLEVELUP : INetworkMessage
        {
            public const byte c_messageID = 86;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("GlobalID", DMLType.GID)] public GID m_globalID;
            [DMLField("NewLevel", DMLType.INT)] public int m_newLevel;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_FISHINGLEVELUP>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_FISHINGLEVELUP>.Read(buf, this);
            }
        }
        public class MSG_GAINPETXP : INetworkMessage
        {
            public const byte c_messageID = 87;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("PetGID", DMLType.GID)] public GID m_petGID;
            [DMLField("XP", DMLType.UINT)] public uint m_xP;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_GAINPETXP>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_GAINPETXP>.Read(buf, this);
            }
        }
        public class MSG_GETITEMINFO : INetworkMessage
        {
            public const byte c_messageID = 88;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("ItemID", DMLType.UINT)] public uint m_itemID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_GETITEMINFO>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_GETITEMINFO>.Read(buf, this);
            }
        }
        public class MSG_GoHomeConfirm : INetworkMessage
        {
            public const byte c_messageID = 89;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("PromptKey", DMLType.STR)] public ByteString m_promptKey;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_GoHomeConfirm>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_GoHomeConfirm>.Read(buf, this);
            }
        }
        public class MSG_GotoDormConfirm : INetworkMessage
        {
            public const byte c_messageID = 90;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("PromptKey", DMLType.STR)] public ByteString m_promptKey;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_GotoDormConfirm>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_GotoDormConfirm>.Read(buf, this);
            }
        }
        public class MSG_GotoPlayerConfirm : INetworkMessage
        {
            public const byte c_messageID = 91;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("PromptKey", DMLType.STR)] public ByteString m_promptKey;
            [DMLField("TargetCharacterID", DMLType.GID)] public GID m_targetCharacterID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_GotoPlayerConfirm>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_GotoPlayerConfirm>.Read(buf, this);
            }
        }
        public class MSG_HATCHMAKINGMESSAGE : INetworkMessage
        {
            public const byte c_messageID = 92;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("MessageType", DMLType.UINT)] public uint m_messageType;
            [DMLField("MyPetTemplateID", DMLType.UINT)] public uint m_myPetTemplateID;
            [DMLField("MyPetName", DMLType.UINT)] public uint m_myPetName;
            [DMLField("TheirPetTemplateID", DMLType.UINT)] public uint m_theirPetTemplateID;
            [DMLField("HatchPepperCount", DMLType.UBYT)] public byte m_hatchPepperCount;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_HATCHMAKINGMESSAGE>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_HATCHMAKINGMESSAGE>.Read(buf, this);
            }
        }
        public class MSG_HATCHMAKINGSCSRRESULTS : INetworkMessage
        {
            public const byte c_messageID = 93;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("Result", DMLType.STR)] public ByteString m_result;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_HATCHMAKINGSCSRRESULTS>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_HATCHMAKINGSCSRRESULTS>.Read(buf, this);
            }
        }
        public class MSG_HATCHMAKINGSEARCHRESULTS : INetworkMessage
        {
            public const byte c_messageID = 94;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("CharacterID", DMLType.GID)] public GID m_characterID;
            [DMLField("Data", DMLType.STR)] public ByteString m_data;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_HATCHMAKINGSEARCHRESULTS>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_HATCHMAKINGSEARCHRESULTS>.Read(buf, this);
            }
        }
        public class MSG_HATCHMAKINGSREQUESTPREMIUMPETEXEMPTIONS : INetworkMessage
        {
            public const byte c_messageID = 95;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("Buffer", DMLType.STR)] public ByteString m_buffer;
            [DMLField("PremiumPetExceptionCode", DMLType.UINT)] public uint m_premiumPetExceptionCode;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_HATCHMAKINGSREQUESTPREMIUMPETEXEMPTIONS>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_HATCHMAKINGSREQUESTPREMIUMPETEXEMPTIONS>.Read(buf, this);
            }
        }
        public class MSG_HATCHMAKINGSTATUS : INetworkMessage
        {
            public const byte c_messageID = 96;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("ErrorCode", DMLType.UINT)] public uint m_errorCode;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_HATCHMAKINGSTATUS>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_HATCHMAKINGSTATUS>.Read(buf, this);
            }
        }
        public class MSG_HATCHMAKINGSUPDATEHATCHDAYPET : INetworkMessage
        {
            public const byte c_messageID = 97;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("GlobalID", DMLType.GID)] public GID m_globalID;
            [DMLField("PetTemplateID", DMLType.INT)] public int m_petTemplateID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_HATCHMAKINGSUPDATEHATCHDAYPET>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_HATCHMAKINGSUPDATEHATCHDAYPET>.Read(buf, this);
            }
        }
        public class MSG_HATCHMAKINGSUPDATEHATCHDAYPET2 : INetworkMessage
        {
            public const byte c_messageID = 98;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("PetTemplateID", DMLType.INT)] public int m_petTemplateID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_HATCHMAKINGSUPDATEHATCHDAYPET2>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_HATCHMAKINGSUPDATEHATCHDAYPET2>.Read(buf, this);
            }
        }
        public class MSG_HATCHMAKINGUSETOME : INetworkMessage
        {
            public const byte c_messageID = 99;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_HATCHMAKINGUSETOME>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_HATCHMAKINGUSETOME>.Read(buf, this);
            }
        }
        public class MSG_HOLIDAYDATA : INetworkMessage
        {
            public const byte c_messageID = 100;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("SerializedHolidayLoadingScreens", DMLType.STR)] public ByteString m_serializedHolidayLoadingScreens;
            [DMLField("HolidayLoadingScreensDisplayPer", DMLType.UINT)] public uint m_holidayLoadingScreensDisplayPer;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_HOLIDAYDATA>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_HOLIDAYDATA>.Read(buf, this);
            }
        }
        public class MSG_INVITEALLTOBASICCHATCHANNEL : INetworkMessage
        {
            public const byte c_messageID = 101;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("PlayerGID", DMLType.GID)] public GID m_playerGID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_INVITEALLTOBASICCHATCHANNEL>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_INVITEALLTOBASICCHATCHANNEL>.Read(buf, this);
            }
        }
        public class MSG_INVITETOBASICCHATCHANNEL : INetworkMessage
        {
            public const byte c_messageID = 102;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("PlayerGID", DMLType.GID)] public GID m_playerGID;
            [DMLField("InvitingPlayerGID", DMLType.GID)] public GID m_invitingPlayerGID;
            [DMLField("InvitingPlayerNameBlob", DMLType.STR)] public ByteString m_invitingPlayerNameBlob;
            [DMLField("ChannelPlayerGID", DMLType.GID)] public GID m_channelPlayerGID;
            [DMLField("ChannelPlayerNameBlob", DMLType.STR)] public ByteString m_channelPlayerNameBlob;
            [DMLField("ConfirmationStatus", DMLType.UBYT)] public byte m_confirmationStatus;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_INVITETOBASICCHATCHANNEL>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_INVITETOBASICCHATCHANNEL>.Read(buf, this);
            }
        }
        public class MSG_ISFRIENDSWITHHOUSEOWNER : INetworkMessage
        {
            public const byte c_messageID = 103;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("OriginatorID", DMLType.GID)] public GID m_originatorID;
            [DMLField("HouseOwnerID", DMLType.GID)] public GID m_houseOwnerID;
            [DMLField("IsFriend", DMLType.UBYT)] public byte m_isFriend;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_ISFRIENDSWITHHOUSEOWNER>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_ISFRIENDSWITHHOUSEOWNER>.Read(buf, this);
            }
        }
        public class MSG_ITEMFINDERHOUSECOMPLETE : INetworkMessage
        {
            public const byte c_messageID = 104;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_ITEMFINDERHOUSECOMPLETE>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_ITEMFINDERHOUSECOMPLETE>.Read(buf, this);
            }
        }
        public class MSG_ITEMFINDERREQUESTBANK : INetworkMessage
        {
            public const byte c_messageID = 105;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_ITEMFINDERREQUESTBANK>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_ITEMFINDERREQUESTBANK>.Read(buf, this);
            }
        }
        public class MSG_ITEMFINDERREQUESTHOUSE : INetworkMessage
        {
            public const byte c_messageID = 106;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("Data", DMLType.STR)] public ByteString m_data;
            [DMLField("HouseTemplateID", DMLType.UINT)] public uint m_houseTemplateID;
            [DMLField("SectionCode", DMLType.BYT)] public sbyte m_sectionCode;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_ITEMFINDERREQUESTHOUSE>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_ITEMFINDERREQUESTHOUSE>.Read(buf, this);
            }
        }
        public class MSG_ITEMIDENTIFIERINFO : INetworkMessage
        {
            public const byte c_messageID = 107;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("IsAvailable", DMLType.UBYT)] public byte m_isAvailable;
            [DMLField("Locations", DMLType.STR)] public ByteString m_locations;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_ITEMIDENTIFIERINFO>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_ITEMIDENTIFIERINFO>.Read(buf, this);
            }
        }
        public class MSG_Infraction : INetworkMessage
        {
            public const byte c_messageID = 108;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("GlobalID", DMLType.GID)] public GID m_globalID;
            [DMLField("Add", DMLType.STR)] public ByteString m_add;
            [DMLField("Remove", DMLType.UINT)] public uint m_remove;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_Infraction>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_Infraction>.Read(buf, this);
            }
        }
        public class MSG_JEWELSOCKETLOCKUPDATE : INetworkMessage
        {
            public const byte c_messageID = 109;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("GlobalID", DMLType.GID)] public GID m_globalID;
            [DMLField("ItemGID", DMLType.GID)] public GID m_itemGID;
            [DMLField("Locked", DMLType.UBYT)] public byte m_locked;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_JEWELSOCKETLOCKUPDATE>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_JEWELSOCKETLOCKUPDATE>.Read(buf, this);
            }
        }
        public class MSG_JEWELSOCKETUNLOCKCOST : INetworkMessage
        {
            public const byte c_messageID = 110;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("Data", DMLType.STR)] public ByteString m_data;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_JEWELSOCKETUNLOCKCOST>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_JEWELSOCKETUNLOCKCOST>.Read(buf, this);
            }
        }
        public class MSG_JOINBASICCHATCHANNEL : INetworkMessage
        {
            public const byte c_messageID = 111;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("PlayerGID", DMLType.GID)] public GID m_playerGID;
            [DMLField("ChannelData", DMLType.STR)] public ByteString m_channelData;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_JOINBASICCHATCHANNEL>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_JOINBASICCHATCHANNEL>.Read(buf, this);
            }
        }
        public class MSG_KHANDANCESTATUS : INetworkMessage
        {
            public const byte c_messageID = 112;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("Status", DMLType.INT)] public int m_status;
            [DMLField("X", DMLType.INT)] public int m_x;
            [DMLField("Y", DMLType.INT)] public int m_y;
            [DMLField("Z", DMLType.INT)] public int m_z;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_KHANDANCESTATUS>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_KHANDANCESTATUS>.Read(buf, this);
            }
        }
        public class MSG_LAVALOCKSTATUS : INetworkMessage
        {
            public const byte c_messageID = 113;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("Status", DMLType.INT)] public int m_status;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_LAVALOCKSTATUS>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_LAVALOCKSTATUS>.Read(buf, this);
            }
        }
        public class MSG_LOGCLASSICMODE : INetworkMessage
        {
            public const byte c_messageID = 114;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("ClassicMode", DMLType.UBYT)] public byte m_classicMode;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_LOGCLASSICMODE>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_LOGCLASSICMODE>.Read(buf, this);
            }
        }
        public class MSG_LOGVIDEOCAPABILITIES : INetworkMessage
        {
            public const byte c_messageID = 115;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("UserCapsBin", DMLType.STR)] public ByteString m_userCapsBin;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_LOGVIDEOCAPABILITIES>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_LOGVIDEOCAPABILITIES>.Read(buf, this);
            }
        }
        public class MSG_MAGICMIRRORCHANGEPLAYER : INetworkMessage
        {
            public const byte c_messageID = 116;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("GlobalID", DMLType.GID)] public GID m_globalID;
            [DMLField("HairStyleIndex", DMLType.INT)] public int m_hairStyleIndex;
            [DMLField("HairColorIndex", DMLType.INT)] public int m_hairColorIndex;
            [DMLField("SkinColorIndex", DMLType.INT)] public int m_skinColorIndex;
            [DMLField("FaceStyleIndex", DMLType.INT)] public int m_faceStyleIndex;
            [DMLField("FacePaintIndex", DMLType.INT)] public int m_facePaintIndex;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_MAGICMIRRORCHANGEPLAYER>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_MAGICMIRRORCHANGEPLAYER>.Read(buf, this);
            }
        }
        public class MSG_MAGICMIRRORREQUESTCHANGE : INetworkMessage
        {
            public const byte c_messageID = 117;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("GlobalID", DMLType.GID)] public GID m_globalID;
            [DMLField("HairStyleID", DMLType.UINT)] public uint m_hairStyleID;
            [DMLField("HairColorID", DMLType.UINT)] public uint m_hairColorID;
            [DMLField("SkinColorID", DMLType.UINT)] public uint m_skinColorID;
            [DMLField("FaceStyleID", DMLType.UINT)] public uint m_faceStyleID;
            [DMLField("EyeColorID", DMLType.UINT)] public uint m_eyeColorID;
            [DMLField("FacePaintID", DMLType.INT)] public int m_facePaintID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_MAGICMIRRORREQUESTCHANGE>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_MAGICMIRRORREQUESTCHANGE>.Read(buf, this);
            }
        }
        public class MSG_MAGICMIRRORSHOPOPEN : INetworkMessage
        {
            public const byte c_messageID = 118;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("GlobalID", DMLType.GID)] public GID m_globalID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_MAGICMIRRORSHOPOPEN>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_MAGICMIRRORSHOPOPEN>.Read(buf, this);
            }
        }
        public class MSG_MAPREQUIREMENTS : INetworkMessage
        {
            public const byte c_messageID = 119;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("Data", DMLType.STR)] public ByteString m_data;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_MAPREQUIREMENTS>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_MAPREQUIREMENTS>.Read(buf, this);
            }
        }
        public class MSG_MONSTERMAGICLEVELUP : INetworkMessage
        {
            public const byte c_messageID = 120;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("GlobalID", DMLType.GID)] public GID m_globalID;
            [DMLField("NewLevel", DMLType.INT)] public int m_newLevel;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_MONSTERMAGICLEVELUP>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_MONSTERMAGICLEVELUP>.Read(buf, this);
            }
        }
        public class MSG_MONSTERMAGICREQUESTCREATE : INetworkMessage
        {
            public const byte c_messageID = 121;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("GlobalID", DMLType.GID)] public GID m_globalID;
            [DMLField("RequestType", DMLType.INT)] public int m_requestType;
            [DMLField("MobTemplate", DMLType.UINT)] public uint m_mobTemplate;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_MONSTERMAGICREQUESTCREATE>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_MONSTERMAGICREQUESTCREATE>.Read(buf, this);
            }
        }
        public class MSG_MONSTERMAGICUSETOME : INetworkMessage
        {
            public const byte c_messageID = 122;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_MONSTERMAGICUSETOME>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_MONSTERMAGICUSETOME>.Read(buf, this);
            }
        }
        public class MSG_MOVEEQUIPMENTSET : INetworkMessage
        {
            public const byte c_messageID = 123;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("SetNumber", DMLType.UINT)] public uint m_setNumber;
            [DMLField("MoveDown", DMLType.UBYT)] public byte m_moveDown;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_MOVEEQUIPMENTSET>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_MOVEEQUIPMENTSET>.Read(buf, this);
            }
        }
        public class MSG_OPENCLASSPROJECTPORTAL : INetworkMessage
        {
            public const byte c_messageID = 124;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("ProjectID", DMLType.UINT)] public uint m_projectID;
            [DMLField("Tokens", DMLType.UINT)] public uint m_tokens;
            [DMLField("Level", DMLType.UINT)] public uint m_level;
            [DMLField("ClaimedDailyCredits", DMLType.BYT)] public sbyte m_claimedDailyCredits;
            [DMLField("TeleporterCheckPoint", DMLType.UBYT)] public byte m_teleporterCheckPoint;
            [DMLField("GlobalID", DMLType.GID)] public GID m_globalID;
            [DMLField("WebFailure", DMLType.BYT)] public sbyte m_webFailure;
            [DMLField("Credits", DMLType.INT)] public int m_credits;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_OPENCLASSPROJECTPORTAL>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_OPENCLASSPROJECTPORTAL>.Read(buf, this);
            }
        }
        public class MSG_OPENITEMFINDER : INetworkMessage
        {
            public const byte c_messageID = 125;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("GlobalID", DMLType.GID)] public GID m_globalID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_OPENITEMFINDER>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_OPENITEMFINDER>.Read(buf, this);
            }
        }
        public class MSG_PETELIXIRBUYREQUEST : INetworkMessage
        {
            public const byte c_messageID = 126;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("GlobalID", DMLType.GID)] public GID m_globalID;
            [DMLField("WebFailure", DMLType.BYT)] public sbyte m_webFailure;
            [DMLField("Credits", DMLType.INT)] public int m_credits;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PETELIXIRBUYREQUEST>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PETELIXIRBUYREQUEST>.Read(buf, this);
            }
        }
        public class MSG_PETELIXIROPEN : INetworkMessage
        {
            public const byte c_messageID = 127;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("GlobalID", DMLType.GID)] public GID m_globalID;
            [DMLField("WebFailure", DMLType.BYT)] public sbyte m_webFailure;
            [DMLField("Credits", DMLType.INT)] public int m_credits;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PETELIXIROPEN>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PETELIXIROPEN>.Read(buf, this);
            }
        }
        public class MSG_PETFEEDHAPPINESS : INetworkMessage
        {
            public const byte c_messageID = 128;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("SnackTemplateID", DMLType.UINT)] public uint m_snackTemplateID;
            [DMLField("FeedStack", DMLType.UBYT)] public byte m_feedStack;
            [DMLField("Happiness", DMLType.UINT)] public uint m_happiness;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PETFEEDHAPPINESS>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PETFEEDHAPPINESS>.Read(buf, this);
            }
        }
        public class MSG_PETGAMESKIP : INetworkMessage
        {
            public const byte c_messageID = 129;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("GlobalID", DMLType.GID)] public GID m_globalID;
            [DMLField("Game", DMLType.STR)] public ByteString m_game;
            [DMLField("Bonus", DMLType.UBYT)] public byte m_bonus;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PETGAMESKIP>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PETGAMESKIP>.Read(buf, this);
            }
        }
        public class MSG_PETGAMESKIPFEED : INetworkMessage
        {
            public const byte c_messageID = 130;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("GlobalID", DMLType.GID)] public GID m_globalID;
            [DMLField("Game", DMLType.STR)] public ByteString m_game;
            [DMLField("Data", DMLType.STR)] public ByteString m_data;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PETGAMESKIPFEED>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PETGAMESKIPFEED>.Read(buf, this);
            }
        }
        public class MSG_PETTELEPORT : INetworkMessage
        {
            public const byte c_messageID = 131;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("PositionX", DMLType.FLT)] public float m_positionX;
            [DMLField("PositionY", DMLType.FLT)] public float m_positionY;
            [DMLField("PositionZ", DMLType.FLT)] public float m_positionZ;
            [DMLField("Yaw", DMLType.FLT)] public float m_yaw;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PETTELEPORT>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PETTELEPORT>.Read(buf, this);
            }
        }
        public class MSG_PETTOMEPETADDED : INetworkMessage
        {
            public const byte c_messageID = 132;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("GlobalID", DMLType.GID)] public GID m_globalID;
            [DMLField("PetTemplateID", DMLType.UINT)] public uint m_petTemplateID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PETTOMEPETADDED>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PETTOMEPETADDED>.Read(buf, this);
            }
        }
        public class MSG_PHOTOMANCYUSETOME : INetworkMessage
        {
            public const byte c_messageID = 133;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PHOTOMANCYUSETOME>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PHOTOMANCYUSETOME>.Read(buf, this);
            }
        }
        public class MSG_PHOTOTAKEN : INetworkMessage
        {
            public const byte c_messageID = 134;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("Buffer", DMLType.STR)] public ByteString m_buffer;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PHOTOTAKEN>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PHOTOTAKEN>.Read(buf, this);
            }
        }
        public class MSG_PUBLICJEWELSOCKETUPDATE : INetworkMessage
        {
            public const byte c_messageID = 135;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("GlobalID", DMLType.GID)] public GID m_globalID;
            [DMLField("ItemID", DMLType.UINT)] public uint m_itemID;
            [DMLField("SerializedInfo", DMLType.STR)] public ByteString m_serializedInfo;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PUBLICJEWELSOCKETUPDATE>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_PUBLICJEWELSOCKETUPDATE>.Read(buf, this);
            }
        }
        public class MSG_QUICKSELLREQUEST : INetworkMessage
        {
            public const byte c_messageID = 136;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("Data", DMLType.STR)] public ByteString m_data;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_QUICKSELLREQUEST>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_QUICKSELLREQUEST>.Read(buf, this);
            }
        }
        public class MSG_RADIALZONECLUSTERQUICKCHATEXT : INetworkMessage
        {
            public const byte c_messageID = 137;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("SourceName", DMLType.STR)] public ByteString m_sourceName;
            [DMLField("SourceID", DMLType.GID)] public GID m_sourceID;
            [DMLField("Message", DMLType.STR)] public ByteString m_message;
            [DMLField("Filter", DMLType.UBYT)] public byte m_filter;
            [DMLField("IsOwner", DMLType.UBYT)] public byte m_isOwner;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_RADIALZONECLUSTERQUICKCHATEXT>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_RADIALZONECLUSTERQUICKCHATEXT>.Read(buf, this);
            }
        }
        public class MSG_READTUTORIALTIP : INetworkMessage
        {
            public const byte c_messageID = 138;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("GlobalID", DMLType.GID)] public GID m_globalID;
            [DMLField("TutorialTipID", DMLType.UINT)] public uint m_tutorialTipID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_READTUTORIALTIP>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_READTUTORIALTIP>.Read(buf, this);
            }
        }
        public class MSG_REINTERACT : INetworkMessage
        {
            public const byte c_messageID = 139;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_REINTERACT>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_REINTERACT>.Read(buf, this);
            }
        }
        public class MSG_REMOVECROWNSREWARDSEVENT : INetworkMessage
        {
            public const byte c_messageID = 140;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("EventID", DMLType.UINT)] public uint m_eventID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_REMOVECROWNSREWARDSEVENT>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_REMOVECROWNSREWARDSEVENT>.Read(buf, this);
            }
        }
        public class MSG_REMOVEITEMLOCKS : INetworkMessage
        {
            public const byte c_messageID = 141;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("GlobalID", DMLType.GID)] public GID m_globalID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_REMOVEITEMLOCKS>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_REMOVEITEMLOCKS>.Read(buf, this);
            }
        }
        public class MSG_REMOVEPLAYERFROMBASICCHATCHANNEL : INetworkMessage
        {
            public const byte c_messageID = 142;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("PlayerGID", DMLType.GID)] public GID m_playerGID;
            [DMLField("OwningPlayerGID", DMLType.GID)] public GID m_owningPlayerGID;
            [DMLField("IsLeave", DMLType.UBYT)] public byte m_isLeave;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_REMOVEPLAYERFROMBASICCHATCHANNEL>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_REMOVEPLAYERFROMBASICCHATCHANNEL>.Read(buf, this);
            }
        }
        public class MSG_REMOVEPLAYERFROMBASICCHATCHANNELUPDATE : INetworkMessage
        {
            public const byte c_messageID = 143;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("PlayerGID", DMLType.GID)] public GID m_playerGID;
            [DMLField("RemovedPlayerGID", DMLType.GID)] public GID m_removedPlayerGID;
            [DMLField("OwningPlayerGID", DMLType.GID)] public GID m_owningPlayerGID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_REMOVEPLAYERFROMBASICCHATCHANNELUPDATE>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_REMOVEPLAYERFROMBASICCHATCHANNELUPDATE>.Read(buf, this);
            }
        }
        public class MSG_REQUESTBATTLEGROUNDSLOOT : INetworkMessage
        {
            public const byte c_messageID = 144;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_REQUESTBATTLEGROUNDSLOOT>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_REQUESTBATTLEGROUNDSLOOT>.Read(buf, this);
            }
        }
        public class MSG_REQUESTCHATSTATS : INetworkMessage
        {
            public const byte c_messageID = 145;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("PlayerGID", DMLType.GID)] public GID m_playerGID;
            [DMLField("Message", DMLType.STR)] public ByteString m_message;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_REQUESTCHATSTATS>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_REQUESTCHATSTATS>.Read(buf, this);
            }
        }
        public class MSG_REQUESTCLASSPROJECTINFO : INetworkMessage
        {
            public const byte c_messageID = 146;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("Buffer", DMLType.STR)] public ByteString m_buffer;
            [DMLField("TokenBuffer", DMLType.STR)] public ByteString m_tokenBuffer;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_REQUESTCLASSPROJECTINFO>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_REQUESTCLASSPROJECTINFO>.Read(buf, this);
            }
        }
        public class MSG_REQUESTCROWNSREWARDSEVENTS : INetworkMessage
        {
            public const byte c_messageID = 147;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_REQUESTCROWNSREWARDSEVENTS>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_REQUESTCROWNSREWARDSEVENTS>.Read(buf, this);
            }
        }
        public class MSG_REQUESTHATCHMAKING : INetworkMessage
        {
            public const byte c_messageID = 148;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("GlobalID", DMLType.GID)] public GID m_globalID;
            [DMLField("PetData", DMLType.STR)] public ByteString m_petData;
            [DMLField("CrownCost", DMLType.FLT)] public float m_crownCost;
            [DMLField("HatchDayCode", DMLType.UINT)] public uint m_hatchDayCode;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_REQUESTHATCHMAKING>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_REQUESTHATCHMAKING>.Read(buf, this);
            }
        }
        public class MSG_REQUESTHATCHMAKINGADDPET : INetworkMessage
        {
            public const byte c_messageID = 149;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("PetID", DMLType.GID)] public GID m_petID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_REQUESTHATCHMAKINGADDPET>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_REQUESTHATCHMAKINGADDPET>.Read(buf, this);
            }
        }
        public class MSG_REQUESTHATCHMAKINGFRIENDPETS : INetworkMessage
        {
            public const byte c_messageID = 150;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("GlobalID", DMLType.GID)] public GID m_globalID;
            [DMLField("Data", DMLType.STR)] public ByteString m_data;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_REQUESTHATCHMAKINGFRIENDPETS>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_REQUESTHATCHMAKINGFRIENDPETS>.Read(buf, this);
            }
        }
        public class MSG_REQUESTHATCHMAKINGHATCH : INetworkMessage
        {
            public const byte c_messageID = 151;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("PetID1", DMLType.GID)] public GID m_petID1;
            [DMLField("PetID2", DMLType.GID)] public GID m_petID2;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_REQUESTHATCHMAKINGHATCH>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_REQUESTHATCHMAKINGHATCH>.Read(buf, this);
            }
        }
        public class MSG_REQUESTHATCHMAKINGHATCH2 : INetworkMessage
        {
            public const byte c_messageID = 152;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("PetID1", DMLType.GID)] public GID m_petID1;
            [DMLField("PetID2", DMLType.GID)] public GID m_petID2;
            [DMLField("PetIndex", DMLType.UINT)] public uint m_petIndex;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_REQUESTHATCHMAKINGHATCH2>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_REQUESTHATCHMAKINGHATCH2>.Read(buf, this);
            }
        }
        public class MSG_REQUESTHATCHMAKINGHATCHEDPET : INetworkMessage
        {
            public const byte c_messageID = 153;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("PetID", DMLType.GID)] public GID m_petID;
            [DMLField("PetIndex", DMLType.UINT)] public uint m_petIndex;
            [DMLField("PetData", DMLType.STR)] public ByteString m_petData;
            [DMLField("IsInPetTome", DMLType.UBYT)] public byte m_isInPetTome;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_REQUESTHATCHMAKINGHATCHEDPET>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_REQUESTHATCHMAKINGHATCHEDPET>.Read(buf, this);
            }
        }
        public class MSG_REQUESTHATCHMAKINGPETDATA : INetworkMessage
        {
            public const byte c_messageID = 154;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("PetData", DMLType.STR)] public ByteString m_petData;
            [DMLField("PetID", DMLType.GID)] public GID m_petID;
            [DMLField("IsInPetTome", DMLType.UBYT)] public byte m_isInPetTome;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_REQUESTHATCHMAKINGPETDATA>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_REQUESTHATCHMAKINGPETDATA>.Read(buf, this);
            }
        }
        public class MSG_REQUESTHATCHMAKINGPETS : INetworkMessage
        {
            public const byte c_messageID = 155;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("PetData", DMLType.STR)] public ByteString m_petData;
            [DMLField("PetTemplateID", DMLType.UINT)] public uint m_petTemplateID;
            [DMLField("Skip", DMLType.UINT)] public uint m_skip;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_REQUESTHATCHMAKINGPETS>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_REQUESTHATCHMAKINGPETS>.Read(buf, this);
            }
        }
        public class MSG_REQUESTHATCHMAKINGPETTYPES : INetworkMessage
        {
            public const byte c_messageID = 156;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("PetData", DMLType.STR)] public ByteString m_petData;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_REQUESTHATCHMAKINGPETTYPES>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_REQUESTHATCHMAKINGPETTYPES>.Read(buf, this);
            }
        }
        public class MSG_REQUESTHATCHMAKINGREMOVEPET : INetworkMessage
        {
            public const byte c_messageID = 157;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("PetID", DMLType.GID)] public GID m_petID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_REQUESTHATCHMAKINGREMOVEPET>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_REQUESTHATCHMAKINGREMOVEPET>.Read(buf, this);
            }
        }
        public class MSG_REQUESTHATCHMAKINGSEARCHPETS : INetworkMessage
        {
            public const byte c_messageID = 158;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("GlobalID", DMLType.GID)] public GID m_globalID;
            [DMLField("Data", DMLType.STR)] public ByteString m_data;
            [DMLField("SearchType", DMLType.BYT)] public sbyte m_searchType;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_REQUESTHATCHMAKINGSEARCHPETS>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_REQUESTHATCHMAKINGSEARCHPETS>.Read(buf, this);
            }
        }
        public class MSG_REQUESTMAINLINEAUDIT : INetworkMessage
        {
            public const byte c_messageID = 159;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_REQUESTMAINLINEAUDIT>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_REQUESTMAINLINEAUDIT>.Read(buf, this);
            }
        }
        public class MSG_REQUESTMINIGAME : INetworkMessage
        {
            public const byte c_messageID = 160;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_REQUESTMINIGAME>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_REQUESTMINIGAME>.Read(buf, this);
            }
        }
        public class MSG_REQUESTMONSTERTOME : INetworkMessage
        {
            public const byte c_messageID = 161;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("GlobalID", DMLType.GID)] public GID m_globalID;
            [DMLField("MonsterData", DMLType.STR)] public ByteString m_monsterData;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_REQUESTMONSTERTOME>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_REQUESTMONSTERTOME>.Read(buf, this);
            }
        }
        public class MSG_REQUESTPETTOME : INetworkMessage
        {
            public const byte c_messageID = 162;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("GlobalID", DMLType.GID)] public GID m_globalID;
            [DMLField("PetData", DMLType.STR)] public ByteString m_petData;
            [DMLField("Buffer", DMLType.STR)] public ByteString m_buffer;
            [DMLField("PremiumPetExceptionCode", DMLType.UINT)] public uint m_premiumPetExceptionCode;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_REQUESTPETTOME>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_REQUESTPETTOME>.Read(buf, this);
            }
        }
        public class MSG_REQUESTRADIALFRIENDQUICKCHATEXT : INetworkMessage
        {
            public const byte c_messageID = 163;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("PlayerGID", DMLType.GID)] public GID m_playerGID;
            [DMLField("Message", DMLType.STR)] public ByteString m_message;
            [DMLField("SourceID", DMLType.GID)] public GID m_sourceID;
            [DMLField("Filter", DMLType.UBYT)] public byte m_filter;
            [DMLField("SourceName", DMLType.STR)] public ByteString m_sourceName;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_REQUESTRADIALFRIENDQUICKCHATEXT>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_REQUESTRADIALFRIENDQUICKCHATEXT>.Read(buf, this);
            }
        }
        public class MSG_REQUESTSIGILINFO : INetworkMessage
        {
            public const byte c_messageID = 164;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("SigilID", DMLType.UINT)] public uint m_sigilID;
            [DMLField("WorldID", DMLType.UINT)] public uint m_worldID;
            [DMLField("SigilInfo", DMLType.STR)] public ByteString m_sigilInfo;
            [DMLField("Request", DMLType.UBYT)] public byte m_request;
            [DMLField("PlayerGID", DMLType.GID)] public GID m_playerGID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_REQUESTSIGILINFO>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_REQUESTSIGILINFO>.Read(buf, this);
            }
        }
        public class MSG_REQUESTTEAMHELPFAIL : INetworkMessage
        {
            public const byte c_messageID = 165;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("TimeLeft", DMLType.UINT)] public uint m_timeLeft;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_REQUESTTEAMHELPFAIL>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_REQUESTTEAMHELPFAIL>.Read(buf, this);
            }
        }
        public class MSG_REQUESTTEAMHELPINFO : INetworkMessage
        {
            public const byte c_messageID = 166;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("WorldInfo", DMLType.STR)] public ByteString m_worldInfo;
            [DMLField("SigilInfo", DMLType.STR)] public ByteString m_sigilInfo;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_REQUESTTEAMHELPINFO>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_REQUESTTEAMHELPINFO>.Read(buf, this);
            }
        }
        public class MSG_REQUESTTEAMHELPJOIN : INetworkMessage
        {
            public const byte c_messageID = 167;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("SigilID", DMLType.UINT)] public uint m_sigilID;
            [DMLField("PlayerGID", DMLType.GID)] public GID m_playerGID;
            [DMLField("SchoolID", DMLType.UINT)] public uint m_schoolID;
            [DMLField("WorldID", DMLType.UINT)] public uint m_worldID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_REQUESTTEAMHELPJOIN>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_REQUESTTEAMHELPJOIN>.Read(buf, this);
            }
        }
        public class MSG_REQUESTTEAMHELPJOINFAIL : INetworkMessage
        {
            public const byte c_messageID = 168;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("PlayerGID", DMLType.GID)] public GID m_playerGID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_REQUESTTEAMHELPJOINFAIL>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_REQUESTTEAMHELPJOINFAIL>.Read(buf, this);
            }
        }
        public class MSG_REQUESTTEAMHELPWORLDINFO : INetworkMessage
        {
            public const byte c_messageID = 169;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("WorldID", DMLType.UINT)] public uint m_worldID;
            [DMLField("WorldSigilInfo", DMLType.STR)] public ByteString m_worldSigilInfo;
            [DMLField("PlayerGID", DMLType.GID)] public GID m_playerGID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_REQUESTTEAMHELPWORLDINFO>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_REQUESTTEAMHELPWORLDINFO>.Read(buf, this);
            }
        }
        public class MSG_REQUESTTEAMUP : INetworkMessage
        {
            public const byte c_messageID = 170;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("NPCID", DMLType.GID)] public GID m_nPCID;
            [DMLField("IsFarming", DMLType.UBYT)] public byte m_isFarming;
            [DMLField("TeamSize", DMLType.UBYT)] public byte m_teamSize;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_REQUESTTEAMUP>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_REQUESTTEAMUP>.Read(buf, this);
            }
        }
        public class MSG_REQUESTTUTORIALTIPLOG : INetworkMessage
        {
            public const byte c_messageID = 171;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("GlobalID", DMLType.GID)] public GID m_globalID;
            [DMLField("TutorialTipCount", DMLType.UINT)] public uint m_tutorialTipCount;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_REQUESTTUTORIALTIPLOG>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_REQUESTTUTORIALTIPLOG>.Read(buf, this);
            }
        }
        public class MSG_REQUESTZONECLUSTERQUICKCHATEXT : INetworkMessage
        {
            public const byte c_messageID = 172;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("Message", DMLType.STR)] public ByteString m_message;
            [DMLField("IsOwner", DMLType.UBYT)] public byte m_isOwner;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_REQUESTZONECLUSTERQUICKCHATEXT>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_REQUESTZONECLUSTERQUICKCHATEXT>.Read(buf, this);
            }
        }
        public class MSG_RESTOREORIGINALCASTLE : INetworkMessage
        {
            public const byte c_messageID = 173;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_RESTOREORIGINALCASTLE>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_RESTOREORIGINALCASTLE>.Read(buf, this);
            }
        }
        public class MSG_RESUMEINSTANCETELEPORTPLAYER : INetworkMessage
        {
            public const byte c_messageID = 174;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("ClusterGID", DMLType.GID)] public GID m_clusterGID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_RESUMEINSTANCETELEPORTPLAYER>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_RESUMEINSTANCETELEPORTPLAYER>.Read(buf, this);
            }
        }
        public class MSG_RIDABLEUPDATE : INetworkMessage
        {
            public const byte c_messageID = 175;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("GlobalID", DMLType.GID)] public GID m_globalID;
            [DMLField("Yaw", DMLType.FLT)] public float m_yaw;
            [DMLField("Slot", DMLType.UBYT)] public byte m_slot;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_RIDABLEUPDATE>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_RIDABLEUPDATE>.Read(buf, this);
            }
        }
        public class MSG_RIDEOBJECT : INetworkMessage
        {
            public const byte c_messageID = 176;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("GlobalID", DMLType.GID)] public GID m_globalID;
            [DMLField("PlayerGID", DMLType.GID)] public GID m_playerGID;
            [DMLField("Slot", DMLType.INT)] public int m_slot;
            [DMLField("AddPlayer", DMLType.UBYT)] public byte m_addPlayer;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_RIDEOBJECT>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_RIDEOBJECT>.Read(buf, this);
            }
        }
        public class MSG_RIDEOBJECTFULL : INetworkMessage
        {
            public const byte c_messageID = 177;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("GlobalID", DMLType.GID)] public GID m_globalID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_RIDEOBJECTFULL>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_RIDEOBJECTFULL>.Read(buf, this);
            }
        }
        public class MSG_RIDERSLIST : INetworkMessage
        {
            public const byte c_messageID = 178;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("GlobalID", DMLType.GID)] public GID m_globalID;
            [DMLField("RiderList", DMLType.STR)] public ByteString m_riderList;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_RIDERSLIST>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_RIDERSLIST>.Read(buf, this);
            }
        }
        public class MSG_RecallLocationConfirm : INetworkMessage
        {
            public const byte c_messageID = 179;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("PromptKey", DMLType.STR)] public ByteString m_promptKey;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_RecallLocationConfirm>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_RecallLocationConfirm>.Read(buf, this);
            }
        }
        public class MSG_SENDTRIVIA : INetworkMessage
        {
            public const byte c_messageID = 180;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("QuestionNumber", DMLType.INT)] public int m_questionNumber;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_SENDTRIVIA>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_SENDTRIVIA>.Read(buf, this);
            }
        }
        public class MSG_SEPIDIOUSARRIVAL : INetworkMessage
        {
            public const byte c_messageID = 181;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_SEPIDIOUSARRIVAL>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_SEPIDIOUSARRIVAL>.Read(buf, this);
            }
        }
        public class MSG_SETBASICCHATCHANNELPUBLIC : INetworkMessage
        {
            public const byte c_messageID = 182;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("PlayerGID", DMLType.GID)] public GID m_playerGID;
            [DMLField("OwningPlayerGID", DMLType.GID)] public GID m_owningPlayerGID;
            [DMLField("IsPublic", DMLType.UBYT)] public byte m_isPublic;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_SETBASICCHATCHANNELPUBLIC>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_SETBASICCHATCHANNELPUBLIC>.Read(buf, this);
            }
        }
        public class MSG_SETELIXIRTIMER : INetworkMessage
        {
            public const byte c_messageID = 183;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("GlobalID", DMLType.GID)] public GID m_globalID;
            [DMLField("TimerTime", DMLType.UINT)] public uint m_timerTime;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_SETELIXIRTIMER>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_SETELIXIRTIMER>.Read(buf, this);
            }
        }
        public class MSG_SETRESUMEINSTANCE : INetworkMessage
        {
            public const byte c_messageID = 184;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("CharacterGID", DMLType.GID)] public GID m_characterGID;
            [DMLField("ClusterGID", DMLType.GID)] public GID m_clusterGID;
            [DMLField("ZoneDisplayNameID", DMLType.STR)] public ByteString m_zoneDisplayNameID;
            [DMLField("ExpireTime", DMLType.UINT)] public uint m_expireTime;
            [DMLField("Source", DMLType.UBYT)] public byte m_source;
            [DMLField("StartingZoneName", DMLType.STR)] public ByteString m_startingZoneName;
            [DMLField("StartingZoneLocation", DMLType.STR)] public ByteString m_startingZoneLocation;
            [DMLField("ClusterTemplate", DMLType.STR)] public ByteString m_clusterTemplate;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_SETRESUMEINSTANCE>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_SETRESUMEINSTANCE>.Read(buf, this);
            }
        }
        public class MSG_SETSTOREDMOUNT : INetworkMessage
        {
            public const byte c_messageID = 185;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("MountGID", DMLType.GID)] public GID m_mountGID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_SETSTOREDMOUNT>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_SETSTOREDMOUNT>.Read(buf, this);
            }
        }
        public class MSG_SWITCHTOPET : INetworkMessage
        {
            public const byte c_messageID = 186;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("GlobalID", DMLType.GID)] public GID m_globalID;
            [DMLField("Status", DMLType.UBYT)] public byte m_status;
            [DMLField("PetTemplate", DMLType.UINT)] public uint m_petTemplate;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_SWITCHTOPET>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_SWITCHTOPET>.Read(buf, this);
            }
        }
        public class MSG_SetBGPolymorphLevel : INetworkMessage
        {
            public const byte c_messageID = 187;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("ProjectID", DMLType.UINT)] public uint m_projectID;
            [DMLField("Index", DMLType.INT)] public int m_index;
            [DMLField("Level", DMLType.INT)] public int m_level;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_SetBGPolymorphLevel>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_SetBGPolymorphLevel>.Read(buf, this);
            }
        }
        public class MSG_TEAMUPADDPLAYER : INetworkMessage
        {
            public const byte c_messageID = 188;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("PlayerGID", DMLType.GID)] public GID m_playerGID;
            [DMLField("SigilID", DMLType.UINT)] public uint m_sigilID;
            [DMLField("SchoolID", DMLType.UINT)] public uint m_schoolID;
            [DMLField("IsFarming", DMLType.UBYT)] public byte m_isFarming;
            [DMLField("TeamSize", DMLType.UBYT)] public byte m_teamSize;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_TEAMUPADDPLAYER>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_TEAMUPADDPLAYER>.Read(buf, this);
            }
        }
        public class MSG_TEAMUPADDPLAYERTOCLIENT : INetworkMessage
        {
            public const byte c_messageID = 189;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("SigilID", DMLType.GID)] public GID m_sigilID;
            [DMLField("PlayerGID", DMLType.GID)] public GID m_playerGID;
            [DMLField("PackedName", DMLType.STR)] public ByteString m_packedName;
            [DMLField("PlayerSchool", DMLType.STR)] public ByteString m_playerSchool;
            [DMLField("SigilName", DMLType.STR)] public ByteString m_sigilName;
            [DMLField("UpdatePlayerGID", DMLType.GID)] public GID m_updatePlayerGID;
            [DMLField("SecondsLeft", DMLType.UINT)] public uint m_secondsLeft;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_TEAMUPADDPLAYERTOCLIENT>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_TEAMUPADDPLAYERTOCLIENT>.Read(buf, this);
            }
        }
        public class MSG_TEAMUPFAILED : INetworkMessage
        {
            public const byte c_messageID = 190;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_TEAMUPFAILED>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_TEAMUPFAILED>.Read(buf, this);
            }
        }
        public class MSG_TEAMUPREMOVEPLAYER : INetworkMessage
        {
            public const byte c_messageID = 191;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("PlayerGID", DMLType.GID)] public GID m_playerGID;
            [DMLField("SigilID", DMLType.UINT)] public uint m_sigilID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_TEAMUPREMOVEPLAYER>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_TEAMUPREMOVEPLAYER>.Read(buf, this);
            }
        }
        public class MSG_TEAMUPREMOVEPLAYERFROMCLIENT : INetworkMessage
        {
            public const byte c_messageID = 192;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("SigilID", DMLType.GID)] public GID m_sigilID;
            [DMLField("PlayerGID", DMLType.GID)] public GID m_playerGID;
            [DMLField("UpdatePlayerGID", DMLType.GID)] public GID m_updatePlayerGID;
            [DMLField("Disbanded", DMLType.UBYT)] public byte m_disbanded;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_TEAMUPREMOVEPLAYERFROMCLIENT>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_TEAMUPREMOVEPLAYERFROMCLIENT>.Read(buf, this);
            }
        }
        public class MSG_TEAMUPTELEPORTPLAYER : INetworkMessage
        {
            public const byte c_messageID = 193;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("SigilID", DMLType.UINT)] public uint m_sigilID;
            [DMLField("PlayerGID", DMLType.GID)] public GID m_playerGID;
            [DMLField("ZoneID", DMLType.GID)] public GID m_zoneID;
            [DMLField("PlayerPosition", DMLType.UBYT)] public byte m_playerPosition;
            [DMLField("PlayerCount", DMLType.UBYT)] public byte m_playerCount;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_TEAMUPTELEPORTPLAYER>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_TEAMUPTELEPORTPLAYER>.Read(buf, this);
            }
        }
        public class MSG_TIEREDSPELLRESET : INetworkMessage
        {
            public const byte c_messageID = 194;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("SpellID", DMLType.UINT)] public uint m_spellID;
            [DMLField("SpellIDOld", DMLType.UINT)] public uint m_spellIDOld;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_TIEREDSPELLRESET>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_TIEREDSPELLRESET>.Read(buf, this);
            }
        }
        public class MSG_TIEREDSPELLRESETRESP : INetworkMessage
        {
            public const byte c_messageID = 195;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("Success", DMLType.UBYT)] public byte m_success;
            [DMLField("FailedRequirementIndex", DMLType.INT)] public int m_failedRequirementIndex;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_TIEREDSPELLRESETRESP>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_TIEREDSPELLRESETRESP>.Read(buf, this);
            }
        }
        public class MSG_TIEREDSPELLUPGRADE : INetworkMessage
        {
            public const byte c_messageID = 196;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("SpellID", DMLType.UINT)] public uint m_spellID;
            [DMLField("SpellIDNew", DMLType.UINT)] public uint m_spellIDNew;
            [DMLField("TieredSpellGroup", DMLType.UINT)] public uint m_tieredSpellGroup;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_TIEREDSPELLUPGRADE>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_TIEREDSPELLUPGRADE>.Read(buf, this);
            }
        }
        public class MSG_TIEREDSPELLUPGRADERESP : INetworkMessage
        {
            public const byte c_messageID = 197;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("Success", DMLType.UBYT)] public byte m_success;
            [DMLField("FailedRequirementIndex", DMLType.INT)] public int m_failedRequirementIndex;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_TIEREDSPELLUPGRADERESP>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_TIEREDSPELLUPGRADERESP>.Read(buf, this);
            }
        }
        public class MSG_TOURNAMENTLOOTROLLINFO : INetworkMessage
        {
            public const byte c_messageID = 198;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("InitialCost", DMLType.UINT)] public uint m_initialCost;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_TOURNAMENTLOOTROLLINFO>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_TOURNAMENTLOOTROLLINFO>.Read(buf, this);
            }
        }
        public class MSG_TOURNAMENTLOOTROLLRESPONSE : INetworkMessage
        {
            public const byte c_messageID = 199;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("BracketID", DMLType.GID)] public GID m_bracketID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_TOURNAMENTLOOTROLLRESPONSE>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_TOURNAMENTLOOTROLLRESPONSE>.Read(buf, this);
            }
        }
        public class MSG_TOURNAMENTLOOTROLLRESULT : INetworkMessage
        {
            public const byte c_messageID = 200;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("Id", DMLType.GID)] public GID m_id;
            [DMLField("Cost", DMLType.INT)] public int m_cost;
            [DMLField("Balance", DMLType.INT)] public int m_balance;
            [DMLField("Uses", DMLType.INT)] public int m_uses;
            [DMLField("Loot", DMLType.STR)] public ByteString m_loot;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_TOURNAMENTLOOTROLLRESULT>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_TOURNAMENTLOOTROLLRESULT>.Read(buf, this);
            }
        }
        public class MSG_UNEQUIPSOCKETEDJEWEL : INetworkMessage
        {
            public const byte c_messageID = 201;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("GlobalID", DMLType.GID)] public GID m_globalID;
            [DMLField("ItemGID", DMLType.GID)] public GID m_itemGID;
            [DMLField("SocketNumber", DMLType.UBYT)] public byte m_socketNumber;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_UNEQUIPSOCKETEDJEWEL>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_UNEQUIPSOCKETEDJEWEL>.Read(buf, this);
            }
        }
        public class MSG_UNLOCKPETTALENT : INetworkMessage
        {
            public const byte c_messageID = 202;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("PetGID", DMLType.GID)] public GID m_petGID;
            [DMLField("DerbyTalent", DMLType.UBYT)] public byte m_derbyTalent;
            [DMLField("TalentID", DMLType.UINT)] public uint m_talentID;
            [DMLField("NewTalentID", DMLType.UINT)] public uint m_newTalentID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_UNLOCKPETTALENT>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_UNLOCKPETTALENT>.Read(buf, this);
            }
        }
        public class MSG_UNLOCKSOCKETS : INetworkMessage
        {
            public const byte c_messageID = 203;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("ItemGID", DMLType.GID)] public GID m_itemGID;
            [DMLField("CostChoice", DMLType.UBYT)] public byte m_costChoice;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_UNLOCKSOCKETS>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_UNLOCKSOCKETS>.Read(buf, this);
            }
        }
        public class MSG_UNLOCKSOCKETSCONFIRM : INetworkMessage
        {
            public const byte c_messageID = 204;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("Failure", DMLType.BYT)] public sbyte m_failure;
            [DMLField("WebFailure", DMLType.BYT)] public sbyte m_webFailure;
            [DMLField("Credits", DMLType.INT)] public int m_credits;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_UNLOCKSOCKETSCONFIRM>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_UNLOCKSOCKETSCONFIRM>.Read(buf, this);
            }
        }
        public class MSG_UNSOCKETJEWELREQUEST : INetworkMessage
        {
            public const byte c_messageID = 205;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("ItemGID", DMLType.GID)] public GID m_itemGID;
            [DMLField("SocketNumber", DMLType.UBYT)] public byte m_socketNumber;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_UNSOCKETJEWELREQUEST>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_UNSOCKETJEWELREQUEST>.Read(buf, this);
            }
        }
        public class MSG_UPDATEADVENTUREPOWERCOOLDOWN : INetworkMessage
        {
            public const byte c_messageID = 206;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("AdventurePowerCooldownTime", DMLType.UINT)] public uint m_adventurePowerCooldownTime;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_UPDATEADVENTUREPOWERCOOLDOWN>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_UPDATEADVENTUREPOWERCOOLDOWN>.Read(buf, this);
            }
        }
        public class MSG_UPDATEAFTERCOMBATDANCE : INetworkMessage
        {
            public const byte c_messageID = 207;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("GlobalID", DMLType.GID)] public GID m_globalID;
            [DMLField("AfterCombatDance", DMLType.UINT)] public uint m_afterCombatDance;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_UPDATEAFTERCOMBATDANCE>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_UPDATEAFTERCOMBATDANCE>.Read(buf, this);
            }
        }
        public class MSG_UPDATEBANKLIMIT : INetworkMessage
        {
            public const byte c_messageID = 208;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("GlobalID", DMLType.GID)] public GID m_globalID;
            [DMLField("BankLimit", DMLType.INT)] public int m_bankLimit;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_UPDATEBANKLIMIT>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_UPDATEBANKLIMIT>.Read(buf, this);
            }
        }
        public class MSG_UPDATECLASSPROJECTBUTTON : INetworkMessage
        {
            public const byte c_messageID = 209;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("Buffer", DMLType.STR)] public ByteString m_buffer;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_UPDATECLASSPROJECTBUTTON>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_UPDATECLASSPROJECTBUTTON>.Read(buf, this);
            }
        }
        public class MSG_UPDATECLASSPROJECTSTATUS : INetworkMessage
        {
            public const byte c_messageID = 210;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("Status", DMLType.UBYT)] public byte m_status;
            [DMLField("ProjectID", DMLType.UINT)] public uint m_projectID;
            [DMLField("Count", DMLType.UINT)] public uint m_count;
            [DMLField("Points", DMLType.UINT)] public uint m_points;
            [DMLField("HasUnclaimedReward", DMLType.UBYT)] public byte m_hasUnclaimedReward;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_UPDATECLASSPROJECTSTATUS>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_UPDATECLASSPROJECTSTATUS>.Read(buf, this);
            }
        }
        public class MSG_UPDATECOLLECTEDESSENCES : INetworkMessage
        {
            public const byte c_messageID = 211;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("EssenceData", DMLType.STR)] public ByteString m_essenceData;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_UPDATECOLLECTEDESSENCES>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_UPDATECOLLECTEDESSENCES>.Read(buf, this);
            }
        }
        public class MSG_UPDATECUSTOMEMOTES : INetworkMessage
        {
            public const byte c_messageID = 212;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("CustomEmotes", DMLType.UINT)] public uint m_customEmotes;
            [DMLField("CustomTeleportEffects", DMLType.UINT)] public uint m_customTeleportEffects;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_UPDATECUSTOMEMOTES>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_UPDATECUSTOMEMOTES>.Read(buf, this);
            }
        }
        public class MSG_UPDATEEQUIPMENTSETS : INetworkMessage
        {
            public const byte c_messageID = 213;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("GlobalID", DMLType.GID)] public GID m_globalID;
            [DMLField("Buffer", DMLType.STR)] public ByteString m_buffer;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_UPDATEEQUIPMENTSETS>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_UPDATEEQUIPMENTSETS>.Read(buf, this);
            }
        }
        public class MSG_UPDATEEVENTCURRENCY1 : INetworkMessage
        {
            public const byte c_messageID = 214;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("EventCurrency1", DMLType.INT)] public int m_eventCurrency1;
            [DMLField("MaxEventCurrency1", DMLType.INT)] public int m_maxEventCurrency1;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_UPDATEEVENTCURRENCY1>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_UPDATEEVENTCURRENCY1>.Read(buf, this);
            }
        }
        public class MSG_UPDATEEVENTCURRENCY2 : INetworkMessage
        {
            public const byte c_messageID = 215;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("EventCurrency2", DMLType.INT)] public int m_eventCurrency2;
            [DMLField("MaxEventCurrency2", DMLType.INT)] public int m_maxEventCurrency2;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_UPDATEEVENTCURRENCY2>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_UPDATEEVENTCURRENCY2>.Read(buf, this);
            }
        }
        public class MSG_UPDATEEXPANSION : INetworkMessage
        {
            public const byte c_messageID = 216;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("GlobalID", DMLType.GID)] public GID m_globalID;
            [DMLField("Category", DMLType.INT)] public int m_category;
            [DMLField("Expansions", DMLType.INT)] public int m_expansions;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_UPDATEEXPANSION>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_UPDATEEXPANSION>.Read(buf, this);
            }
        }
        public class MSG_UPDATEEXTRAINVENTORY : INetworkMessage
        {
            public const byte c_messageID = 217;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("ExtraInventorySpace", DMLType.INT)] public int m_extraInventorySpace;
            [DMLField("CurrentInventorySpace", DMLType.INT)] public int m_currentInventorySpace;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_UPDATEEXTRAINVENTORY>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_UPDATEEXTRAINVENTORY>.Read(buf, this);
            }
        }
        public class MSG_UPDATEFISHINGXP : INetworkMessage
        {
            public const byte c_messageID = 218;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("GlobalID", DMLType.GID)] public GID m_globalID;
            [DMLField("XP", DMLType.INT)] public int m_xP;
            [DMLField("Level", DMLType.INT)] public int m_level;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_UPDATEFISHINGXP>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_UPDATEFISHINGXP>.Read(buf, this);
            }
        }
        public class MSG_UPDATEITEMSPELLEXCLUSIONLIST : INetworkMessage
        {
            public const byte c_messageID = 219;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("SpellID", DMLType.INT)] public int m_spellID;
            [DMLField("DeckID", DMLType.GID)] public GID m_deckID;
            [DMLField("Exclude", DMLType.UBYT)] public byte m_exclude;
            [DMLField("Success", DMLType.UBYT)] public byte m_success;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_UPDATEITEMSPELLEXCLUSIONLIST>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_UPDATEITEMSPELLEXCLUSIONLIST>.Read(buf, this);
            }
        }
        public class MSG_UPDATEMAXSHADOWPIPS : INetworkMessage
        {
            public const byte c_messageID = 220;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("MaxShadowPips", DMLType.INT)] public int m_maxShadowPips;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_UPDATEMAXSHADOWPIPS>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_UPDATEMAXSHADOWPIPS>.Read(buf, this);
            }
        }
        public class MSG_UPDATEMONSTERMAGICXP : INetworkMessage
        {
            public const byte c_messageID = 221;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("GlobalID", DMLType.GID)] public GID m_globalID;
            [DMLField("XP", DMLType.INT)] public int m_xP;
            [DMLField("Level", DMLType.INT)] public int m_level;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_UPDATEMONSTERMAGICXP>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_UPDATEMONSTERMAGICXP>.Read(buf, this);
            }
        }
        public class MSG_UPDATENEWSPELLBOOKLAYOUTWARNING : INetworkMessage
        {
            public const byte c_messageID = 222;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("WarningShown", DMLType.UBYT)] public byte m_warningShown;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_UPDATENEWSPELLBOOKLAYOUTWARNING>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_UPDATENEWSPELLBOOKLAYOUTWARNING>.Read(buf, this);
            }
        }
        public class MSG_UPDATEPETBILLBOARD : INetworkMessage
        {
            public const byte c_messageID = 223;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("GlobalID", DMLType.GID)] public GID m_globalID;
            [DMLField("Level", DMLType.INT)] public int m_level;
            [DMLField("OverallRating", DMLType.INT)] public int m_overallRating;
            [DMLField("ActiveRating", DMLType.INT)] public int m_activeRating;
            [DMLField("HasJewel", DMLType.INT)] public int m_hasJewel;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_UPDATEPETBILLBOARD>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_UPDATEPETBILLBOARD>.Read(buf, this);
            }
        }
        public class MSG_UPDATEPIPCONVERSION : INetworkMessage
        {
            public const byte c_messageID = 224;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("PipConversionBaseAllSchools", DMLType.INT)] public int m_pipConversionBaseAllSchools;
            [DMLField("PipConversionBaseFire", DMLType.INT)] public int m_pipConversionBaseFire;
            [DMLField("PipConversionBaseIce", DMLType.INT)] public int m_pipConversionBaseIce;
            [DMLField("PipConversionBaseStorm", DMLType.INT)] public int m_pipConversionBaseStorm;
            [DMLField("PipConversionBaseLife", DMLType.INT)] public int m_pipConversionBaseLife;
            [DMLField("PipConversionBaseMyth", DMLType.INT)] public int m_pipConversionBaseMyth;
            [DMLField("PipConversionBaseDeath", DMLType.INT)] public int m_pipConversionBaseDeath;
            [DMLField("PipConversionBaseBalance", DMLType.INT)] public int m_pipConversionBaseBalance;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_UPDATEPIPCONVERSION>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_UPDATEPIPCONVERSION>.Read(buf, this);
            }
        }
        public class MSG_UPDATEPURCHASEDCHARACTERSLOTS : INetworkMessage
        {
            public const byte c_messageID = 225;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("PurchasedCharacterSlots", DMLType.INT)] public int m_purchasedCharacterSlots;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_UPDATEPURCHASEDCHARACTERSLOTS>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_UPDATEPURCHASEDCHARACTERSLOTS>.Read(buf, this);
            }
        }
        public class MSG_UPDATEREMEMBERLASTREALM : INetworkMessage
        {
            public const byte c_messageID = 226;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("RememberLastRealm", DMLType.UBYT)] public byte m_rememberLastRealm;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_UPDATEREMEMBERLASTREALM>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_UPDATEREMEMBERLASTREALM>.Read(buf, this);
            }
        }
        public class MSG_UPDATERESUMEINSTANCETIME : INetworkMessage
        {
            public const byte c_messageID = 227;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("ExpireTime", DMLType.UINT)] public uint m_expireTime;
            [DMLField("ClusterGID", DMLType.GID)] public GID m_clusterGID;
            [DMLField("Player1", DMLType.GID)] public GID m_player1;
            [DMLField("Player2", DMLType.GID)] public GID m_player2;
            [DMLField("Player3", DMLType.GID)] public GID m_player3;
            [DMLField("Player4", DMLType.GID)] public GID m_player4;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_UPDATERESUMEINSTANCETIME>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_UPDATERESUMEINSTANCETIME>.Read(buf, this);
            }
        }
        public class MSG_UPDATERESUMEINSTANCETIME2 : INetworkMessage
        {
            public const byte c_messageID = 228;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("ExpireTime", DMLType.UINT)] public uint m_expireTime;
            [DMLField("ClusterGID", DMLType.GID)] public GID m_clusterGID;
            [DMLField("PlayerGID", DMLType.GID)] public GID m_playerGID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_UPDATERESUMEINSTANCETIME2>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_UPDATERESUMEINSTANCETIME2>.Read(buf, this);
            }
        }
        public class MSG_UPDATESUBSCRIBERBENEFITFLAGS : INetworkMessage
        {
            public const byte c_messageID = 229;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("SubscriberBenefitFlags", DMLType.UINT)] public uint m_subscriberBenefitFlags;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_UPDATESUBSCRIBERBENEFITFLAGS>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_UPDATESUBSCRIBERBENEFITFLAGS>.Read(buf, this);
            }
        }
        public class MSG_UPDATETELEPORTEFFECT : INetworkMessage
        {
            public const byte c_messageID = 230;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("TeleportEffect", DMLType.UINT)] public uint m_teleportEffect;
            [DMLField("PlayerGID", DMLType.GID)] public GID m_playerGID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_UPDATETELEPORTEFFECT>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_UPDATETELEPORTEFFECT>.Read(buf, this);
            }
        }
        public class MSG_UPDATETUTORIALTIPLOG : INetworkMessage
        {
            public const byte c_messageID = 231;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("GlobalID", DMLType.GID)] public GID m_globalID;
            [DMLField("TutorialTipData", DMLType.STR)] public ByteString m_tutorialTipData;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_UPDATETUTORIALTIPLOG>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_UPDATETUTORIALTIPLOG>.Read(buf, this);
            }
        }
        public class MSG_USEPETADVENTUREPOWER : INetworkMessage
        {
            public const byte c_messageID = 232;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("ItemGID", DMLType.GID)] public GID m_itemGID;
            [DMLField("PowerID", DMLType.UINT)] public uint m_powerID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_USEPETADVENTUREPOWER>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_USEPETADVENTUREPOWER>.Read(buf, this);
            }
        }
        public class MSG_UpdateClassProjectPlayerProgress : INetworkMessage
        {
            public const byte c_messageID = 233;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("ProgressData", DMLType.STR)] public ByteString m_progressData;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_UpdateClassProjectPlayerProgress>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_UpdateClassProjectPlayerProgress>.Read(buf, this);
            }
        }
        public class MSG_WHIRLYBURLYMESSAGE : INetworkMessage
        {
            public const byte c_messageID = 234;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("GlobalID", DMLType.GID)] public GID m_globalID;
            [DMLField("MessageType", DMLType.UBYT)] public byte m_messageType;
            [DMLField("GameID", DMLType.UINT)] public uint m_gameID;
            [DMLField("Data", DMLType.STR)] public ByteString m_data;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_WHIRLYBURLYMESSAGE>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_WHIRLYBURLYMESSAGE>.Read(buf, this);
            }
        }
        public class MSG_WHIRLYBURLYOPENKIOSK : INetworkMessage
        {
            public const byte c_messageID = 235;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_WHIRLYBURLYOPENKIOSK>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_WHIRLYBURLYOPENKIOSK>.Read(buf, this);
            }
        }
        public class MSG_ZONEGATELIST : INetworkMessage
        {
            public const byte c_messageID = 236;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            [DMLField("GlobalID", DMLType.GID)] public GID m_globalID;
            [DMLField("Data", DMLType.STR)] public ByteString m_data;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_ZONEGATELIST>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_ZONEGATELIST>.Read(buf, this);
            }
        }
        public class MSG_ZONEHOP : INetworkMessage
        {
            public const byte c_messageID = 237;
            public byte GetID() => c_messageID;
            public byte GetServiceID() => c_serviceID;
            
            public void Serialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_ZONEHOP>.Write(buf, this);
            }
            
            public void Deserialize(ByteBuffer buf)
            {
                DMLRecordReader<MSG_ZONEHOP>.Read(buf, this);
            }
        }
        
        public bool Dispatch(object handlerVoid, INetworkMessage message)
        {
            Debug.Assert(message.GetServiceID() == c_serviceID);
            var handler = (Handler)handlerVoid;
            
            switch (message.GetID())
            {
                case MSG_ACCESSPASSPURCHASE.c_messageID:
                    return handler.NetHandleAccessPassPurchase((MSG_ACCESSPASSPURCHASE)message);
                case MSG_ADDCROWNSREWARDSEVENT.c_messageID:
                    return handler.NetHandleADDCROWNSREWARDSEVENT((MSG_ADDCROWNSREWARDSEVENT)message);
                case MSG_ADDPLAYERTOBASICCHATCHANNEL.c_messageID:
                    return handler.NetHandleAddPlayerToBasicChatChannel((MSG_ADDPLAYERTOBASICCHATCHANNEL)message);
                case MSG_ATHANORARRIVAL.c_messageID:
                    return handler.NetHandleAthanorArrival((MSG_ATHANORARRIVAL)message);
                case MSG_BASICCHATCHANNELERRORMESSAGE.c_messageID:
                    return handler.NetHandleBasicChatChannelErrorMessage((MSG_BASICCHATCHANNELERRORMESSAGE)message);
                case MSG_BASICCHATCHANNELUPDATECOOLDOWN.c_messageID:
                    return handler.NetHandleBasicChatChannelUpdateCooldown((MSG_BASICCHATCHANNELUPDATECOOLDOWN)message);
                case MSG_BATTLECARDBUY.c_messageID:
                    return handler.NetHandleBattleCardBuy((MSG_BATTLECARDBUY)message);
                case MSG_BATTLECARDBUYCONFIRM.c_messageID:
                    return handler.NetHandleBattleCardBuyConfirm((MSG_BATTLECARDBUYCONFIRM)message);
                case MSG_BATTLECARDSHOPLIST.c_messageID:
                    return handler.NetHandleBattleCardShopList((MSG_BATTLECARDSHOPLIST)message);
                case MSG_BATTLECARDTRASH.c_messageID:
                    return handler.NetHandleBattleCardTrash((MSG_BATTLECARDTRASH)message);
                case MSG_BATTLECARDTRASHCONFIRM.c_messageID:
                    return handler.NetHandleBattleCardTrashConfirm((MSG_BATTLECARDTRASHCONFIRM)message);
                case MSG_BATTLEGROUNDEND.c_messageID:
                    return handler.NetHandleBattlegroundEnd((MSG_BATTLEGROUNDEND)message);
                case MSG_BATTLEGROUNDPENALTY.c_messageID:
                    return handler.NetHandleBattlegroundPenalty((MSG_BATTLEGROUNDPENALTY)message);
                case MSG_BATTLEGROUNDPOLYMORPHIMPROVEMENT.c_messageID:
                    return handler.NetHandleBattlegroundPolymorphImprovement((MSG_BATTLEGROUNDPOLYMORPHIMPROVEMENT)message);
                case MSG_BATTLEGROUNDPOLYMORPHIMPROVEREQ.c_messageID:
                    return handler.NetHandleBattlegroundPolymorphImproveReq((MSG_BATTLEGROUNDPOLYMORPHIMPROVEREQ)message);
                case MSG_BATTLEGROUNDPOLYMORPHIMPROVERESP.c_messageID:
                    return handler.NetHandleBattlegroundPolymorphImproveResp((MSG_BATTLEGROUNDPOLYMORPHIMPROVERESP)message);
                case MSG_BATTLEGROUNDQUEUEGROUP.c_messageID:
                    return handler.NetHandleBattlegroundQueueGroup((MSG_BATTLEGROUNDQUEUEGROUP)message);
                case MSG_BATTLEGROUNDQUEUEGROUPCHECK.c_messageID:
                    return handler.NetHandleBattlegroundQueueGroupCheck((MSG_BATTLEGROUNDQUEUEGROUPCHECK)message);
                case MSG_BATTLEGROUNDQUEUEGROUPJOINED.c_messageID:
                    return handler.NetHandleBattlegroundQueueGroupJoined((MSG_BATTLEGROUNDQUEUEGROUPJOINED)message);
                case MSG_BATTLEGROUNDQUEUEGROUPSTATUS.c_messageID:
                    return handler.NetHandleBattlegroundQueueGroupStatus((MSG_BATTLEGROUNDQUEUEGROUPSTATUS)message);
                case MSG_BATTLEGROUNDQUEUEPLAYER.c_messageID:
                    return handler.NetHandleBattlegroundQueuePlayer((MSG_BATTLEGROUNDQUEUEPLAYER)message);
                case MSG_BATTLEGROUNDQUEUESTATS.c_messageID:
                    return handler.NetHandleBattlegroundQueueStats((MSG_BATTLEGROUNDQUEUESTATS)message);
                case MSG_BATTLEGROUNDQUEUEUPDATE.c_messageID:
                    return handler.NetHandleBattlegroundQueueUpdate((MSG_BATTLEGROUNDQUEUEUPDATE)message);
                case MSG_BATTLEGROUNDREQUESTMATCHDATA.c_messageID:
                    return handler.NetHandleBattlegroundRequestMatchData((MSG_BATTLEGROUNDREQUESTMATCHDATA)message);
                case MSG_BATTLEGROUNDSHOWCOMPASS.c_messageID:
                    return handler.NetHandleBattlegroundShowCompass((MSG_BATTLEGROUNDSHOWCOMPASS)message);
                case MSG_BATTLEGROUNDTELEPORTPLAYER.c_messageID:
                    return handler.NetHandleBattlegroundTeleportPlayer((MSG_BATTLEGROUNDTELEPORTPLAYER)message);
                case MSG_BATTLEGROUNDUPDATEPOINTS.c_messageID:
                    return handler.NetHandleBattlegroundUpdatePoints((MSG_BATTLEGROUNDUPDATEPOINTS)message);
                case MSG_BGISPOLYMORPHUNLOCKEDREQUEST.c_messageID:
                    return handler.NetHandleBGIsPolymorphUnlockedRequest((MSG_BGISPOLYMORPHUNLOCKEDREQUEST)message);
                case MSG_BGISPOLYMORPHUNLOCKEDRESPONSE.c_messageID:
                    return handler.NetHandleBGIsPolymorphUnlockedResponse((MSG_BGISPOLYMORPHUNLOCKEDRESPONSE)message);
                case MSG_BGOPENPOLYMORPHSELECT.c_messageID:
                    return handler.NetHandleBGOpenPolymorphSelect((MSG_BGOPENPOLYMORPHSELECT)message);
                case MSG_BGPOIUpdate.c_messageID:
                    return handler.NetHandleBGPOIUpdate((MSG_BGPOIUpdate)message);
                case MSG_BGPlayerStatsUpdate.c_messageID:
                    return handler.NetHandleBGPlayerStatsUpdate((MSG_BGPlayerStatsUpdate)message);
                case MSG_BGPlayerSync.c_messageID:
                    return handler.NetHandleBGPlayerSync((MSG_BGPlayerSync)message);
                case MSG_BGQueueStatus.c_messageID:
                    return handler.NetHandleBGQueueStatus((MSG_BGQueueStatus)message);
                case MSG_BGResetStats.c_messageID:
                    return handler.NetHandleBGResetStats((MSG_BGResetStats)message);
                case MSG_BGSELECTPOLYMORPHDONE.c_messageID:
                    return handler.NetHandleBGSelectPolymorphDone((MSG_BGSELECTPOLYMORPHDONE)message);
                case MSG_BGSELECTPOLYMORPHREQUEST.c_messageID:
                    return handler.NetHandleBGSelectPolymorphRequest((MSG_BGSELECTPOLYMORPHREQUEST)message);
                case MSG_BGSELECTPOLYMORPHRESPONSE.c_messageID:
                    return handler.NetHandleBGSelectPolymorphResponse((MSG_BGSELECTPOLYMORPHRESPONSE)message);
                case MSG_BGSigilProxyEvent.c_messageID:
                    return handler.NetHandleBGSigilProxyEvent((MSG_BGSigilProxyEvent)message);
                case MSG_BUYPETELIXIRCONFIRM.c_messageID:
                    return handler.NetHandleBuyPetElixirConfirm((MSG_BUYPETELIXIRCONFIRM)message);
                case MSG_BUYSEASONPASS.c_messageID:
                    return handler.NetHandleBuySeasonPass((MSG_BUYSEASONPASS)message);
                case MSG_BattleBookAdd.c_messageID:
                    return handler.NetHandleBattleBookAdd((MSG_BattleBookAdd)message);
                case MSG_BattleBookClear.c_messageID:
                    return handler.NetHandleBattleBookClear((MSG_BattleBookClear)message);
                case MSG_BattleBookRating.c_messageID:
                    return handler.NetHandleBattleBookRating((MSG_BattleBookRating)message);
                case MSG_BattleBookRemove.c_messageID:
                    return handler.NetHandleBattleBookRemove((MSG_BattleBookRemove)message);
                case MSG_BattlegroundChatProjectData.c_messageID:
                    return handler.NetHandleBattlegroundChatProjectData((MSG_BattlegroundChatProjectData)message);
                case MSG_CANSEETIEREDSPELLGROUPS.c_messageID:
                    return handler.NetHandleCanSeeTieredSpellGroups((MSG_CANSEETIEREDSPELLGROUPS)message);
                case MSG_CASTLETOURSGOTOFRIEND.c_messageID:
                    return handler.NetHandleCastleToursGotoFriend((MSG_CASTLETOURSGOTOFRIEND)message);
                case MSG_CLASSPROJECTCLAIMREWARD.c_messageID:
                    return handler.NetHandleClassProjectClaimReward((MSG_CLASSPROJECTCLAIMREWARD)message);
                case MSG_CLASSPROJECTREQUESTLEADERBOARD.c_messageID:
                    return handler.NetHandleClassProjectRequestLeaderboard((MSG_CLASSPROJECTREQUESTLEADERBOARD)message);
                case MSG_CLASSPROJECTREQUESTTELEPORT.c_messageID:
                    return handler.NetHandleClassProjectRequestTeleport((MSG_CLASSPROJECTREQUESTTELEPORT)message);
                case MSG_CLASSPROJECTSCSRRESULTS.c_messageID:
                    return handler.NetHandleClassProjectsCSRResults((MSG_CLASSPROJECTSCSRRESULTS)message);
                case MSG_CLASSPROJECTSREQUESTFRIENDS.c_messageID:
                    return handler.NetHandleClassProjectsRequestFriends((MSG_CLASSPROJECTSREQUESTFRIENDS)message);
                case MSG_CLASSPROJECTUSECROWNS.c_messageID:
                    return handler.NetHandleClassProjectUseCrowns((MSG_CLASSPROJECTUSECROWNS)message);
                case MSG_CLASSPROJECTUSETOKEN.c_messageID:
                    return handler.NetHandleClassProjectUseToken((MSG_CLASSPROJECTUSETOKEN)message);
                case MSG_CLEARALLINTERACTIONS.c_messageID:
                    return handler.NetHandleClearAllInteractions((MSG_CLEARALLINTERACTIONS)message);
                case MSG_CLEARRESUMEINSTANCE.c_messageID:
                    return handler.NetHandleClearResumeInstance((MSG_CLEARRESUMEINSTANCE)message);
                case MSG_CLIENTREQUESTTEAMHELPWORLDINFO.c_messageID:
                    return handler.NetHandleClientRequestTeamHelpWorldInfo((MSG_CLIENTREQUESTTEAMHELPWORLDINFO)message);
                case MSG_CLIENTZONED.c_messageID:
                    return handler.NetHandleClientZoned((MSG_CLIENTZONED)message);
                case MSG_COMPLETEINSTANCE.c_messageID:
                    return handler.NetHandleCompleteInstance((MSG_COMPLETEINSTANCE)message);
                case MSG_COMPLETEINSTANCE2.c_messageID:
                    return handler.NetHandleCompleteInstance2((MSG_COMPLETEINSTANCE2)message);
                case MSG_CONNECTIONSTATS.c_messageID:
                    return handler.NetHandleCONNECTIONSTATS((MSG_CONNECTIONSTATS)message);
                case MSG_CREATENEWEQUIPMENTSET.c_messageID:
                    return handler.NetHandleCreateNewEquipmentSet((MSG_CREATENEWEQUIPMENTSET)message);
                case MSG_CREATESETFAILED.c_messageID:
                    return handler.NetHandleCreateSetFailed((MSG_CREATESETFAILED)message);
                case MSG_CROWNSREWARDSTIERREACHED.c_messageID:
                    return handler.NetHandleCrownsRewardsTierReached((MSG_CROWNSREWARDSTIERREACHED)message);
                case MSG_CSRADDFISH.c_messageID:
                    return handler.NetHandleAddCSRAddFish((MSG_CSRADDFISH)message);
                case MSG_CSRDELETEGIFT.c_messageID:
                    return handler.NetHandleCSRDeleteGift((MSG_CSRDELETEGIFT)message);
                case MSG_CSRREQUESTFISHLIST.c_messageID:
                    return handler.NetHandleAddCSRRequestFishList((MSG_CSRREQUESTFISHLIST)message);
                case MSG_CSRREQUESTGLOBALREGISTRY.c_messageID:
                    return handler.NetHandleCSRRequestGlobalRegistry((MSG_CSRREQUESTGLOBALREGISTRY)message);
                case MSG_CSRSETFRIENDSTATUS.c_messageID:
                    return handler.NetHandleSetFriendStatus((MSG_CSRSETFRIENDSTATUS)message);
                case MSG_CSRTRASHFISH.c_messageID:
                    return handler.NetHandleAddCSRTrashFish((MSG_CSRTRASHFISH)message);
                case MSG_DAILYPVPCOMPLETED.c_messageID:
                    return handler.NetHandleDailyPvPCompleted((MSG_DAILYPVPCOMPLETED)message);
                case MSG_DAILYQUESTEFFECT.c_messageID:
                    return handler.NetHandleDailyQuestEffect((MSG_DAILYQUESTEFFECT)message);
                case MSG_DELETEEQUIPMENTSET.c_messageID:
                    return handler.NetHandleDeleteEquipmentSet((MSG_DELETEEQUIPMENTSET)message);
                case MSG_DELETESETSWITHITEM.c_messageID:
                    return handler.NetHandleDeleteSetsWithItem((MSG_DELETESETSWITHITEM)message);
                case MSG_DISPLAYCOLLECTEDESSENCES.c_messageID:
                    return handler.NetHandleDisplayCollectedEssences((MSG_DISPLAYCOLLECTEDESSENCES)message);
                case MSG_DISPLAYHELPGUI.c_messageID:
                    return handler.NetHandleDisplayHelpGUI((MSG_DISPLAYHELPGUI)message);
                case MSG_DISPLAYMESSAGE.c_messageID:
                    return handler.NetHandleDisplayMessage((MSG_DISPLAYMESSAGE)message);
                case MSG_DISPLAYPETONLYMESSAGE.c_messageID:
                    return handler.NetHandleDisplayPetOnlyMessage((MSG_DISPLAYPETONLYMESSAGE)message);
                case MSG_EQUIPJEWELREQUEST.c_messageID:
                    return handler.NetHandleEquipJewelRequest((MSG_EQUIPJEWELREQUEST)message);
                case MSG_EQUIPJEWELTOITEM.c_messageID:
                    return handler.NetHandleEquipJewelToItem((MSG_EQUIPJEWELTOITEM)message);
                case MSG_EQUIPMENTSETCREATED.c_messageID:
                    return handler.NetHandleEquipmentSetCreated((MSG_EQUIPMENTSETCREATED)message);
                case MSG_EQUIPNEWJEWELTOITEM.c_messageID:
                    return handler.NetHandleEquipNewJewelToItem((MSG_EQUIPNEWJEWELTOITEM)message);
                case MSG_EQUIPRECIPE.c_messageID:
                    return handler.NetHandleEquipRecipe((MSG_EQUIPRECIPE)message);
                case MSG_EQUIPSET.c_messageID:
                    return handler.NetHandleEquipSet((MSG_EQUIPSET)message);
                case MSG_FISHINGLEVELUP.c_messageID:
                    return handler.NetHandleFishingLevelUp((MSG_FISHINGLEVELUP)message);
                case MSG_GAINPETXP.c_messageID:
                    return handler.NetHandleGainPetXP((MSG_GAINPETXP)message);
                case MSG_GETITEMINFO.c_messageID:
                    return handler.NetHandleGetItemInfo((MSG_GETITEMINFO)message);
                case MSG_GoHomeConfirm.c_messageID:
                    return handler.NetHandleGoHomeConfirm((MSG_GoHomeConfirm)message);
                case MSG_GotoDormConfirm.c_messageID:
                    return handler.NetHandleGotoDormConfirm((MSG_GotoDormConfirm)message);
                case MSG_GotoPlayerConfirm.c_messageID:
                    return handler.NetHandleGotoPlayerConfirm((MSG_GotoPlayerConfirm)message);
                case MSG_HATCHMAKINGMESSAGE.c_messageID:
                    return handler.NetHandleHatchmakingMessage((MSG_HATCHMAKINGMESSAGE)message);
                case MSG_HATCHMAKINGSCSRRESULTS.c_messageID:
                    return handler.NetHandleHatchmakingCSRResults((MSG_HATCHMAKINGSCSRRESULTS)message);
                case MSG_HATCHMAKINGSEARCHRESULTS.c_messageID:
                    return handler.NetHandleHatchmakingSearchResults((MSG_HATCHMAKINGSEARCHRESULTS)message);
                case MSG_HATCHMAKINGSREQUESTPREMIUMPETEXEMPTIONS.c_messageID:
                    return handler.NetHandleHatchmakingRequestPremiumPetExemptions((MSG_HATCHMAKINGSREQUESTPREMIUMPETEXEMPTIONS)message);
                case MSG_HATCHMAKINGSTATUS.c_messageID:
                    return handler.NetHandleHatchmakingStatus((MSG_HATCHMAKINGSTATUS)message);
                case MSG_HATCHMAKINGSUPDATEHATCHDAYPET.c_messageID:
                    return handler.NetHandleHatchMakingUpdateHatchDayPet((MSG_HATCHMAKINGSUPDATEHATCHDAYPET)message);
                case MSG_HATCHMAKINGSUPDATEHATCHDAYPET2.c_messageID:
                    return handler.NetHandleHatchMakingUpdateHatchDayPet2((MSG_HATCHMAKINGSUPDATEHATCHDAYPET2)message);
                case MSG_HATCHMAKINGUSETOME.c_messageID:
                    return handler.NetHandleHatchmakingUseTome((MSG_HATCHMAKINGUSETOME)message);
                case MSG_HOLIDAYDATA.c_messageID:
                    return handler.NetHandleHOLIDAYDATA((MSG_HOLIDAYDATA)message);
                case MSG_INVITEALLTOBASICCHATCHANNEL.c_messageID:
                    return handler.NetHandleInviteAllToBasicChatChannel((MSG_INVITEALLTOBASICCHATCHANNEL)message);
                case MSG_INVITETOBASICCHATCHANNEL.c_messageID:
                    return handler.NetHandleInviteToBasicChatChannel((MSG_INVITETOBASICCHATCHANNEL)message);
                case MSG_ISFRIENDSWITHHOUSEOWNER.c_messageID:
                    return handler.NetHandleIsFriendsWithHouseOwner((MSG_ISFRIENDSWITHHOUSEOWNER)message);
                case MSG_ITEMFINDERHOUSECOMPLETE.c_messageID:
                    return handler.NetHandleItemFinderHouseComplete((MSG_ITEMFINDERHOUSECOMPLETE)message);
                case MSG_ITEMFINDERREQUESTBANK.c_messageID:
                    return handler.NetHandleItemFinderRequestBank((MSG_ITEMFINDERREQUESTBANK)message);
                case MSG_ITEMFINDERREQUESTHOUSE.c_messageID:
                    return handler.NetHandleItemFinderRequestHouse((MSG_ITEMFINDERREQUESTHOUSE)message);
                case MSG_ITEMIDENTIFIERINFO.c_messageID:
                    return handler.NetHandleItemIdentifierInfo((MSG_ITEMIDENTIFIERINFO)message);
                case MSG_Infraction.c_messageID:
                    return handler.NetHandleInfraction((MSG_Infraction)message);
                case MSG_JEWELSOCKETLOCKUPDATE.c_messageID:
                    return handler.NetHandleJewelSocketLockUpdate((MSG_JEWELSOCKETLOCKUPDATE)message);
                case MSG_JEWELSOCKETUNLOCKCOST.c_messageID:
                    return handler.NetHandleJewelSocketUnlockCost((MSG_JEWELSOCKETUNLOCKCOST)message);
                case MSG_JOINBASICCHATCHANNEL.c_messageID:
                    return handler.NetHandleJoinBasicChatChannel((MSG_JOINBASICCHATCHANNEL)message);
                case MSG_KHANDANCESTATUS.c_messageID:
                    return handler.NetHandleKhanDanceStatus((MSG_KHANDANCESTATUS)message);
                case MSG_LAVALOCKSTATUS.c_messageID:
                    return handler.NetHandleLavaLockStatus((MSG_LAVALOCKSTATUS)message);
                case MSG_LOGCLASSICMODE.c_messageID:
                    return handler.NetHandleLogClassicMode((MSG_LOGCLASSICMODE)message);
                case MSG_LOGVIDEOCAPABILITIES.c_messageID:
                    return handler.NetHandleLogVideoCapabilities((MSG_LOGVIDEOCAPABILITIES)message);
                case MSG_MAGICMIRRORCHANGEPLAYER.c_messageID:
                    return handler.NetHandleMagicMirrorChangePlayer((MSG_MAGICMIRRORCHANGEPLAYER)message);
                case MSG_MAGICMIRRORREQUESTCHANGE.c_messageID:
                    return handler.NetHandleMagicMirrorRequestChange((MSG_MAGICMIRRORREQUESTCHANGE)message);
                case MSG_MAGICMIRRORSHOPOPEN.c_messageID:
                    return handler.NetHandleMagicMirrorShopOpen((MSG_MAGICMIRRORSHOPOPEN)message);
                case MSG_MAPREQUIREMENTS.c_messageID:
                    return handler.NetHandleMapRequirements((MSG_MAPREQUIREMENTS)message);
                case MSG_MONSTERMAGICLEVELUP.c_messageID:
                    return handler.NetHandleMonsterMagicLevelUp((MSG_MONSTERMAGICLEVELUP)message);
                case MSG_MONSTERMAGICREQUESTCREATE.c_messageID:
                    return handler.NetHandleMonsterMagicRequestCreate((MSG_MONSTERMAGICREQUESTCREATE)message);
                case MSG_MONSTERMAGICUSETOME.c_messageID:
                    return handler.NetHandleMonsterMagicUseTome((MSG_MONSTERMAGICUSETOME)message);
                case MSG_MOVEEQUIPMENTSET.c_messageID:
                    return handler.NetHandleMoveEquipmentSet((MSG_MOVEEQUIPMENTSET)message);
                case MSG_OPENCLASSPROJECTPORTAL.c_messageID:
                    return handler.NetHandleOpenClassProjectPortal((MSG_OPENCLASSPROJECTPORTAL)message);
                case MSG_OPENITEMFINDER.c_messageID:
                    return handler.NetHandleOpenItemFinder((MSG_OPENITEMFINDER)message);
                case MSG_PETELIXIRBUYREQUEST.c_messageID:
                    return handler.NetHandlePetElixirBuyRequest((MSG_PETELIXIRBUYREQUEST)message);
                case MSG_PETELIXIROPEN.c_messageID:
                    return handler.NetHandlePetElixirOpen((MSG_PETELIXIROPEN)message);
                case MSG_PETFEEDHAPPINESS.c_messageID:
                    return handler.NetHandlePetFeedHappiness((MSG_PETFEEDHAPPINESS)message);
                case MSG_PETGAMESKIP.c_messageID:
                    return handler.NetHandlePetGameSkip((MSG_PETGAMESKIP)message);
                case MSG_PETGAMESKIPFEED.c_messageID:
                    return handler.NetHandlePetGameSkipFeed((MSG_PETGAMESKIPFEED)message);
                case MSG_PETTELEPORT.c_messageID:
                    return handler.NetHandlePetTeleport((MSG_PETTELEPORT)message);
                case MSG_PETTOMEPETADDED.c_messageID:
                    return handler.NetHandlePetTomePetAdded((MSG_PETTOMEPETADDED)message);
                case MSG_PHOTOMANCYUSETOME.c_messageID:
                    return handler.NetHandlePhotomancyUseTome((MSG_PHOTOMANCYUSETOME)message);
                case MSG_PHOTOTAKEN.c_messageID:
                    return handler.NetHandlePhotoTaken((MSG_PHOTOTAKEN)message);
                case MSG_PUBLICJEWELSOCKETUPDATE.c_messageID:
                    return handler.NetHandlePublicJewelSocketUpdate((MSG_PUBLICJEWELSOCKETUPDATE)message);
                case MSG_QUICKSELLREQUEST.c_messageID:
                    return handler.NetHandleQuickSellRequest((MSG_QUICKSELLREQUEST)message);
                case MSG_RADIALZONECLUSTERQUICKCHATEXT.c_messageID:
                    return handler.NetHandleRadialZoneClusterQuickChatExt((MSG_RADIALZONECLUSTERQUICKCHATEXT)message);
                case MSG_READTUTORIALTIP.c_messageID:
                    return handler.NetHandleReadTutorialTip((MSG_READTUTORIALTIP)message);
                case MSG_REINTERACT.c_messageID:
                    return handler.NetHandleReinteract((MSG_REINTERACT)message);
                case MSG_REMOVECROWNSREWARDSEVENT.c_messageID:
                    return handler.NetHandleREMOVECROWNSREWARDSEVENT((MSG_REMOVECROWNSREWARDSEVENT)message);
                case MSG_REMOVEITEMLOCKS.c_messageID:
                    return handler.NetHandleRemoveItemLocks((MSG_REMOVEITEMLOCKS)message);
                case MSG_REMOVEPLAYERFROMBASICCHATCHANNEL.c_messageID:
                    return handler.NetHandleRemovePlayerFromBasicChatChannel((MSG_REMOVEPLAYERFROMBASICCHATCHANNEL)message);
                case MSG_REMOVEPLAYERFROMBASICCHATCHANNELUPDATE.c_messageID:
                    return handler.NetHandleRemovePlayerFromBasicChatChannelUpdate((MSG_REMOVEPLAYERFROMBASICCHATCHANNELUPDATE)message);
                case MSG_REQUESTBATTLEGROUNDSLOOT.c_messageID:
                    return handler.NetHandleRequestBattlegroundsLoot((MSG_REQUESTBATTLEGROUNDSLOOT)message);
                case MSG_REQUESTCHATSTATS.c_messageID:
                    return handler.NetHandleRequestChatStats((MSG_REQUESTCHATSTATS)message);
                case MSG_REQUESTCLASSPROJECTINFO.c_messageID:
                    return handler.NetHandleRequestClassProjectInfo((MSG_REQUESTCLASSPROJECTINFO)message);
                case MSG_REQUESTCROWNSREWARDSEVENTS.c_messageID:
                    return handler.NetHandleREQUESTCROWNSREWARDSEVENTS((MSG_REQUESTCROWNSREWARDSEVENTS)message);
                case MSG_REQUESTHATCHMAKING.c_messageID:
                    return handler.NetHandleRequestHatchmaking((MSG_REQUESTHATCHMAKING)message);
                case MSG_REQUESTHATCHMAKINGADDPET.c_messageID:
                    return handler.NetHandleRequestHatchmakingAddPet((MSG_REQUESTHATCHMAKINGADDPET)message);
                case MSG_REQUESTHATCHMAKINGFRIENDPETS.c_messageID:
                    return handler.NetHandleRequestHatchmakingFriendPets((MSG_REQUESTHATCHMAKINGFRIENDPETS)message);
                case MSG_REQUESTHATCHMAKINGHATCH.c_messageID:
                    return handler.NetHandleRequestHatchmakingHatch((MSG_REQUESTHATCHMAKINGHATCH)message);
                case MSG_REQUESTHATCHMAKINGHATCH2.c_messageID:
                    return handler.NetHandleRequestHatchmakingHatch2((MSG_REQUESTHATCHMAKINGHATCH2)message);
                case MSG_REQUESTHATCHMAKINGHATCHEDPET.c_messageID:
                    return handler.NetHandleRequestHatchmakingHatchedPet((MSG_REQUESTHATCHMAKINGHATCHEDPET)message);
                case MSG_REQUESTHATCHMAKINGPETDATA.c_messageID:
                    return handler.NetHandleRequestHatchmakingPetData((MSG_REQUESTHATCHMAKINGPETDATA)message);
                case MSG_REQUESTHATCHMAKINGPETS.c_messageID:
                    return handler.NetHandleRequestHatchmakingPets((MSG_REQUESTHATCHMAKINGPETS)message);
                case MSG_REQUESTHATCHMAKINGPETTYPES.c_messageID:
                    return handler.NetHandleRequestHatchmakingPetTypes((MSG_REQUESTHATCHMAKINGPETTYPES)message);
                case MSG_REQUESTHATCHMAKINGREMOVEPET.c_messageID:
                    return handler.NetHandleRequestHatchmakingRemovePet((MSG_REQUESTHATCHMAKINGREMOVEPET)message);
                case MSG_REQUESTHATCHMAKINGSEARCHPETS.c_messageID:
                    return handler.NetHandleRequestHatchmakingSearchPets((MSG_REQUESTHATCHMAKINGSEARCHPETS)message);
                case MSG_REQUESTMAINLINEAUDIT.c_messageID:
                    return handler.NetHandleRequestMainlineAudit((MSG_REQUESTMAINLINEAUDIT)message);
                case MSG_REQUESTMINIGAME.c_messageID:
                    return handler.NetHandleRequestMiniGame((MSG_REQUESTMINIGAME)message);
                case MSG_REQUESTMONSTERTOME.c_messageID:
                    return handler.NetHandleRequestMonsterTome((MSG_REQUESTMONSTERTOME)message);
                case MSG_REQUESTPETTOME.c_messageID:
                    return handler.NetHandleRequestPetTome((MSG_REQUESTPETTOME)message);
                case MSG_REQUESTRADIALFRIENDQUICKCHATEXT.c_messageID:
                    return handler.NetHandleRequestRadialFriendQuickChatExt((MSG_REQUESTRADIALFRIENDQUICKCHATEXT)message);
                case MSG_REQUESTSIGILINFO.c_messageID:
                    return handler.NetHandleRequestSigilInfo((MSG_REQUESTSIGILINFO)message);
                case MSG_REQUESTTEAMHELPFAIL.c_messageID:
                    return handler.NetHandleRequestTeamHelpFail((MSG_REQUESTTEAMHELPFAIL)message);
                case MSG_REQUESTTEAMHELPINFO.c_messageID:
                    return handler.NetHandleRequestTeamHelpInfo((MSG_REQUESTTEAMHELPINFO)message);
                case MSG_REQUESTTEAMHELPJOIN.c_messageID:
                    return handler.NetHandleRequestTeamHelpJoin((MSG_REQUESTTEAMHELPJOIN)message);
                case MSG_REQUESTTEAMHELPJOINFAIL.c_messageID:
                    return handler.NetHandleRequestTeamHelpJoinFail((MSG_REQUESTTEAMHELPJOINFAIL)message);
                case MSG_REQUESTTEAMHELPWORLDINFO.c_messageID:
                    return handler.NetHandleRequestTeamHelpWorldInfo((MSG_REQUESTTEAMHELPWORLDINFO)message);
                case MSG_REQUESTTEAMUP.c_messageID:
                    return handler.NetHandleRequestTeamUp((MSG_REQUESTTEAMUP)message);
                case MSG_REQUESTTUTORIALTIPLOG.c_messageID:
                    return handler.NetHandleRequestTutorialTipLog((MSG_REQUESTTUTORIALTIPLOG)message);
                case MSG_REQUESTZONECLUSTERQUICKCHATEXT.c_messageID:
                    return handler.NetHandleRequestZoneClusterQuickChatExt((MSG_REQUESTZONECLUSTERQUICKCHATEXT)message);
                case MSG_RESTOREORIGINALCASTLE.c_messageID:
                    return handler.NetHandleRestoreOriginalCastle((MSG_RESTOREORIGINALCASTLE)message);
                case MSG_RESUMEINSTANCETELEPORTPLAYER.c_messageID:
                    return handler.NetHandleResumeInstanceTeleportPlayer((MSG_RESUMEINSTANCETELEPORTPLAYER)message);
                case MSG_RIDABLEUPDATE.c_messageID:
                    return handler.NetHandleRidableUpdate((MSG_RIDABLEUPDATE)message);
                case MSG_RIDEOBJECT.c_messageID:
                    return handler.NetHandleRideObject((MSG_RIDEOBJECT)message);
                case MSG_RIDEOBJECTFULL.c_messageID:
                    return handler.NetHandleRideObjectFull((MSG_RIDEOBJECTFULL)message);
                case MSG_RIDERSLIST.c_messageID:
                    return handler.NetHandleRidersList((MSG_RIDERSLIST)message);
                case MSG_RecallLocationConfirm.c_messageID:
                    return handler.NetHandleRecallLocationConfirm((MSG_RecallLocationConfirm)message);
                case MSG_SENDTRIVIA.c_messageID:
                    return handler.NetHandleSendTrivia((MSG_SENDTRIVIA)message);
                case MSG_SEPIDIOUSARRIVAL.c_messageID:
                    return handler.NetHandleSepidiousArrival((MSG_SEPIDIOUSARRIVAL)message);
                case MSG_SETBASICCHATCHANNELPUBLIC.c_messageID:
                    return handler.NetHandleSetBasicChatChannelPublic((MSG_SETBASICCHATCHANNELPUBLIC)message);
                case MSG_SETELIXIRTIMER.c_messageID:
                    return handler.NetHandleSetElixirTimer((MSG_SETELIXIRTIMER)message);
                case MSG_SETRESUMEINSTANCE.c_messageID:
                    return handler.NetHandleSetResumeInstance((MSG_SETRESUMEINSTANCE)message);
                case MSG_SETSTOREDMOUNT.c_messageID:
                    return handler.NetHandleSetStoredMount((MSG_SETSTOREDMOUNT)message);
                case MSG_SWITCHTOPET.c_messageID:
                    return handler.NetHandleSwitchToPet((MSG_SWITCHTOPET)message);
                case MSG_SetBGPolymorphLevel.c_messageID:
                    return handler.NetHandleSetBGPolymorphLevel((MSG_SetBGPolymorphLevel)message);
                case MSG_TEAMUPADDPLAYER.c_messageID:
                    return handler.NetHandleTeamUpAddPlayer((MSG_TEAMUPADDPLAYER)message);
                case MSG_TEAMUPADDPLAYERTOCLIENT.c_messageID:
                    return handler.NetHandleTeamUpAddPlayerToClient((MSG_TEAMUPADDPLAYERTOCLIENT)message);
                case MSG_TEAMUPFAILED.c_messageID:
                    return handler.NetHandleTeamUpFailed((MSG_TEAMUPFAILED)message);
                case MSG_TEAMUPREMOVEPLAYER.c_messageID:
                    return handler.NetHandleTeamUpRemovePlayer((MSG_TEAMUPREMOVEPLAYER)message);
                case MSG_TEAMUPREMOVEPLAYERFROMCLIENT.c_messageID:
                    return handler.NetHandleTeamUpRemovePlayerFromClient((MSG_TEAMUPREMOVEPLAYERFROMCLIENT)message);
                case MSG_TEAMUPTELEPORTPLAYER.c_messageID:
                    return handler.NetHandleTeamUpTeleportPlayer((MSG_TEAMUPTELEPORTPLAYER)message);
                case MSG_TIEREDSPELLRESET.c_messageID:
                    return handler.NetHandleTieredSpellReset((MSG_TIEREDSPELLRESET)message);
                case MSG_TIEREDSPELLRESETRESP.c_messageID:
                    return handler.NetHandleTieredSpellResetResponse((MSG_TIEREDSPELLRESETRESP)message);
                case MSG_TIEREDSPELLUPGRADE.c_messageID:
                    return handler.NetHandleTieredSpellUpgrade((MSG_TIEREDSPELLUPGRADE)message);
                case MSG_TIEREDSPELLUPGRADERESP.c_messageID:
                    return handler.NetHandleTieredSpellUpgradeResponse((MSG_TIEREDSPELLUPGRADERESP)message);
                case MSG_TOURNAMENTLOOTROLLINFO.c_messageID:
                    return handler.NetHandleTournamentLootRollInfo((MSG_TOURNAMENTLOOTROLLINFO)message);
                case MSG_TOURNAMENTLOOTROLLRESPONSE.c_messageID:
                    return handler.NetHandleTournamentLootRollResponse((MSG_TOURNAMENTLOOTROLLRESPONSE)message);
                case MSG_TOURNAMENTLOOTROLLRESULT.c_messageID:
                    return handler.NetHandleTournamentLootRollResult((MSG_TOURNAMENTLOOTROLLRESULT)message);
                case MSG_UNEQUIPSOCKETEDJEWEL.c_messageID:
                    return handler.NetHandleUnequipSocketedJewel((MSG_UNEQUIPSOCKETEDJEWEL)message);
                case MSG_UNLOCKPETTALENT.c_messageID:
                    return handler.NetHandleUnlockPetTalent((MSG_UNLOCKPETTALENT)message);
                case MSG_UNLOCKSOCKETS.c_messageID:
                    return handler.NetHandleUnlockSockets((MSG_UNLOCKSOCKETS)message);
                case MSG_UNLOCKSOCKETSCONFIRM.c_messageID:
                    return handler.NetHandleUnlockSocketsConfirm((MSG_UNLOCKSOCKETSCONFIRM)message);
                case MSG_UNSOCKETJEWELREQUEST.c_messageID:
                    return handler.NetHandleUnsocketJewelRequest((MSG_UNSOCKETJEWELREQUEST)message);
                case MSG_UPDATEADVENTUREPOWERCOOLDOWN.c_messageID:
                    return handler.NetHandleUpdateAdventurePowerCooldown((MSG_UPDATEADVENTUREPOWERCOOLDOWN)message);
                case MSG_UPDATEAFTERCOMBATDANCE.c_messageID:
                    return handler.NetHandleUpdateAfterCombatDance((MSG_UPDATEAFTERCOMBATDANCE)message);
                case MSG_UPDATEBANKLIMIT.c_messageID:
                    return handler.NetHandleMsg_UpdateBankLimit((MSG_UPDATEBANKLIMIT)message);
                case MSG_UPDATECLASSPROJECTBUTTON.c_messageID:
                    return handler.NetHandleUpdateClassProjectButton((MSG_UPDATECLASSPROJECTBUTTON)message);
                case MSG_UPDATECLASSPROJECTSTATUS.c_messageID:
                    return handler.NetHandleUpdateClassProjectStatus((MSG_UPDATECLASSPROJECTSTATUS)message);
                case MSG_UPDATECOLLECTEDESSENCES.c_messageID:
                    return handler.NetHandleUpdateCollectedEssences((MSG_UPDATECOLLECTEDESSENCES)message);
                case MSG_UPDATECUSTOMEMOTES.c_messageID:
                    return handler.NetHandleUpdateCustomEmotes((MSG_UPDATECUSTOMEMOTES)message);
                case MSG_UPDATEEQUIPMENTSETS.c_messageID:
                    return handler.NetHandleUpdateEquipmentSets((MSG_UPDATEEQUIPMENTSETS)message);
                case MSG_UPDATEEVENTCURRENCY1.c_messageID:
                    return handler.NetHandleUpdateEventCurrency1((MSG_UPDATEEVENTCURRENCY1)message);
                case MSG_UPDATEEVENTCURRENCY2.c_messageID:
                    return handler.NetHandleUpdateEventCurrency2((MSG_UPDATEEVENTCURRENCY2)message);
                case MSG_UPDATEEXPANSION.c_messageID:
                    return handler.NetHandleMsg_UpdateExpansion((MSG_UPDATEEXPANSION)message);
                case MSG_UPDATEEXTRAINVENTORY.c_messageID:
                    return handler.NetHandleUpdateExtraInventory((MSG_UPDATEEXTRAINVENTORY)message);
                case MSG_UPDATEFISHINGXP.c_messageID:
                    return handler.NetHandleUpdateFishingXP((MSG_UPDATEFISHINGXP)message);
                case MSG_UPDATEITEMSPELLEXCLUSIONLIST.c_messageID:
                    return handler.NetHandleUpdateItemSpellExclusionList((MSG_UPDATEITEMSPELLEXCLUSIONLIST)message);
                case MSG_UPDATEMAXSHADOWPIPS.c_messageID:
                    return handler.NetHandleUpdateMaxShadowPips((MSG_UPDATEMAXSHADOWPIPS)message);
                case MSG_UPDATEMONSTERMAGICXP.c_messageID:
                    return handler.NetHandleUpdateMonsterMagicXP((MSG_UPDATEMONSTERMAGICXP)message);
                case MSG_UPDATENEWSPELLBOOKLAYOUTWARNING.c_messageID:
                    return handler.NetHandleUpdateNewSpellbookLayoutWarning((MSG_UPDATENEWSPELLBOOKLAYOUTWARNING)message);
                case MSG_UPDATEPETBILLBOARD.c_messageID:
                    return handler.NetHandleUpdatePetBillboard((MSG_UPDATEPETBILLBOARD)message);
                case MSG_UPDATEPIPCONVERSION.c_messageID:
                    return handler.NetHandleUpdatePipConversion((MSG_UPDATEPIPCONVERSION)message);
                case MSG_UPDATEPURCHASEDCHARACTERSLOTS.c_messageID:
                    return handler.NetHandleUpdatePurchasedCharacterSlots((MSG_UPDATEPURCHASEDCHARACTERSLOTS)message);
                case MSG_UPDATEREMEMBERLASTREALM.c_messageID:
                    return handler.NetHandleUpdateRememberLastRealm((MSG_UPDATEREMEMBERLASTREALM)message);
                case MSG_UPDATERESUMEINSTANCETIME.c_messageID:
                    return handler.NetHandleUpdateResumeInstanceTime((MSG_UPDATERESUMEINSTANCETIME)message);
                case MSG_UPDATERESUMEINSTANCETIME2.c_messageID:
                    return handler.NetHandleUpdateResumeInstanceTime2((MSG_UPDATERESUMEINSTANCETIME2)message);
                case MSG_UPDATESUBSCRIBERBENEFITFLAGS.c_messageID:
                    return handler.NetHandleUpdateSubscriberBenefitFlags((MSG_UPDATESUBSCRIBERBENEFITFLAGS)message);
                case MSG_UPDATETELEPORTEFFECT.c_messageID:
                    return handler.NetHandleUpdateTeleportEffect((MSG_UPDATETELEPORTEFFECT)message);
                case MSG_UPDATETUTORIALTIPLOG.c_messageID:
                    return handler.NetHandleUpdateTutorialTipLog((MSG_UPDATETUTORIALTIPLOG)message);
                case MSG_USEPETADVENTUREPOWER.c_messageID:
                    return handler.NetHandleUsePetAdventurePower((MSG_USEPETADVENTUREPOWER)message);
                case MSG_UpdateClassProjectPlayerProgress.c_messageID:
                    return handler.NetHandleUpdateClassProjectPlayerProgress((MSG_UpdateClassProjectPlayerProgress)message);
                case MSG_WHIRLYBURLYMESSAGE.c_messageID:
                    return handler.NetHandleWhirlyBurlyMessage((MSG_WHIRLYBURLYMESSAGE)message);
                case MSG_WHIRLYBURLYOPENKIOSK.c_messageID:
                    return handler.NetHandleWhirlyBurlyOpenKiosk((MSG_WHIRLYBURLYOPENKIOSK)message);
                case MSG_ZONEGATELIST.c_messageID:
                    return handler.NetHandleZoneGateList((MSG_ZONEGATELIST)message);
                case MSG_ZONEHOP.c_messageID:
                    return handler.NetHandleZoneHop((MSG_ZONEHOP)message);
            }
            return false;
        }
        
        public INetworkMessage AllocateMessage(byte id)
        {
            switch (id)
            {
                case MSG_ACCESSPASSPURCHASE.c_messageID: return new MSG_ACCESSPASSPURCHASE();
                case MSG_ADDCROWNSREWARDSEVENT.c_messageID: return new MSG_ADDCROWNSREWARDSEVENT();
                case MSG_ADDPLAYERTOBASICCHATCHANNEL.c_messageID: return new MSG_ADDPLAYERTOBASICCHATCHANNEL();
                case MSG_ATHANORARRIVAL.c_messageID: return new MSG_ATHANORARRIVAL();
                case MSG_BASICCHATCHANNELERRORMESSAGE.c_messageID: return new MSG_BASICCHATCHANNELERRORMESSAGE();
                case MSG_BASICCHATCHANNELUPDATECOOLDOWN.c_messageID: return new MSG_BASICCHATCHANNELUPDATECOOLDOWN();
                case MSG_BATTLECARDBUY.c_messageID: return new MSG_BATTLECARDBUY();
                case MSG_BATTLECARDBUYCONFIRM.c_messageID: return new MSG_BATTLECARDBUYCONFIRM();
                case MSG_BATTLECARDSHOPLIST.c_messageID: return new MSG_BATTLECARDSHOPLIST();
                case MSG_BATTLECARDTRASH.c_messageID: return new MSG_BATTLECARDTRASH();
                case MSG_BATTLECARDTRASHCONFIRM.c_messageID: return new MSG_BATTLECARDTRASHCONFIRM();
                case MSG_BATTLEGROUNDEND.c_messageID: return new MSG_BATTLEGROUNDEND();
                case MSG_BATTLEGROUNDPENALTY.c_messageID: return new MSG_BATTLEGROUNDPENALTY();
                case MSG_BATTLEGROUNDPOLYMORPHIMPROVEMENT.c_messageID: return new MSG_BATTLEGROUNDPOLYMORPHIMPROVEMENT();
                case MSG_BATTLEGROUNDPOLYMORPHIMPROVEREQ.c_messageID: return new MSG_BATTLEGROUNDPOLYMORPHIMPROVEREQ();
                case MSG_BATTLEGROUNDPOLYMORPHIMPROVERESP.c_messageID: return new MSG_BATTLEGROUNDPOLYMORPHIMPROVERESP();
                case MSG_BATTLEGROUNDQUEUEGROUP.c_messageID: return new MSG_BATTLEGROUNDQUEUEGROUP();
                case MSG_BATTLEGROUNDQUEUEGROUPCHECK.c_messageID: return new MSG_BATTLEGROUNDQUEUEGROUPCHECK();
                case MSG_BATTLEGROUNDQUEUEGROUPJOINED.c_messageID: return new MSG_BATTLEGROUNDQUEUEGROUPJOINED();
                case MSG_BATTLEGROUNDQUEUEGROUPSTATUS.c_messageID: return new MSG_BATTLEGROUNDQUEUEGROUPSTATUS();
                case MSG_BATTLEGROUNDQUEUEPLAYER.c_messageID: return new MSG_BATTLEGROUNDQUEUEPLAYER();
                case MSG_BATTLEGROUNDQUEUESTATS.c_messageID: return new MSG_BATTLEGROUNDQUEUESTATS();
                case MSG_BATTLEGROUNDQUEUEUPDATE.c_messageID: return new MSG_BATTLEGROUNDQUEUEUPDATE();
                case MSG_BATTLEGROUNDREQUESTMATCHDATA.c_messageID: return new MSG_BATTLEGROUNDREQUESTMATCHDATA();
                case MSG_BATTLEGROUNDSHOWCOMPASS.c_messageID: return new MSG_BATTLEGROUNDSHOWCOMPASS();
                case MSG_BATTLEGROUNDTELEPORTPLAYER.c_messageID: return new MSG_BATTLEGROUNDTELEPORTPLAYER();
                case MSG_BATTLEGROUNDUPDATEPOINTS.c_messageID: return new MSG_BATTLEGROUNDUPDATEPOINTS();
                case MSG_BGISPOLYMORPHUNLOCKEDREQUEST.c_messageID: return new MSG_BGISPOLYMORPHUNLOCKEDREQUEST();
                case MSG_BGISPOLYMORPHUNLOCKEDRESPONSE.c_messageID: return new MSG_BGISPOLYMORPHUNLOCKEDRESPONSE();
                case MSG_BGOPENPOLYMORPHSELECT.c_messageID: return new MSG_BGOPENPOLYMORPHSELECT();
                case MSG_BGPOIUpdate.c_messageID: return new MSG_BGPOIUpdate();
                case MSG_BGPlayerStatsUpdate.c_messageID: return new MSG_BGPlayerStatsUpdate();
                case MSG_BGPlayerSync.c_messageID: return new MSG_BGPlayerSync();
                case MSG_BGQueueStatus.c_messageID: return new MSG_BGQueueStatus();
                case MSG_BGResetStats.c_messageID: return new MSG_BGResetStats();
                case MSG_BGSELECTPOLYMORPHDONE.c_messageID: return new MSG_BGSELECTPOLYMORPHDONE();
                case MSG_BGSELECTPOLYMORPHREQUEST.c_messageID: return new MSG_BGSELECTPOLYMORPHREQUEST();
                case MSG_BGSELECTPOLYMORPHRESPONSE.c_messageID: return new MSG_BGSELECTPOLYMORPHRESPONSE();
                case MSG_BGSigilProxyEvent.c_messageID: return new MSG_BGSigilProxyEvent();
                case MSG_BUYPETELIXIRCONFIRM.c_messageID: return new MSG_BUYPETELIXIRCONFIRM();
                case MSG_BUYSEASONPASS.c_messageID: return new MSG_BUYSEASONPASS();
                case MSG_BattleBookAdd.c_messageID: return new MSG_BattleBookAdd();
                case MSG_BattleBookClear.c_messageID: return new MSG_BattleBookClear();
                case MSG_BattleBookRating.c_messageID: return new MSG_BattleBookRating();
                case MSG_BattleBookRemove.c_messageID: return new MSG_BattleBookRemove();
                case MSG_BattlegroundChatProjectData.c_messageID: return new MSG_BattlegroundChatProjectData();
                case MSG_CANSEETIEREDSPELLGROUPS.c_messageID: return new MSG_CANSEETIEREDSPELLGROUPS();
                case MSG_CASTLETOURSGOTOFRIEND.c_messageID: return new MSG_CASTLETOURSGOTOFRIEND();
                case MSG_CLASSPROJECTCLAIMREWARD.c_messageID: return new MSG_CLASSPROJECTCLAIMREWARD();
                case MSG_CLASSPROJECTREQUESTLEADERBOARD.c_messageID: return new MSG_CLASSPROJECTREQUESTLEADERBOARD();
                case MSG_CLASSPROJECTREQUESTTELEPORT.c_messageID: return new MSG_CLASSPROJECTREQUESTTELEPORT();
                case MSG_CLASSPROJECTSCSRRESULTS.c_messageID: return new MSG_CLASSPROJECTSCSRRESULTS();
                case MSG_CLASSPROJECTSREQUESTFRIENDS.c_messageID: return new MSG_CLASSPROJECTSREQUESTFRIENDS();
                case MSG_CLASSPROJECTUSECROWNS.c_messageID: return new MSG_CLASSPROJECTUSECROWNS();
                case MSG_CLASSPROJECTUSETOKEN.c_messageID: return new MSG_CLASSPROJECTUSETOKEN();
                case MSG_CLEARALLINTERACTIONS.c_messageID: return new MSG_CLEARALLINTERACTIONS();
                case MSG_CLEARRESUMEINSTANCE.c_messageID: return new MSG_CLEARRESUMEINSTANCE();
                case MSG_CLIENTREQUESTTEAMHELPWORLDINFO.c_messageID: return new MSG_CLIENTREQUESTTEAMHELPWORLDINFO();
                case MSG_CLIENTZONED.c_messageID: return new MSG_CLIENTZONED();
                case MSG_COMPLETEINSTANCE.c_messageID: return new MSG_COMPLETEINSTANCE();
                case MSG_COMPLETEINSTANCE2.c_messageID: return new MSG_COMPLETEINSTANCE2();
                case MSG_CONNECTIONSTATS.c_messageID: return new MSG_CONNECTIONSTATS();
                case MSG_CREATENEWEQUIPMENTSET.c_messageID: return new MSG_CREATENEWEQUIPMENTSET();
                case MSG_CREATESETFAILED.c_messageID: return new MSG_CREATESETFAILED();
                case MSG_CROWNSREWARDSTIERREACHED.c_messageID: return new MSG_CROWNSREWARDSTIERREACHED();
                case MSG_CSRADDFISH.c_messageID: return new MSG_CSRADDFISH();
                case MSG_CSRDELETEGIFT.c_messageID: return new MSG_CSRDELETEGIFT();
                case MSG_CSRREQUESTFISHLIST.c_messageID: return new MSG_CSRREQUESTFISHLIST();
                case MSG_CSRREQUESTGLOBALREGISTRY.c_messageID: return new MSG_CSRREQUESTGLOBALREGISTRY();
                case MSG_CSRSETFRIENDSTATUS.c_messageID: return new MSG_CSRSETFRIENDSTATUS();
                case MSG_CSRTRASHFISH.c_messageID: return new MSG_CSRTRASHFISH();
                case MSG_DAILYPVPCOMPLETED.c_messageID: return new MSG_DAILYPVPCOMPLETED();
                case MSG_DAILYQUESTEFFECT.c_messageID: return new MSG_DAILYQUESTEFFECT();
                case MSG_DELETEEQUIPMENTSET.c_messageID: return new MSG_DELETEEQUIPMENTSET();
                case MSG_DELETESETSWITHITEM.c_messageID: return new MSG_DELETESETSWITHITEM();
                case MSG_DISPLAYCOLLECTEDESSENCES.c_messageID: return new MSG_DISPLAYCOLLECTEDESSENCES();
                case MSG_DISPLAYHELPGUI.c_messageID: return new MSG_DISPLAYHELPGUI();
                case MSG_DISPLAYMESSAGE.c_messageID: return new MSG_DISPLAYMESSAGE();
                case MSG_DISPLAYPETONLYMESSAGE.c_messageID: return new MSG_DISPLAYPETONLYMESSAGE();
                case MSG_EQUIPJEWELREQUEST.c_messageID: return new MSG_EQUIPJEWELREQUEST();
                case MSG_EQUIPJEWELTOITEM.c_messageID: return new MSG_EQUIPJEWELTOITEM();
                case MSG_EQUIPMENTSETCREATED.c_messageID: return new MSG_EQUIPMENTSETCREATED();
                case MSG_EQUIPNEWJEWELTOITEM.c_messageID: return new MSG_EQUIPNEWJEWELTOITEM();
                case MSG_EQUIPRECIPE.c_messageID: return new MSG_EQUIPRECIPE();
                case MSG_EQUIPSET.c_messageID: return new MSG_EQUIPSET();
                case MSG_FISHINGLEVELUP.c_messageID: return new MSG_FISHINGLEVELUP();
                case MSG_GAINPETXP.c_messageID: return new MSG_GAINPETXP();
                case MSG_GETITEMINFO.c_messageID: return new MSG_GETITEMINFO();
                case MSG_GoHomeConfirm.c_messageID: return new MSG_GoHomeConfirm();
                case MSG_GotoDormConfirm.c_messageID: return new MSG_GotoDormConfirm();
                case MSG_GotoPlayerConfirm.c_messageID: return new MSG_GotoPlayerConfirm();
                case MSG_HATCHMAKINGMESSAGE.c_messageID: return new MSG_HATCHMAKINGMESSAGE();
                case MSG_HATCHMAKINGSCSRRESULTS.c_messageID: return new MSG_HATCHMAKINGSCSRRESULTS();
                case MSG_HATCHMAKINGSEARCHRESULTS.c_messageID: return new MSG_HATCHMAKINGSEARCHRESULTS();
                case MSG_HATCHMAKINGSREQUESTPREMIUMPETEXEMPTIONS.c_messageID: return new MSG_HATCHMAKINGSREQUESTPREMIUMPETEXEMPTIONS();
                case MSG_HATCHMAKINGSTATUS.c_messageID: return new MSG_HATCHMAKINGSTATUS();
                case MSG_HATCHMAKINGSUPDATEHATCHDAYPET.c_messageID: return new MSG_HATCHMAKINGSUPDATEHATCHDAYPET();
                case MSG_HATCHMAKINGSUPDATEHATCHDAYPET2.c_messageID: return new MSG_HATCHMAKINGSUPDATEHATCHDAYPET2();
                case MSG_HATCHMAKINGUSETOME.c_messageID: return new MSG_HATCHMAKINGUSETOME();
                case MSG_HOLIDAYDATA.c_messageID: return new MSG_HOLIDAYDATA();
                case MSG_INVITEALLTOBASICCHATCHANNEL.c_messageID: return new MSG_INVITEALLTOBASICCHATCHANNEL();
                case MSG_INVITETOBASICCHATCHANNEL.c_messageID: return new MSG_INVITETOBASICCHATCHANNEL();
                case MSG_ISFRIENDSWITHHOUSEOWNER.c_messageID: return new MSG_ISFRIENDSWITHHOUSEOWNER();
                case MSG_ITEMFINDERHOUSECOMPLETE.c_messageID: return new MSG_ITEMFINDERHOUSECOMPLETE();
                case MSG_ITEMFINDERREQUESTBANK.c_messageID: return new MSG_ITEMFINDERREQUESTBANK();
                case MSG_ITEMFINDERREQUESTHOUSE.c_messageID: return new MSG_ITEMFINDERREQUESTHOUSE();
                case MSG_ITEMIDENTIFIERINFO.c_messageID: return new MSG_ITEMIDENTIFIERINFO();
                case MSG_Infraction.c_messageID: return new MSG_Infraction();
                case MSG_JEWELSOCKETLOCKUPDATE.c_messageID: return new MSG_JEWELSOCKETLOCKUPDATE();
                case MSG_JEWELSOCKETUNLOCKCOST.c_messageID: return new MSG_JEWELSOCKETUNLOCKCOST();
                case MSG_JOINBASICCHATCHANNEL.c_messageID: return new MSG_JOINBASICCHATCHANNEL();
                case MSG_KHANDANCESTATUS.c_messageID: return new MSG_KHANDANCESTATUS();
                case MSG_LAVALOCKSTATUS.c_messageID: return new MSG_LAVALOCKSTATUS();
                case MSG_LOGCLASSICMODE.c_messageID: return new MSG_LOGCLASSICMODE();
                case MSG_LOGVIDEOCAPABILITIES.c_messageID: return new MSG_LOGVIDEOCAPABILITIES();
                case MSG_MAGICMIRRORCHANGEPLAYER.c_messageID: return new MSG_MAGICMIRRORCHANGEPLAYER();
                case MSG_MAGICMIRRORREQUESTCHANGE.c_messageID: return new MSG_MAGICMIRRORREQUESTCHANGE();
                case MSG_MAGICMIRRORSHOPOPEN.c_messageID: return new MSG_MAGICMIRRORSHOPOPEN();
                case MSG_MAPREQUIREMENTS.c_messageID: return new MSG_MAPREQUIREMENTS();
                case MSG_MONSTERMAGICLEVELUP.c_messageID: return new MSG_MONSTERMAGICLEVELUP();
                case MSG_MONSTERMAGICREQUESTCREATE.c_messageID: return new MSG_MONSTERMAGICREQUESTCREATE();
                case MSG_MONSTERMAGICUSETOME.c_messageID: return new MSG_MONSTERMAGICUSETOME();
                case MSG_MOVEEQUIPMENTSET.c_messageID: return new MSG_MOVEEQUIPMENTSET();
                case MSG_OPENCLASSPROJECTPORTAL.c_messageID: return new MSG_OPENCLASSPROJECTPORTAL();
                case MSG_OPENITEMFINDER.c_messageID: return new MSG_OPENITEMFINDER();
                case MSG_PETELIXIRBUYREQUEST.c_messageID: return new MSG_PETELIXIRBUYREQUEST();
                case MSG_PETELIXIROPEN.c_messageID: return new MSG_PETELIXIROPEN();
                case MSG_PETFEEDHAPPINESS.c_messageID: return new MSG_PETFEEDHAPPINESS();
                case MSG_PETGAMESKIP.c_messageID: return new MSG_PETGAMESKIP();
                case MSG_PETGAMESKIPFEED.c_messageID: return new MSG_PETGAMESKIPFEED();
                case MSG_PETTELEPORT.c_messageID: return new MSG_PETTELEPORT();
                case MSG_PETTOMEPETADDED.c_messageID: return new MSG_PETTOMEPETADDED();
                case MSG_PHOTOMANCYUSETOME.c_messageID: return new MSG_PHOTOMANCYUSETOME();
                case MSG_PHOTOTAKEN.c_messageID: return new MSG_PHOTOTAKEN();
                case MSG_PUBLICJEWELSOCKETUPDATE.c_messageID: return new MSG_PUBLICJEWELSOCKETUPDATE();
                case MSG_QUICKSELLREQUEST.c_messageID: return new MSG_QUICKSELLREQUEST();
                case MSG_RADIALZONECLUSTERQUICKCHATEXT.c_messageID: return new MSG_RADIALZONECLUSTERQUICKCHATEXT();
                case MSG_READTUTORIALTIP.c_messageID: return new MSG_READTUTORIALTIP();
                case MSG_REINTERACT.c_messageID: return new MSG_REINTERACT();
                case MSG_REMOVECROWNSREWARDSEVENT.c_messageID: return new MSG_REMOVECROWNSREWARDSEVENT();
                case MSG_REMOVEITEMLOCKS.c_messageID: return new MSG_REMOVEITEMLOCKS();
                case MSG_REMOVEPLAYERFROMBASICCHATCHANNEL.c_messageID: return new MSG_REMOVEPLAYERFROMBASICCHATCHANNEL();
                case MSG_REMOVEPLAYERFROMBASICCHATCHANNELUPDATE.c_messageID: return new MSG_REMOVEPLAYERFROMBASICCHATCHANNELUPDATE();
                case MSG_REQUESTBATTLEGROUNDSLOOT.c_messageID: return new MSG_REQUESTBATTLEGROUNDSLOOT();
                case MSG_REQUESTCHATSTATS.c_messageID: return new MSG_REQUESTCHATSTATS();
                case MSG_REQUESTCLASSPROJECTINFO.c_messageID: return new MSG_REQUESTCLASSPROJECTINFO();
                case MSG_REQUESTCROWNSREWARDSEVENTS.c_messageID: return new MSG_REQUESTCROWNSREWARDSEVENTS();
                case MSG_REQUESTHATCHMAKING.c_messageID: return new MSG_REQUESTHATCHMAKING();
                case MSG_REQUESTHATCHMAKINGADDPET.c_messageID: return new MSG_REQUESTHATCHMAKINGADDPET();
                case MSG_REQUESTHATCHMAKINGFRIENDPETS.c_messageID: return new MSG_REQUESTHATCHMAKINGFRIENDPETS();
                case MSG_REQUESTHATCHMAKINGHATCH.c_messageID: return new MSG_REQUESTHATCHMAKINGHATCH();
                case MSG_REQUESTHATCHMAKINGHATCH2.c_messageID: return new MSG_REQUESTHATCHMAKINGHATCH2();
                case MSG_REQUESTHATCHMAKINGHATCHEDPET.c_messageID: return new MSG_REQUESTHATCHMAKINGHATCHEDPET();
                case MSG_REQUESTHATCHMAKINGPETDATA.c_messageID: return new MSG_REQUESTHATCHMAKINGPETDATA();
                case MSG_REQUESTHATCHMAKINGPETS.c_messageID: return new MSG_REQUESTHATCHMAKINGPETS();
                case MSG_REQUESTHATCHMAKINGPETTYPES.c_messageID: return new MSG_REQUESTHATCHMAKINGPETTYPES();
                case MSG_REQUESTHATCHMAKINGREMOVEPET.c_messageID: return new MSG_REQUESTHATCHMAKINGREMOVEPET();
                case MSG_REQUESTHATCHMAKINGSEARCHPETS.c_messageID: return new MSG_REQUESTHATCHMAKINGSEARCHPETS();
                case MSG_REQUESTMAINLINEAUDIT.c_messageID: return new MSG_REQUESTMAINLINEAUDIT();
                case MSG_REQUESTMINIGAME.c_messageID: return new MSG_REQUESTMINIGAME();
                case MSG_REQUESTMONSTERTOME.c_messageID: return new MSG_REQUESTMONSTERTOME();
                case MSG_REQUESTPETTOME.c_messageID: return new MSG_REQUESTPETTOME();
                case MSG_REQUESTRADIALFRIENDQUICKCHATEXT.c_messageID: return new MSG_REQUESTRADIALFRIENDQUICKCHATEXT();
                case MSG_REQUESTSIGILINFO.c_messageID: return new MSG_REQUESTSIGILINFO();
                case MSG_REQUESTTEAMHELPFAIL.c_messageID: return new MSG_REQUESTTEAMHELPFAIL();
                case MSG_REQUESTTEAMHELPINFO.c_messageID: return new MSG_REQUESTTEAMHELPINFO();
                case MSG_REQUESTTEAMHELPJOIN.c_messageID: return new MSG_REQUESTTEAMHELPJOIN();
                case MSG_REQUESTTEAMHELPJOINFAIL.c_messageID: return new MSG_REQUESTTEAMHELPJOINFAIL();
                case MSG_REQUESTTEAMHELPWORLDINFO.c_messageID: return new MSG_REQUESTTEAMHELPWORLDINFO();
                case MSG_REQUESTTEAMUP.c_messageID: return new MSG_REQUESTTEAMUP();
                case MSG_REQUESTTUTORIALTIPLOG.c_messageID: return new MSG_REQUESTTUTORIALTIPLOG();
                case MSG_REQUESTZONECLUSTERQUICKCHATEXT.c_messageID: return new MSG_REQUESTZONECLUSTERQUICKCHATEXT();
                case MSG_RESTOREORIGINALCASTLE.c_messageID: return new MSG_RESTOREORIGINALCASTLE();
                case MSG_RESUMEINSTANCETELEPORTPLAYER.c_messageID: return new MSG_RESUMEINSTANCETELEPORTPLAYER();
                case MSG_RIDABLEUPDATE.c_messageID: return new MSG_RIDABLEUPDATE();
                case MSG_RIDEOBJECT.c_messageID: return new MSG_RIDEOBJECT();
                case MSG_RIDEOBJECTFULL.c_messageID: return new MSG_RIDEOBJECTFULL();
                case MSG_RIDERSLIST.c_messageID: return new MSG_RIDERSLIST();
                case MSG_RecallLocationConfirm.c_messageID: return new MSG_RecallLocationConfirm();
                case MSG_SENDTRIVIA.c_messageID: return new MSG_SENDTRIVIA();
                case MSG_SEPIDIOUSARRIVAL.c_messageID: return new MSG_SEPIDIOUSARRIVAL();
                case MSG_SETBASICCHATCHANNELPUBLIC.c_messageID: return new MSG_SETBASICCHATCHANNELPUBLIC();
                case MSG_SETELIXIRTIMER.c_messageID: return new MSG_SETELIXIRTIMER();
                case MSG_SETRESUMEINSTANCE.c_messageID: return new MSG_SETRESUMEINSTANCE();
                case MSG_SETSTOREDMOUNT.c_messageID: return new MSG_SETSTOREDMOUNT();
                case MSG_SWITCHTOPET.c_messageID: return new MSG_SWITCHTOPET();
                case MSG_SetBGPolymorphLevel.c_messageID: return new MSG_SetBGPolymorphLevel();
                case MSG_TEAMUPADDPLAYER.c_messageID: return new MSG_TEAMUPADDPLAYER();
                case MSG_TEAMUPADDPLAYERTOCLIENT.c_messageID: return new MSG_TEAMUPADDPLAYERTOCLIENT();
                case MSG_TEAMUPFAILED.c_messageID: return new MSG_TEAMUPFAILED();
                case MSG_TEAMUPREMOVEPLAYER.c_messageID: return new MSG_TEAMUPREMOVEPLAYER();
                case MSG_TEAMUPREMOVEPLAYERFROMCLIENT.c_messageID: return new MSG_TEAMUPREMOVEPLAYERFROMCLIENT();
                case MSG_TEAMUPTELEPORTPLAYER.c_messageID: return new MSG_TEAMUPTELEPORTPLAYER();
                case MSG_TIEREDSPELLRESET.c_messageID: return new MSG_TIEREDSPELLRESET();
                case MSG_TIEREDSPELLRESETRESP.c_messageID: return new MSG_TIEREDSPELLRESETRESP();
                case MSG_TIEREDSPELLUPGRADE.c_messageID: return new MSG_TIEREDSPELLUPGRADE();
                case MSG_TIEREDSPELLUPGRADERESP.c_messageID: return new MSG_TIEREDSPELLUPGRADERESP();
                case MSG_TOURNAMENTLOOTROLLINFO.c_messageID: return new MSG_TOURNAMENTLOOTROLLINFO();
                case MSG_TOURNAMENTLOOTROLLRESPONSE.c_messageID: return new MSG_TOURNAMENTLOOTROLLRESPONSE();
                case MSG_TOURNAMENTLOOTROLLRESULT.c_messageID: return new MSG_TOURNAMENTLOOTROLLRESULT();
                case MSG_UNEQUIPSOCKETEDJEWEL.c_messageID: return new MSG_UNEQUIPSOCKETEDJEWEL();
                case MSG_UNLOCKPETTALENT.c_messageID: return new MSG_UNLOCKPETTALENT();
                case MSG_UNLOCKSOCKETS.c_messageID: return new MSG_UNLOCKSOCKETS();
                case MSG_UNLOCKSOCKETSCONFIRM.c_messageID: return new MSG_UNLOCKSOCKETSCONFIRM();
                case MSG_UNSOCKETJEWELREQUEST.c_messageID: return new MSG_UNSOCKETJEWELREQUEST();
                case MSG_UPDATEADVENTUREPOWERCOOLDOWN.c_messageID: return new MSG_UPDATEADVENTUREPOWERCOOLDOWN();
                case MSG_UPDATEAFTERCOMBATDANCE.c_messageID: return new MSG_UPDATEAFTERCOMBATDANCE();
                case MSG_UPDATEBANKLIMIT.c_messageID: return new MSG_UPDATEBANKLIMIT();
                case MSG_UPDATECLASSPROJECTBUTTON.c_messageID: return new MSG_UPDATECLASSPROJECTBUTTON();
                case MSG_UPDATECLASSPROJECTSTATUS.c_messageID: return new MSG_UPDATECLASSPROJECTSTATUS();
                case MSG_UPDATECOLLECTEDESSENCES.c_messageID: return new MSG_UPDATECOLLECTEDESSENCES();
                case MSG_UPDATECUSTOMEMOTES.c_messageID: return new MSG_UPDATECUSTOMEMOTES();
                case MSG_UPDATEEQUIPMENTSETS.c_messageID: return new MSG_UPDATEEQUIPMENTSETS();
                case MSG_UPDATEEVENTCURRENCY1.c_messageID: return new MSG_UPDATEEVENTCURRENCY1();
                case MSG_UPDATEEVENTCURRENCY2.c_messageID: return new MSG_UPDATEEVENTCURRENCY2();
                case MSG_UPDATEEXPANSION.c_messageID: return new MSG_UPDATEEXPANSION();
                case MSG_UPDATEEXTRAINVENTORY.c_messageID: return new MSG_UPDATEEXTRAINVENTORY();
                case MSG_UPDATEFISHINGXP.c_messageID: return new MSG_UPDATEFISHINGXP();
                case MSG_UPDATEITEMSPELLEXCLUSIONLIST.c_messageID: return new MSG_UPDATEITEMSPELLEXCLUSIONLIST();
                case MSG_UPDATEMAXSHADOWPIPS.c_messageID: return new MSG_UPDATEMAXSHADOWPIPS();
                case MSG_UPDATEMONSTERMAGICXP.c_messageID: return new MSG_UPDATEMONSTERMAGICXP();
                case MSG_UPDATENEWSPELLBOOKLAYOUTWARNING.c_messageID: return new MSG_UPDATENEWSPELLBOOKLAYOUTWARNING();
                case MSG_UPDATEPETBILLBOARD.c_messageID: return new MSG_UPDATEPETBILLBOARD();
                case MSG_UPDATEPIPCONVERSION.c_messageID: return new MSG_UPDATEPIPCONVERSION();
                case MSG_UPDATEPURCHASEDCHARACTERSLOTS.c_messageID: return new MSG_UPDATEPURCHASEDCHARACTERSLOTS();
                case MSG_UPDATEREMEMBERLASTREALM.c_messageID: return new MSG_UPDATEREMEMBERLASTREALM();
                case MSG_UPDATERESUMEINSTANCETIME.c_messageID: return new MSG_UPDATERESUMEINSTANCETIME();
                case MSG_UPDATERESUMEINSTANCETIME2.c_messageID: return new MSG_UPDATERESUMEINSTANCETIME2();
                case MSG_UPDATESUBSCRIBERBENEFITFLAGS.c_messageID: return new MSG_UPDATESUBSCRIBERBENEFITFLAGS();
                case MSG_UPDATETELEPORTEFFECT.c_messageID: return new MSG_UPDATETELEPORTEFFECT();
                case MSG_UPDATETUTORIALTIPLOG.c_messageID: return new MSG_UPDATETUTORIALTIPLOG();
                case MSG_USEPETADVENTUREPOWER.c_messageID: return new MSG_USEPETADVENTUREPOWER();
                case MSG_UpdateClassProjectPlayerProgress.c_messageID: return new MSG_UpdateClassProjectPlayerProgress();
                case MSG_WHIRLYBURLYMESSAGE.c_messageID: return new MSG_WHIRLYBURLYMESSAGE();
                case MSG_WHIRLYBURLYOPENKIOSK.c_messageID: return new MSG_WHIRLYBURLYOPENKIOSK();
                case MSG_ZONEGATELIST.c_messageID: return new MSG_ZONEGATELIST();
                case MSG_ZONEHOP.c_messageID: return new MSG_ZONEHOP();
            }
            throw new ArgumentOutOfRangeException(nameof(id));
        }
        
        public interface Handler
        {
            bool NetHandleAccessPassPurchase(MSG_ACCESSPASSPURCHASE msg) => false;
            bool NetHandleADDCROWNSREWARDSEVENT(MSG_ADDCROWNSREWARDSEVENT msg) => false;
            bool NetHandleAddPlayerToBasicChatChannel(MSG_ADDPLAYERTOBASICCHATCHANNEL msg) => false;
            bool NetHandleAthanorArrival(MSG_ATHANORARRIVAL msg) => false;
            bool NetHandleBasicChatChannelErrorMessage(MSG_BASICCHATCHANNELERRORMESSAGE msg) => false;
            bool NetHandleBasicChatChannelUpdateCooldown(MSG_BASICCHATCHANNELUPDATECOOLDOWN msg) => false;
            bool NetHandleBattleCardBuy(MSG_BATTLECARDBUY msg) => false;
            bool NetHandleBattleCardBuyConfirm(MSG_BATTLECARDBUYCONFIRM msg) => false;
            bool NetHandleBattleCardShopList(MSG_BATTLECARDSHOPLIST msg) => false;
            bool NetHandleBattleCardTrash(MSG_BATTLECARDTRASH msg) => false;
            bool NetHandleBattleCardTrashConfirm(MSG_BATTLECARDTRASHCONFIRM msg) => false;
            bool NetHandleBattlegroundEnd(MSG_BATTLEGROUNDEND msg) => false;
            bool NetHandleBattlegroundPenalty(MSG_BATTLEGROUNDPENALTY msg) => false;
            bool NetHandleBattlegroundPolymorphImprovement(MSG_BATTLEGROUNDPOLYMORPHIMPROVEMENT msg) => false;
            bool NetHandleBattlegroundPolymorphImproveReq(MSG_BATTLEGROUNDPOLYMORPHIMPROVEREQ msg) => false;
            bool NetHandleBattlegroundPolymorphImproveResp(MSG_BATTLEGROUNDPOLYMORPHIMPROVERESP msg) => false;
            bool NetHandleBattlegroundQueueGroup(MSG_BATTLEGROUNDQUEUEGROUP msg) => false;
            bool NetHandleBattlegroundQueueGroupCheck(MSG_BATTLEGROUNDQUEUEGROUPCHECK msg) => false;
            bool NetHandleBattlegroundQueueGroupJoined(MSG_BATTLEGROUNDQUEUEGROUPJOINED msg) => false;
            bool NetHandleBattlegroundQueueGroupStatus(MSG_BATTLEGROUNDQUEUEGROUPSTATUS msg) => false;
            bool NetHandleBattlegroundQueuePlayer(MSG_BATTLEGROUNDQUEUEPLAYER msg) => false;
            bool NetHandleBattlegroundQueueStats(MSG_BATTLEGROUNDQUEUESTATS msg) => false;
            bool NetHandleBattlegroundQueueUpdate(MSG_BATTLEGROUNDQUEUEUPDATE msg) => false;
            bool NetHandleBattlegroundRequestMatchData(MSG_BATTLEGROUNDREQUESTMATCHDATA msg) => false;
            bool NetHandleBattlegroundShowCompass(MSG_BATTLEGROUNDSHOWCOMPASS msg) => false;
            bool NetHandleBattlegroundTeleportPlayer(MSG_BATTLEGROUNDTELEPORTPLAYER msg) => false;
            bool NetHandleBattlegroundUpdatePoints(MSG_BATTLEGROUNDUPDATEPOINTS msg) => false;
            bool NetHandleBGIsPolymorphUnlockedRequest(MSG_BGISPOLYMORPHUNLOCKEDREQUEST msg) => false;
            bool NetHandleBGIsPolymorphUnlockedResponse(MSG_BGISPOLYMORPHUNLOCKEDRESPONSE msg) => false;
            bool NetHandleBGOpenPolymorphSelect(MSG_BGOPENPOLYMORPHSELECT msg) => false;
            bool NetHandleBGPOIUpdate(MSG_BGPOIUpdate msg) => false;
            bool NetHandleBGPlayerStatsUpdate(MSG_BGPlayerStatsUpdate msg) => false;
            bool NetHandleBGPlayerSync(MSG_BGPlayerSync msg) => false;
            bool NetHandleBGQueueStatus(MSG_BGQueueStatus msg) => false;
            bool NetHandleBGResetStats(MSG_BGResetStats msg) => false;
            bool NetHandleBGSelectPolymorphDone(MSG_BGSELECTPOLYMORPHDONE msg) => false;
            bool NetHandleBGSelectPolymorphRequest(MSG_BGSELECTPOLYMORPHREQUEST msg) => false;
            bool NetHandleBGSelectPolymorphResponse(MSG_BGSELECTPOLYMORPHRESPONSE msg) => false;
            bool NetHandleBGSigilProxyEvent(MSG_BGSigilProxyEvent msg) => false;
            bool NetHandleBuyPetElixirConfirm(MSG_BUYPETELIXIRCONFIRM msg) => false;
            bool NetHandleBuySeasonPass(MSG_BUYSEASONPASS msg) => false;
            bool NetHandleBattleBookAdd(MSG_BattleBookAdd msg) => false;
            bool NetHandleBattleBookClear(MSG_BattleBookClear msg) => false;
            bool NetHandleBattleBookRating(MSG_BattleBookRating msg) => false;
            bool NetHandleBattleBookRemove(MSG_BattleBookRemove msg) => false;
            bool NetHandleBattlegroundChatProjectData(MSG_BattlegroundChatProjectData msg) => false;
            bool NetHandleCanSeeTieredSpellGroups(MSG_CANSEETIEREDSPELLGROUPS msg) => false;
            bool NetHandleCastleToursGotoFriend(MSG_CASTLETOURSGOTOFRIEND msg) => false;
            bool NetHandleClassProjectClaimReward(MSG_CLASSPROJECTCLAIMREWARD msg) => false;
            bool NetHandleClassProjectRequestLeaderboard(MSG_CLASSPROJECTREQUESTLEADERBOARD msg) => false;
            bool NetHandleClassProjectRequestTeleport(MSG_CLASSPROJECTREQUESTTELEPORT msg) => false;
            bool NetHandleClassProjectsCSRResults(MSG_CLASSPROJECTSCSRRESULTS msg) => false;
            bool NetHandleClassProjectsRequestFriends(MSG_CLASSPROJECTSREQUESTFRIENDS msg) => false;
            bool NetHandleClassProjectUseCrowns(MSG_CLASSPROJECTUSECROWNS msg) => false;
            bool NetHandleClassProjectUseToken(MSG_CLASSPROJECTUSETOKEN msg) => false;
            bool NetHandleClearAllInteractions(MSG_CLEARALLINTERACTIONS msg) => false;
            bool NetHandleClearResumeInstance(MSG_CLEARRESUMEINSTANCE msg) => false;
            bool NetHandleClientRequestTeamHelpWorldInfo(MSG_CLIENTREQUESTTEAMHELPWORLDINFO msg) => false;
            bool NetHandleClientZoned(MSG_CLIENTZONED msg) => false;
            bool NetHandleCompleteInstance(MSG_COMPLETEINSTANCE msg) => false;
            bool NetHandleCompleteInstance2(MSG_COMPLETEINSTANCE2 msg) => false;
            bool NetHandleCONNECTIONSTATS(MSG_CONNECTIONSTATS msg) => false;
            bool NetHandleCreateNewEquipmentSet(MSG_CREATENEWEQUIPMENTSET msg) => false;
            bool NetHandleCreateSetFailed(MSG_CREATESETFAILED msg) => false;
            bool NetHandleCrownsRewardsTierReached(MSG_CROWNSREWARDSTIERREACHED msg) => false;
            bool NetHandleAddCSRAddFish(MSG_CSRADDFISH msg) => false;
            bool NetHandleCSRDeleteGift(MSG_CSRDELETEGIFT msg) => false;
            bool NetHandleAddCSRRequestFishList(MSG_CSRREQUESTFISHLIST msg) => false;
            bool NetHandleCSRRequestGlobalRegistry(MSG_CSRREQUESTGLOBALREGISTRY msg) => false;
            bool NetHandleSetFriendStatus(MSG_CSRSETFRIENDSTATUS msg) => false;
            bool NetHandleAddCSRTrashFish(MSG_CSRTRASHFISH msg) => false;
            bool NetHandleDailyPvPCompleted(MSG_DAILYPVPCOMPLETED msg) => false;
            bool NetHandleDailyQuestEffect(MSG_DAILYQUESTEFFECT msg) => false;
            bool NetHandleDeleteEquipmentSet(MSG_DELETEEQUIPMENTSET msg) => false;
            bool NetHandleDeleteSetsWithItem(MSG_DELETESETSWITHITEM msg) => false;
            bool NetHandleDisplayCollectedEssences(MSG_DISPLAYCOLLECTEDESSENCES msg) => false;
            bool NetHandleDisplayHelpGUI(MSG_DISPLAYHELPGUI msg) => false;
            bool NetHandleDisplayMessage(MSG_DISPLAYMESSAGE msg) => false;
            bool NetHandleDisplayPetOnlyMessage(MSG_DISPLAYPETONLYMESSAGE msg) => false;
            bool NetHandleEquipJewelRequest(MSG_EQUIPJEWELREQUEST msg) => false;
            bool NetHandleEquipJewelToItem(MSG_EQUIPJEWELTOITEM msg) => false;
            bool NetHandleEquipmentSetCreated(MSG_EQUIPMENTSETCREATED msg) => false;
            bool NetHandleEquipNewJewelToItem(MSG_EQUIPNEWJEWELTOITEM msg) => false;
            bool NetHandleEquipRecipe(MSG_EQUIPRECIPE msg) => false;
            bool NetHandleEquipSet(MSG_EQUIPSET msg) => false;
            bool NetHandleFishingLevelUp(MSG_FISHINGLEVELUP msg) => false;
            bool NetHandleGainPetXP(MSG_GAINPETXP msg) => false;
            bool NetHandleGetItemInfo(MSG_GETITEMINFO msg) => false;
            bool NetHandleGoHomeConfirm(MSG_GoHomeConfirm msg) => false;
            bool NetHandleGotoDormConfirm(MSG_GotoDormConfirm msg) => false;
            bool NetHandleGotoPlayerConfirm(MSG_GotoPlayerConfirm msg) => false;
            bool NetHandleHatchmakingMessage(MSG_HATCHMAKINGMESSAGE msg) => false;
            bool NetHandleHatchmakingCSRResults(MSG_HATCHMAKINGSCSRRESULTS msg) => false;
            bool NetHandleHatchmakingSearchResults(MSG_HATCHMAKINGSEARCHRESULTS msg) => false;
            bool NetHandleHatchmakingRequestPremiumPetExemptions(MSG_HATCHMAKINGSREQUESTPREMIUMPETEXEMPTIONS msg) => false;
            bool NetHandleHatchmakingStatus(MSG_HATCHMAKINGSTATUS msg) => false;
            bool NetHandleHatchMakingUpdateHatchDayPet(MSG_HATCHMAKINGSUPDATEHATCHDAYPET msg) => false;
            bool NetHandleHatchMakingUpdateHatchDayPet2(MSG_HATCHMAKINGSUPDATEHATCHDAYPET2 msg) => false;
            bool NetHandleHatchmakingUseTome(MSG_HATCHMAKINGUSETOME msg) => false;
            bool NetHandleHOLIDAYDATA(MSG_HOLIDAYDATA msg) => false;
            bool NetHandleInviteAllToBasicChatChannel(MSG_INVITEALLTOBASICCHATCHANNEL msg) => false;
            bool NetHandleInviteToBasicChatChannel(MSG_INVITETOBASICCHATCHANNEL msg) => false;
            bool NetHandleIsFriendsWithHouseOwner(MSG_ISFRIENDSWITHHOUSEOWNER msg) => false;
            bool NetHandleItemFinderHouseComplete(MSG_ITEMFINDERHOUSECOMPLETE msg) => false;
            bool NetHandleItemFinderRequestBank(MSG_ITEMFINDERREQUESTBANK msg) => false;
            bool NetHandleItemFinderRequestHouse(MSG_ITEMFINDERREQUESTHOUSE msg) => false;
            bool NetHandleItemIdentifierInfo(MSG_ITEMIDENTIFIERINFO msg) => false;
            bool NetHandleInfraction(MSG_Infraction msg) => false;
            bool NetHandleJewelSocketLockUpdate(MSG_JEWELSOCKETLOCKUPDATE msg) => false;
            bool NetHandleJewelSocketUnlockCost(MSG_JEWELSOCKETUNLOCKCOST msg) => false;
            bool NetHandleJoinBasicChatChannel(MSG_JOINBASICCHATCHANNEL msg) => false;
            bool NetHandleKhanDanceStatus(MSG_KHANDANCESTATUS msg) => false;
            bool NetHandleLavaLockStatus(MSG_LAVALOCKSTATUS msg) => false;
            bool NetHandleLogClassicMode(MSG_LOGCLASSICMODE msg) => false;
            bool NetHandleLogVideoCapabilities(MSG_LOGVIDEOCAPABILITIES msg) => false;
            bool NetHandleMagicMirrorChangePlayer(MSG_MAGICMIRRORCHANGEPLAYER msg) => false;
            bool NetHandleMagicMirrorRequestChange(MSG_MAGICMIRRORREQUESTCHANGE msg) => false;
            bool NetHandleMagicMirrorShopOpen(MSG_MAGICMIRRORSHOPOPEN msg) => false;
            bool NetHandleMapRequirements(MSG_MAPREQUIREMENTS msg) => false;
            bool NetHandleMonsterMagicLevelUp(MSG_MONSTERMAGICLEVELUP msg) => false;
            bool NetHandleMonsterMagicRequestCreate(MSG_MONSTERMAGICREQUESTCREATE msg) => false;
            bool NetHandleMonsterMagicUseTome(MSG_MONSTERMAGICUSETOME msg) => false;
            bool NetHandleMoveEquipmentSet(MSG_MOVEEQUIPMENTSET msg) => false;
            bool NetHandleOpenClassProjectPortal(MSG_OPENCLASSPROJECTPORTAL msg) => false;
            bool NetHandleOpenItemFinder(MSG_OPENITEMFINDER msg) => false;
            bool NetHandlePetElixirBuyRequest(MSG_PETELIXIRBUYREQUEST msg) => false;
            bool NetHandlePetElixirOpen(MSG_PETELIXIROPEN msg) => false;
            bool NetHandlePetFeedHappiness(MSG_PETFEEDHAPPINESS msg) => false;
            bool NetHandlePetGameSkip(MSG_PETGAMESKIP msg) => false;
            bool NetHandlePetGameSkipFeed(MSG_PETGAMESKIPFEED msg) => false;
            bool NetHandlePetTeleport(MSG_PETTELEPORT msg) => false;
            bool NetHandlePetTomePetAdded(MSG_PETTOMEPETADDED msg) => false;
            bool NetHandlePhotomancyUseTome(MSG_PHOTOMANCYUSETOME msg) => false;
            bool NetHandlePhotoTaken(MSG_PHOTOTAKEN msg) => false;
            bool NetHandlePublicJewelSocketUpdate(MSG_PUBLICJEWELSOCKETUPDATE msg) => false;
            bool NetHandleQuickSellRequest(MSG_QUICKSELLREQUEST msg) => false;
            bool NetHandleRadialZoneClusterQuickChatExt(MSG_RADIALZONECLUSTERQUICKCHATEXT msg) => false;
            bool NetHandleReadTutorialTip(MSG_READTUTORIALTIP msg) => false;
            bool NetHandleReinteract(MSG_REINTERACT msg) => false;
            bool NetHandleREMOVECROWNSREWARDSEVENT(MSG_REMOVECROWNSREWARDSEVENT msg) => false;
            bool NetHandleRemoveItemLocks(MSG_REMOVEITEMLOCKS msg) => false;
            bool NetHandleRemovePlayerFromBasicChatChannel(MSG_REMOVEPLAYERFROMBASICCHATCHANNEL msg) => false;
            bool NetHandleRemovePlayerFromBasicChatChannelUpdate(MSG_REMOVEPLAYERFROMBASICCHATCHANNELUPDATE msg) => false;
            bool NetHandleRequestBattlegroundsLoot(MSG_REQUESTBATTLEGROUNDSLOOT msg) => false;
            bool NetHandleRequestChatStats(MSG_REQUESTCHATSTATS msg) => false;
            bool NetHandleRequestClassProjectInfo(MSG_REQUESTCLASSPROJECTINFO msg) => false;
            bool NetHandleREQUESTCROWNSREWARDSEVENTS(MSG_REQUESTCROWNSREWARDSEVENTS msg) => false;
            bool NetHandleRequestHatchmaking(MSG_REQUESTHATCHMAKING msg) => false;
            bool NetHandleRequestHatchmakingAddPet(MSG_REQUESTHATCHMAKINGADDPET msg) => false;
            bool NetHandleRequestHatchmakingFriendPets(MSG_REQUESTHATCHMAKINGFRIENDPETS msg) => false;
            bool NetHandleRequestHatchmakingHatch(MSG_REQUESTHATCHMAKINGHATCH msg) => false;
            bool NetHandleRequestHatchmakingHatch2(MSG_REQUESTHATCHMAKINGHATCH2 msg) => false;
            bool NetHandleRequestHatchmakingHatchedPet(MSG_REQUESTHATCHMAKINGHATCHEDPET msg) => false;
            bool NetHandleRequestHatchmakingPetData(MSG_REQUESTHATCHMAKINGPETDATA msg) => false;
            bool NetHandleRequestHatchmakingPets(MSG_REQUESTHATCHMAKINGPETS msg) => false;
            bool NetHandleRequestHatchmakingPetTypes(MSG_REQUESTHATCHMAKINGPETTYPES msg) => false;
            bool NetHandleRequestHatchmakingRemovePet(MSG_REQUESTHATCHMAKINGREMOVEPET msg) => false;
            bool NetHandleRequestHatchmakingSearchPets(MSG_REQUESTHATCHMAKINGSEARCHPETS msg) => false;
            bool NetHandleRequestMainlineAudit(MSG_REQUESTMAINLINEAUDIT msg) => false;
            bool NetHandleRequestMiniGame(MSG_REQUESTMINIGAME msg) => false;
            bool NetHandleRequestMonsterTome(MSG_REQUESTMONSTERTOME msg) => false;
            bool NetHandleRequestPetTome(MSG_REQUESTPETTOME msg) => false;
            bool NetHandleRequestRadialFriendQuickChatExt(MSG_REQUESTRADIALFRIENDQUICKCHATEXT msg) => false;
            bool NetHandleRequestSigilInfo(MSG_REQUESTSIGILINFO msg) => false;
            bool NetHandleRequestTeamHelpFail(MSG_REQUESTTEAMHELPFAIL msg) => false;
            bool NetHandleRequestTeamHelpInfo(MSG_REQUESTTEAMHELPINFO msg) => false;
            bool NetHandleRequestTeamHelpJoin(MSG_REQUESTTEAMHELPJOIN msg) => false;
            bool NetHandleRequestTeamHelpJoinFail(MSG_REQUESTTEAMHELPJOINFAIL msg) => false;
            bool NetHandleRequestTeamHelpWorldInfo(MSG_REQUESTTEAMHELPWORLDINFO msg) => false;
            bool NetHandleRequestTeamUp(MSG_REQUESTTEAMUP msg) => false;
            bool NetHandleRequestTutorialTipLog(MSG_REQUESTTUTORIALTIPLOG msg) => false;
            bool NetHandleRequestZoneClusterQuickChatExt(MSG_REQUESTZONECLUSTERQUICKCHATEXT msg) => false;
            bool NetHandleRestoreOriginalCastle(MSG_RESTOREORIGINALCASTLE msg) => false;
            bool NetHandleResumeInstanceTeleportPlayer(MSG_RESUMEINSTANCETELEPORTPLAYER msg) => false;
            bool NetHandleRidableUpdate(MSG_RIDABLEUPDATE msg) => false;
            bool NetHandleRideObject(MSG_RIDEOBJECT msg) => false;
            bool NetHandleRideObjectFull(MSG_RIDEOBJECTFULL msg) => false;
            bool NetHandleRidersList(MSG_RIDERSLIST msg) => false;
            bool NetHandleRecallLocationConfirm(MSG_RecallLocationConfirm msg) => false;
            bool NetHandleSendTrivia(MSG_SENDTRIVIA msg) => false;
            bool NetHandleSepidiousArrival(MSG_SEPIDIOUSARRIVAL msg) => false;
            bool NetHandleSetBasicChatChannelPublic(MSG_SETBASICCHATCHANNELPUBLIC msg) => false;
            bool NetHandleSetElixirTimer(MSG_SETELIXIRTIMER msg) => false;
            bool NetHandleSetResumeInstance(MSG_SETRESUMEINSTANCE msg) => false;
            bool NetHandleSetStoredMount(MSG_SETSTOREDMOUNT msg) => false;
            bool NetHandleSwitchToPet(MSG_SWITCHTOPET msg) => false;
            bool NetHandleSetBGPolymorphLevel(MSG_SetBGPolymorphLevel msg) => false;
            bool NetHandleTeamUpAddPlayer(MSG_TEAMUPADDPLAYER msg) => false;
            bool NetHandleTeamUpAddPlayerToClient(MSG_TEAMUPADDPLAYERTOCLIENT msg) => false;
            bool NetHandleTeamUpFailed(MSG_TEAMUPFAILED msg) => false;
            bool NetHandleTeamUpRemovePlayer(MSG_TEAMUPREMOVEPLAYER msg) => false;
            bool NetHandleTeamUpRemovePlayerFromClient(MSG_TEAMUPREMOVEPLAYERFROMCLIENT msg) => false;
            bool NetHandleTeamUpTeleportPlayer(MSG_TEAMUPTELEPORTPLAYER msg) => false;
            bool NetHandleTieredSpellReset(MSG_TIEREDSPELLRESET msg) => false;
            bool NetHandleTieredSpellResetResponse(MSG_TIEREDSPELLRESETRESP msg) => false;
            bool NetHandleTieredSpellUpgrade(MSG_TIEREDSPELLUPGRADE msg) => false;
            bool NetHandleTieredSpellUpgradeResponse(MSG_TIEREDSPELLUPGRADERESP msg) => false;
            bool NetHandleTournamentLootRollInfo(MSG_TOURNAMENTLOOTROLLINFO msg) => false;
            bool NetHandleTournamentLootRollResponse(MSG_TOURNAMENTLOOTROLLRESPONSE msg) => false;
            bool NetHandleTournamentLootRollResult(MSG_TOURNAMENTLOOTROLLRESULT msg) => false;
            bool NetHandleUnequipSocketedJewel(MSG_UNEQUIPSOCKETEDJEWEL msg) => false;
            bool NetHandleUnlockPetTalent(MSG_UNLOCKPETTALENT msg) => false;
            bool NetHandleUnlockSockets(MSG_UNLOCKSOCKETS msg) => false;
            bool NetHandleUnlockSocketsConfirm(MSG_UNLOCKSOCKETSCONFIRM msg) => false;
            bool NetHandleUnsocketJewelRequest(MSG_UNSOCKETJEWELREQUEST msg) => false;
            bool NetHandleUpdateAdventurePowerCooldown(MSG_UPDATEADVENTUREPOWERCOOLDOWN msg) => false;
            bool NetHandleUpdateAfterCombatDance(MSG_UPDATEAFTERCOMBATDANCE msg) => false;
            bool NetHandleMsg_UpdateBankLimit(MSG_UPDATEBANKLIMIT msg) => false;
            bool NetHandleUpdateClassProjectButton(MSG_UPDATECLASSPROJECTBUTTON msg) => false;
            bool NetHandleUpdateClassProjectStatus(MSG_UPDATECLASSPROJECTSTATUS msg) => false;
            bool NetHandleUpdateCollectedEssences(MSG_UPDATECOLLECTEDESSENCES msg) => false;
            bool NetHandleUpdateCustomEmotes(MSG_UPDATECUSTOMEMOTES msg) => false;
            bool NetHandleUpdateEquipmentSets(MSG_UPDATEEQUIPMENTSETS msg) => false;
            bool NetHandleUpdateEventCurrency1(MSG_UPDATEEVENTCURRENCY1 msg) => false;
            bool NetHandleUpdateEventCurrency2(MSG_UPDATEEVENTCURRENCY2 msg) => false;
            bool NetHandleMsg_UpdateExpansion(MSG_UPDATEEXPANSION msg) => false;
            bool NetHandleUpdateExtraInventory(MSG_UPDATEEXTRAINVENTORY msg) => false;
            bool NetHandleUpdateFishingXP(MSG_UPDATEFISHINGXP msg) => false;
            bool NetHandleUpdateItemSpellExclusionList(MSG_UPDATEITEMSPELLEXCLUSIONLIST msg) => false;
            bool NetHandleUpdateMaxShadowPips(MSG_UPDATEMAXSHADOWPIPS msg) => false;
            bool NetHandleUpdateMonsterMagicXP(MSG_UPDATEMONSTERMAGICXP msg) => false;
            bool NetHandleUpdateNewSpellbookLayoutWarning(MSG_UPDATENEWSPELLBOOKLAYOUTWARNING msg) => false;
            bool NetHandleUpdatePetBillboard(MSG_UPDATEPETBILLBOARD msg) => false;
            bool NetHandleUpdatePipConversion(MSG_UPDATEPIPCONVERSION msg) => false;
            bool NetHandleUpdatePurchasedCharacterSlots(MSG_UPDATEPURCHASEDCHARACTERSLOTS msg) => false;
            bool NetHandleUpdateRememberLastRealm(MSG_UPDATEREMEMBERLASTREALM msg) => false;
            bool NetHandleUpdateResumeInstanceTime(MSG_UPDATERESUMEINSTANCETIME msg) => false;
            bool NetHandleUpdateResumeInstanceTime2(MSG_UPDATERESUMEINSTANCETIME2 msg) => false;
            bool NetHandleUpdateSubscriberBenefitFlags(MSG_UPDATESUBSCRIBERBENEFITFLAGS msg) => false;
            bool NetHandleUpdateTeleportEffect(MSG_UPDATETELEPORTEFFECT msg) => false;
            bool NetHandleUpdateTutorialTipLog(MSG_UPDATETUTORIALTIPLOG msg) => false;
            bool NetHandleUsePetAdventurePower(MSG_USEPETADVENTUREPOWER msg) => false;
            bool NetHandleUpdateClassProjectPlayerProgress(MSG_UpdateClassProjectPlayerProgress msg) => false;
            bool NetHandleWhirlyBurlyMessage(MSG_WHIRLYBURLYMESSAGE msg) => false;
            bool NetHandleWhirlyBurlyOpenKiosk(MSG_WHIRLYBURLYOPENKIOSK msg) => false;
            bool NetHandleZoneGateList(MSG_ZONEGATELIST msg) => false;
            bool NetHandleZoneHop(MSG_ZONEHOP msg) => false;
        }
    }
}